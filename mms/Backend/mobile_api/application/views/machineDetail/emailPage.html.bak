<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta http-equiv="x-ua-compatible" content="ie=edge">
	<title>SLYTRACKR</title>

	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css">
	<!-- Bootstrap core CSS -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.css">
	<!-- Material Design Bootstrap -->
	<!-- <link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.11/css/mdb.min.css" rel="stylesheet"> -->


	<link href="https://slymms.com/assets/css/style_detailPage.css?v=1.15" rel="stylesheet">

	<style>
		/* Style the tab */
		.tab {
			overflow: hidden;
			border: 1px solid #ccc;
			background-color: #f1f1f1;
            margin-top:10px;
		}

		/* Style the buttons inside the tab */
		.tab button {
			background-color: inherit;
			float: left;
			border: none;
			outline: none;
			cursor: pointer;
			padding: 14px 16px;
			transition: 0.3s;
			font-size: 17px;
		}

		/* Change background color of buttons on hover */
		.tab button:hover {
			background-color: #ddd;
		}

		/* Create an active/current tablink class */
		.tab button.active {
			background-color: #ccc;
		}

	</style>
</head>

<body>

	<div class="container">
		<div class="row">
			<!-- Header -->
			<div class="row">
				<div class="col-xs-3">
					<a class="center-header" style="font-size: 14px; font-weight: bold;" id="machine_id"></a>
				</div>
				<div class="col-xs-6">
					<img class='center-image img img-thumbnail' id='title_logo'>
				</div>
				<div class="col-xs-3">
					<a class="center-header" id="txtCurrentDate" style="font-size: 14px; font-weight: bold;"></a>
				</div>
			</div>
			<div class="tab" id="tabs">
			</div>
			<!-- Key Performance Indicators -->
			<div class="row KeyPerformance" id="key_indicator_container" style="margin:0 2%; margin-top:5px">
				<div style="margin-left:2%">
					<a style="font-size:16px; font-weight:bold;">Key Performance Indicators</a>
					
				</div>
				<div class="row" style="margin:2px;">
					<!-- OEE Gauge -->
					<div class="col-xs-4" style="min-height:250px">
						<div style="display: flex; justify-content: center;">
							<canvas style="height:250px" id="gauge_oee"></canvas>
						</div>
						<div style="text-align:center; margin-top:-195px;">
							<a style="font-weight:900; font-size:50px; color:green; z-index:3; position:relative"
								id="gauge_oee_text"></a>
						</div>
						<div style="text-align:center; margin-top:10px;">
							<a
								style="font-weight:900; font-size:30px; color:green; z-index:3; position:relative">OEE</a>
						</div>
					</div>

					<!-- Small Gauge -->
					<div class="col-xs-8" style="margin-top:30px">
						<div class="row">
							<!-- AVA Gauge -->
							<div class="col-xs-4" style="min-height:180px">
								<div style="display: flex; justify-content: center;">
									<canvas style="height:180px" id="gauge_ava"></canvas>
								</div>
								<div style="text-align:center; margin-top:-135px;">
									<a style="font-weight:600; font-size:30px; color:green; z-index:3; position:relative;"
										id="gauge_ava_text"></a>
								</div>
								<div style="text-align:center; margin-top:7px;">
									<a
										style="font-weight:600; font-size:20px; color:green; z-index:3; position:relative">AVA</a>
								</div>
							</div>
							<!-- QUA Gauge -->
							<div class="col-xs-4" style="min-height:180px">
								<div style="display: flex; justify-content: center;">
									<canvas style="height:180px" id="gauge_qua"></canvas>
								</div>
								<div style="text-align:center; margin-top:-135px;">
									<a style="font-weight:600; font-size:30px; color:green; z-index:3; position:relative"
										id="gauge_qua_text"></a>
								</div>
								<div style="text-align:center; margin-top:7px;">
									<a
										style="font-weight:600; font-size:20px; color:green; z-index:3; position:relative">QUA</a>
								</div>
							</div>
							<!-- PER Gauge -->
							<div class="col-xs-4" style="min-height:180px">
								<div style="display: flex; justify-content: center;">
									<canvas style="height:180px" id="gauge_per"></canvas>
								</div>
								<div style="text-align:center; margin-top:-135px;">
									<a style="font-weight:600; font-size:30px; color:green; z-index:3; position:relative"
										id="gauge_per_text"></a>
								</div>
								<div style="text-align:center; margin-top:7px;">
									<a
										style="font-weight:600; font-size:20px; color:green; z-index:3; position:relative">PER</a>
								</div>
							</div>


						</div>
					</div>
				</div>
			</div>

			<!-- Pie Chart and Aux -->
			<div class="row" style="margin:2%">
				<div>
					<a style="font-size:16px; font-weight:bold;">Utilization</a>
					
				</div>
				<!-- Pie Chart -->
				<div class="col-xs-7">
					<div class="relative">
						<div id="pie_chart_detail" style="margin-top:0"></div>
					</div>
				</div>

				<!-- Aux Data -->
				<div class="col-xs-5 center-AuxText" style="padding-top:80px">
					<div class="row" style="margin:0px; padding:0px; margin-top:1px">
						<div class="col-xs-7"><strong class="AuxText" style="color:green"
								id="title_status_aux1"></strong> </div>
						<div class="col-xs-5">
							<strong class="AuxText" style="color:green" id="status_aux1"></strong>
						</div>
					</div>
					<div class="row" style="margin:0px; padding:0px; margin-top:1px">
						<div class="col-xs-7"><strong class="AuxText" style="color:green"
								id="title_status_aux2"></strong>
						</div>
						<div class="col-xs-5">
							<strong class="AuxText" style="color:green" id="status_aux2"></strong>
						</div>
					</div>
					<div class="row" style="margin:0px; padding:0px; margin-top:1px; margin-bottom:1px">
						<div class="col-xs-7"><strong class="AuxText" style="color:green"
								id="title_status_aux3"></strong>
						</div>
						<div class="col-xs-5">
							<strong class="AuxText" style="color:green" id="status_aux3"></strong>
						</div>
					</div>
				</div>
			</div>

			<!-- Gantt Chart -->
			<div class="row" style="margin:2%;">
				<div>
					<a style="font-size:16px; font-weight:bold;">TimeLine</a>
					
				</div>
				<div style="height: 100px; display: block;" id="gantt_chart_detail">
				</div>
			</div>

			<!-- Bar Chart -->
			<div class="row" style="margin:2%">
				<div id="chart_div" style="height: 300px; display: block; padding: 0px 0px 0px 0px"></div>
			</div>



		</div>
		<div class="row" style="margin:2%">
			<a style="text-align: center;">NOTE: "In Cycle" is recorded when the spindle load is > .5 HP</a>
			<div style="text-align: center;"><img
					src="https://www.slytrackr.com/uploads/2/4/3/3/24335298/published/1446941887.png?1539790071" alt="" height="40" /></div>
		</div>
	</div>
	

	<!-- JQuery -->
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	<!-- Bootstrap tooltips -->
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.4/umd/popper.min.js">
	</script>
	<!-- Bootstrap core JavaScript -->
	<script type="text/javascript"
		src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js"></script>
	<!-- MDB core JavaScript -->
	<!-- <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.11/js/mdb.min.js"></script> -->


	<script src="https://slymms.com/d3_assets/d3.v3.min.js"></script>
	<script src="https://slymms.com/d3_assets/gantt-chart-d3.js?v=1.03"></script>
	<script src="https://slymms.com/gauge_assets/Gauge.min.js"></script>
	<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.20.1/moment.js"></script>
	<!-- Bar Chart -->
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

	<!-- For modal dialog -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.js"></script>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.css" />

	<script>
		var diff_time = 0;
		d = new Date();
		localTime = d.getTime();
		localOffset = d.getTimezoneOffset() * 60000;

		String.prototype.toHHMMSS = function () {
			var sec_num = parseInt(this, 10); // don't forget the second param
			var hours = Math.floor(sec_num / 3600);
			var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
			var seconds = sec_num - (hours * 3600) - (minutes * 60);

			if (hours < 10) {
				hours = "0" + hours;
			}
			if (minutes < 10) {
				minutes = "0" + minutes;
			}
			if (seconds < 10) {
				seconds = "0" + seconds;
			}
			var res = "";

			if (hours > 0)
				res = hours + 'hour(s) ' + minutes + 'minute(s) ' + seconds;
			else if (minutes > 0)
				res = minutes + 'minute(s) ' + seconds;
			else
				res = seconds;

			return res + "second(s)";
		}

	</script>

	<script>
		$(document).ready(function () {
			//m_gantt = m_gantt[0];
			m_status = m_status[0];
			m_hst = m_hst[0];

			// showing logo image.
			$('#title_logo').attr('src', m_info['logo']);
			// showing current date
			for (var i = 0; i < m_hst.length; i++) {
				$('#txtCurrentDate').html(m_hst[i]['date']);
				break;
			}

			// Showing Tabs
			var tabString = "";
			for (var i = 0; i < m_status.length; i++) {
				tabString += `<button class="tablinks" onclick="onClickMachine(event, ` + i + `)">` + m_status[i][
					'machine_id'
				] + `</button>`;
			}
			$('#tabs').html(tabString);

			google.charts.load('current', {
				'packages': ['corechart']
			});
            ShowMachine(0);
		});

		function onClickMachine(event, no) {
			
			ShowMachine(no);
		}

	</script>

	<script>
		function ShowMachine(no) {
            $('#machine_id').html(m_status[no]['machine_id']);
			DrawKeyPerformanceSection(no);
			DrawPieChartSection(no);
			DrawGanttChartSection(no);
			DrawBarChartSection(no);
		}

		function DrawKeyPerformanceSection(no) {
			DrawGauge_one('gauge_oee', m_hst[no].oee);
			DrawGauge_one('gauge_ava', m_hst[no].availability);
			DrawGauge_one('gauge_qua', m_hst[no].quality);
			DrawGauge_one('gauge_per', m_hst[no].performance);
		}

		function DrawPieChartSection(no) {
			//DrawPieChart(m_hst[no], m_status[no]);
			DrawPieChart_old(m_hst[no], m_status[no]);
			//console.log(m_hst[no]);

			$('#status_aux1').html(m_hst[no].aux1data);
			$('#status_aux2').html(m_hst[no].aux2data);
			$('#status_aux3').html(m_hst[no].aux3data);
			$('#title_status_aux1').html(m_status[no].aux1);
			$('#title_status_aux2').html(m_status[no].aux2);
			$('#title_status_aux3').html(m_status[no].aux3);
		}

		function DrawGanttChartSection(no) {
			//DrawGanttChart(m_gantt[no]);
			DrawGanttChart_old(m_gantt[no]);
		}

		function DrawBarChartSection(no) {
			DrawBarChart(m_hstList[no]);
		}

	</script>

	<script>
		function DrawGauge_one(gauge_id, value) {
			//console.log(gaugeArray[gauge_id]);

			var opts = {
				angle: -0.5,
				lineWidth: 0.15,
				pointer: {
					length: 0.6,
					strokeWidth: 0.02,
					color: '#000000'
				},
				limitMax: 'true',
				//percentColors: [[0.0, "#a9d70b" ], [0.50, "#f9c802"], [1.0, "#ff0000"]], // !!!!
				percentColors: [
					[0.0, "#ff0000"],
					[0.399, "#ff0000"],
					[0.4, "#ff0000"],
					[0.599, "#FFFF00"],
					[0.749, "#FFFF00"],
					[0.75, "#5DB501"],
					[0.1, "#5DB501"]
				], // !!!!
				strokeColor: '#E0E0E0',
				generateGradient: true
			};
			var target = document.getElementById(gauge_id); // your canvas element
			var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!

			gauge.maxValue = 100; // set max gauge value
			gauge.setMinValue(0); // Prefer setter over gauge.minValue = 0
			gauge.animationSpeed = 11; // set animation speed (32 is default value)
			gauge.set(value); // set actual value


			$('#' + gauge_id + '_text').html(value + "%");
		}

		function DrawPieChart_old(value, statusData) {
			var pie_chart_value_array = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
			var pie_chart_label_array = ['In Cycle', 'Uncategorized', 'Offline', statusData['r1'], statusData['r2'],
				statusData['r3'], statusData['r4'], statusData['r5'], statusData['r6'], statusData['r7'], statusData['r8']
			];
			var pie_chart_color_array = ['#4c9d2f', '#d8292f', '#8a8a8a', '#00008B', '#B8860B', '#006400', '#9400D3',
				'#FFD700', '#ADFF2F', '#FF69B4', '#ADD8E6'
			];

			pie_chart_value_array[0] += value['inCycle'];
			pie_chart_value_array[1] += value['uncat'];
			pie_chart_value_array[2] += value['offline'];
			pie_chart_value_array[3] += value['r1t'];
			pie_chart_value_array[4] += value['r2t'];
			pie_chart_value_array[5] += value['r3t'];
			pie_chart_value_array[6] += value['r4t'];
			pie_chart_value_array[7] += value['r5t'];
			pie_chart_value_array[8] += value['r6t'];
			pie_chart_value_array[9] += value['r7t'];
			pie_chart_value_array[10] += value['r8t'];

			// Removing zero values
			pie_chart_label_array = jQuery.grep(pie_chart_label_array, function (value, index) {
				return pie_chart_value_array[index] != 0;
			});
			pie_chart_color_array = jQuery.grep(pie_chart_color_array, function (value, index) {
				return pie_chart_value_array[index] != 0;
			});
			pie_chart_value_array = jQuery.grep(pie_chart_value_array, function (value, index) {
				return value != 0;
			});

			// Convert second to hour
			var sum = 0;
			for (i = 0; i < pie_chart_value_array.length; i++) {
				pie_chart_value_array[i] = pie_chart_value_array[i] / 3600;
				pie_chart_value_array[i] = pie_chart_value_array[i].toFixed(2);
				//console.log(pie_chart_value_array[i]);
				sum += parseFloat(pie_chart_value_array[i]);
			}
			//console.log(pie_chart_value_array);

			//console.log(sum);

			var digits = 1;
			var rounded_values = [];
			for (var i = 0; i < pie_chart_value_array.length; i += 1) {
				rounded_values.push(Math.round(pie_chart_value_array[i] / sum * 100 * 10 * digits) / 10 * digits + '%');
			}

			var text = rounded_values.map((v, i) =>
				`${pie_chart_label_array[i]}<br>${pie_chart_value_array[i]} hr(s)<br>${rounded_values[i]}`);

			var data = [{
				values: pie_chart_value_array,
				labels: pie_chart_label_array,
				type: 'pie',
				sort: false,
				marker: {
					colors: pie_chart_color_array
				},
				//text: text,
				hovertext: text,
				hoverinfo: 'text',
				//textinfo: 'none'
			}];

			var layout = {
				paper_bgcolor: "transparent",
				margin: {
					l: 40,
					r: 0,
					b: 0,
					t: 0,
				},
				showlegend: true,
				height: 210,
				legend: {
					font: 8
				},
			};

			//console.log(pie_chart_value_array);
			if (plot == undefined) {
				var plot = Plotly.newPlot('pie_chart_detail', data, layout, {
					displayModeBar: false
				});
			} else {
				plot.data = data;
			}
		}

		function DrawGanttChart_old(data) {
            $('#gantt_chart_detail').html('');
			//console.log(data);

			var tasks = [];
			//if(data.length == 0) return;
			//console.log(id);
			var updated_data = [];
			for (i = 0; i < data.length - 1; i++) {
				var connected = false;
				if (data[i].status == data[i + 1].status) {
					data[i + 1].start = data[i].start;
					connected = true;
				}
				if (connected == false)
					updated_data.push(data[i]);
			}
			updated_data.push(data[data.length - 1]);
			//var diff_time = parseFloat(info[0].timezone) * 3600;
			//console.log("diff_time= " + diff_time + ",  localoffset=" + localOffset);
			for (i = 0; i < updated_data.length; i++) {
				var item = {
					//"startDate": new Date((parseInt(updated_data[i].start) + diff_time) * 1000 + localOffset),
					//"endDate": new Date((parseInt(updated_data[i].end) + diff_time) * 1000 + localOffset),
					"startDate": new Date((parseInt(updated_data[i].start)) * 1000 + localOffset),
					"endDate": new Date((parseInt(updated_data[i].end)) * 1000 + localOffset),
					"color": updated_data[i].color,
					"taskName": updated_data[i].machine_id,
					"status": updated_data[i].status
				};
				tasks.push(item);
			}

			tasks.sort(function (a, b) {
				if (a.endDate > b.endDate) {
					return 1;
				}
				if (a.endDate < b.endDate) {
					return -1;
				}
				return 0;
			})

			$('#gantt_detail_status').html(tasks[tasks.length - 1].status);
			$('#gantt_detail_start').html(moment(tasks[tasks.length - 1].startDate).format('YYYY-MM-DD HH:mm:ss'));
			$('#gantt_detail_duration').html((((tasks[tasks.length - 1].endDate - tasks[tasks.length - 1].startDate) / 1000) +
				"").toHHMMSS());

			//console.log(tasks);
			if (updated_data.length == 0) {
				var item = {
					"startDate": "nbsp;",
					"endDate": "",
					"color": "#555",
					"taskName": "",
					"status": ""
				};
				tasks.push(item);
			}

			var taskNames = ["ONE"];

			tasks.sort(function (a, b) {
				return a.endDate - b.endDate;
			});
			var maxDate = tasks[tasks.length - 1].endDate;
			tasks.sort(function (a, b) {
				return a.startDate - b.startDate;
			});
			var minDate = tasks[0].startDate;

			var format = "%H:%M";
			//console.log($("#chartContainer_" + id).width());
			var margin = {
				top: 0,
				right: 10,
				bottom: 30,
				left: 10
			};

			var gantt = d3.gantt("#gantt_chart_detail", $("#gantt_chart_detail").width())
				.Container("#gantt_chart_detail")
				.taskTypes(taskNames)
				.tickFormat(format)
				.margin(margin);
			gantt(tasks);
		}

		function DrawGanttChart(data) {
			google.charts.load("current", {
				packages: ["timeline"]
			});
			google.charts.setOnLoadCallback(drawChart);

			function drawChart() {

				var tasks = [];
				//if(data.length == 0) return;
				//console.log(id);
				var updated_data = [];
				for (i = 0; i < data.length - 1; i++) {
					var connected = false;
					// if (data[i].status == data[i + 1].status) {
					// 	data[i + 1].start = data[i].start;
					// 	connected = true;
					// }
					if (connected == false)
						updated_data.push(data[i]);
				}
				updated_data.push(data[data.length - 1]);
				//var diff_time = parseFloat(info[0].timezone) * 3600;
				//console.log("diff_time= " + diff_time + ",  localoffset=" + localOffset);
				for (i = 0; i < updated_data.length; i++) {
					var item = [
						//"startDate": new Date((parseInt(updated_data[i].start) + diff_time) * 1000 + localOffset),
						//"endDate": new Date((parseInt(updated_data[i].end) + diff_time) * 1000 + localOffset),
						"",
						updated_data[i].status,
						updated_data[i].color,
						new Date((parseInt(updated_data[i].start)) * 1000 + localOffset),
						new Date((parseInt(updated_data[i].end)) * 1000 + localOffset),
					];
					tasks.push(item);
				}

				tasks.sort(function (a, b) {
					if (a.endDate > b.endDate) {
						return 1;
					}
					if (a.endDate < b.endDate) {
						return -1;
					}
					return 0;
				})

				var container = document.getElementById('gantt_chart_detail');
				var chart = new google.visualization.Timeline(container);
				var dataTable = new google.visualization.DataTable();
				dataTable.addColumn({
					type: 'string',
					id: 'Machine'
				});
				dataTable.addColumn({
					type: 'string',
					id: 'Status'
				});
				dataTable.addColumn({
					type: 'string',
					id: 'style',
					role: 'style'
				});
				dataTable.addColumn({
					type: 'date',
					id: 'Start'
				});
				dataTable.addColumn({
					type: 'date',
					id: 'End'
				});

				dataTable.addRows(tasks);

				var options = {
					timeline: {
						showRowLabels: false,
						colorByRowLabel: false,
						height: 100,
					},
					//avoidOverlappingGridLines: false,
					backgroundColor: "transparent",
					height: 100,
				};

				chart.draw(dataTable, options);
			}
		}

		function DrawPieChart(value, statusData) {
			var pie_chart_value_array = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
			var pie_chart_label_array = ['In Cycle', 'Uncategorized', 'Offline', statusData['r1'], statusData['r2'],
				statusData['r3'], statusData['r4'], statusData['r5'], statusData['r6'], statusData['r7'], statusData['r8']
			];
			var pie_chart_color_array = ['#4c9d2f', '#d8292f', '#8a8a8a', '#00008B', '#B8860B', '#006400', '#9400D3',
				'#FFD700', '#ADFF2F', '#FF69B4', '#ADD8E6'
			];

			pie_chart_value_array[0] += value['inCycle'];
			pie_chart_value_array[1] += value['uncat'];
			pie_chart_value_array[2] += value['offline'];
			pie_chart_value_array[3] += value['r1t'];
			pie_chart_value_array[4] += value['r2t'];
			pie_chart_value_array[5] += value['r3t'];
			pie_chart_value_array[6] += value['r4t'];
			pie_chart_value_array[7] += value['r5t'];
			pie_chart_value_array[8] += value['r6t'];
			pie_chart_value_array[9] += value['r7t'];
			pie_chart_value_array[10] += value['r8t'];

			// Removing zero values
			pie_chart_label_array = jQuery.grep(pie_chart_label_array, function (value, index) {
				return pie_chart_value_array[index] != 0;
			});
			pie_chart_color_array = jQuery.grep(pie_chart_color_array, function (value, index) {
				return pie_chart_value_array[index] != 0;
			});
			pie_chart_value_array = jQuery.grep(pie_chart_value_array, function (value, index) {
				return value != 0;
			});

			// Convert second to hour
			var sum = 0;
			for (i = 0; i < pie_chart_value_array.length; i++) {
				pie_chart_value_array[i] = parseFloat(pie_chart_value_array[i]) / 3600;
				pie_chart_value_array[i] = pie_chart_value_array[i].toFixed(2);
				//console.log(pie_chart_value_array[i]);
				sum += parseFloat(pie_chart_value_array[i]);
			}

			var data = new google.visualization.DataTable();
			data.addColumn('string', 'Task');
			data.addColumn('number', 'Hours per Day');

			data.addRows(pie_chart_value_array.length);
			for (i = 0; i < pie_chart_value_array.length; i++) {
				data.setCell(i, 0, pie_chart_label_array[i]);
				data.setCell(i, 1, pie_chart_value_array[i]);
			}


			var options = {
				title: '',
				//width: '100%',
				height: 200,
				is3D: true,
				sliceVisibilityThreshold: .0,
				backgroundColor: 'transparent',
				legend: {
					position: "right"
				},
			};
			var slices = {};


			for (i = 0; i < pie_chart_color_array.length; i++) {
				var item = {
					color: pie_chart_color_array[i]
				};
				slices[i] = item;
			}
			options.slices = slices;
			var chart = new google.visualization.PieChart(document.getElementById('pie_chart_detail'));
			chart.draw(data, options);
		}

		function DrawBarChart(hstList) {
			// console.log("BAR CHART");
			// console.log(hstList);
			google.charts.setOnLoadCallback(drawVisualization);

			function drawVisualization() {
				var dataList = [];
				dataList.push(['Day', 'In Cycle', 'Not In Cycle', 'In Cycle Trend']);
				for (var i = hstList.length - 1; i >= 0 && hstList.length - i < 30; i--) {
					var idle = 0;
					idle += parseFloat(hstList[i]['uncat']);
					idle += parseFloat(hstList[i]['r1t']);
					idle += parseFloat(hstList[i]['r2t']);
					idle += parseFloat(hstList[i]['r3t']);
					idle += parseFloat(hstList[i]['r4t']);
					idle += parseFloat(hstList[i]['r5t']);
					idle += parseFloat(hstList[i]['r6t']);
					idle += parseFloat(hstList[i]['r7t']);
					idle += parseFloat(hstList[i]['r8t']);

					var incycle = parseFloat(hstList[i]['inCycle']);
					var day = new Date(hstList[i]['date']);

					var item = [day, incycle / 3600, idle / 3600, incycle / 3600];
					dataList.push(item);
				}
				// console.log("HST DATA");
				// console.log(dataList);

				// Some raw data (not necessarily accurate)
				var data = google.visualization.arrayToDataTable(dataList);

				var options = {
					backgroundColor: "transparent",
					title: 'Utilization History',
					vAxis: {
						title: 'Utilization %'
					},
					hAxis: {
						title: 'Day'
					},
					seriesType: 'bars',
					series: {
						2: {
							type: 'line'
						}
					},
					chartArea: {
						width: '92%'
					},
					legend: {
						position: 'bottom'
					},
					width: '100%',
					colors: ['#10ce79', '#ce101d', '#10ce79']
				};

				var chart = new google.visualization.ComboChart(document.getElementById('chart_div'));
				chart.draw(data, options);
			}
		}

	</script>


	<script>
		/*

		var historyData = [];

		var statusData = [];
		statusData['machine_id'] = 1;
		statusData['customerID'] = "strohwig";
		var hstData = {};
		var ganttChart;
		var diff_time = 0;
		d = new Date();
		localTime = d.getTime();
		localOffset = d.getTimezoneOffset() * 60000;

		String.prototype.toHHMMSS = function () {
			var sec_num = parseInt(this, 10); // don't forget the second param
			var hours = Math.floor(sec_num / 3600);
			var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
			var seconds = sec_num - (hours * 3600) - (minutes * 60);

			if (hours < 10) {
				hours = "0" + hours;
			}
			if (minutes < 10) {
				minutes = "0" + minutes;
			}
			if (seconds < 10) {
				seconds = "0" + seconds;
			}
			var res = "";

			if (hours > 0)
				res = hours + 'hour(s) ' + minutes + 'minute(s) ' + seconds;
			else if (minutes > 0)
				res = minutes + 'minute(s) ' + seconds;
			else
				res = seconds;

			return res + "second(s)";
		}

		var run_mode = 1;
		var realtimeInterval = null;


		// realtimeInterval = setInterval(function() {
		//     if (run_mode == 1)
		//         getDetailData();
		// }, 5000);

		function nowDate() {
			var date = new Date();
			// console.log('localoffset=' + localOffset);
			// console.log("original=" + date.getTime());
			date.setTime(date.getTime() + localOffset + diff_time * 1000);
			// console.log("calced=" + date.getTime());

			yyyy = date.getFullYear();
			mm = date.getMonth() + 1;
			dd = date.getDate();
			return mm + "/" + dd + "/" + yyyy;
		}


		function getDetailData(sel_date = "now") {

			hstData = get_machine_detail_data_today[0];
			DrawCharts(hstData);
			//DrawGauge_one(item.id, item.Utilization);
			$('#status_aux1').html(hstData.aux1data);
			$('#status_aux2').html(hstData.aux2data);
			$('#status_aux3').html(hstData.aux3data);
			$('#txtCurrentDate').html(hstData.date);
			diff_time = parseFloat(get_timezone[0].timezone) * 3600;
			drawGanttChart_one(get_ganttData);

			DrawBarChart(get_allHstData);

		}



		function DrawCharts(data) {
			DrawGauge_one('gauge_oee', data.oee);
			DrawGauge_one('gauge_ava', data.availability);
			DrawGauge_one('gauge_qua', data.quality);
			DrawGauge_one('gauge_per', data.performance);
			DrawProgressBar('progress_bar', (parseInt(data.oee) + parseInt(data.quality)) / 2);
			drawPieChart(data);
		}

		var gaugeArray = [];

		

		function DrawProgressBar(id, value) {
			$('#' + id).width(value + '%');
			$('#' + id + '_text').text(value + '%');
		}
		var plotString = "";

		
		var plot;

		function SetStatusLabel(status) {
			var color = "#EFEF32";
			$('#gantt_detail_status').removeClass('statusLabel_green');
			$('#gantt_detail_status').removeClass('statusLabel_red');
			$('#gantt_detail_status').removeClass('statusLabel_yellow');

			$('#nowStatus').css('color', 'white');
			switch (status) {
				case "In Cycle":
				case "In Cycle - Monitoring":
					$('#gantt_detail_status').addClass('statusLabel_green');
					color = '#5DB501';
					break;
				case "Idle - Uncategorized":
				case "Uncategorized":
					$('#gantt_detail_status').addClass('statusLabel_red');
					color = '#FF0000';
					break;
				case "Offline":
					color = '#888B86';
					break;
				default:
					$('#gantt_detail_status').addClass('statusLabel_yellow');
					color = "#EFEF32";
					$('#nowStatus').css('color', 'black');
					break;
			}
			$('#nowStatus').html(status);
			$('#nowStatus').css('background', color);

		}

		
*/

	</script>
</body>

</html>
