[{"E:\\MMS\\ITS_Site\\Work\\src\\index.js":"1","E:\\MMS\\ITS_Site\\Work\\src\\App.js":"2","E:\\MMS\\ITS_Site\\Work\\src\\redux\\store.js":"3","E:\\MMS\\ITS_Site\\Work\\src\\navigation\\RouterConfig.js":"4","E:\\MMS\\ITS_Site\\Work\\src\\utils\\dropConsole.js":"5","E:\\MMS\\ITS_Site\\Work\\src\\navigation\\ProvideAuth.js":"6","E:\\MMS\\ITS_Site\\Work\\src\\navigation\\useProvideAuth.js":"7","E:\\MMS\\ITS_Site\\Work\\src\\redux\\reducers\\index.js":"8","E:\\MMS\\ITS_Site\\Work\\src\\navigation\\CONSTANTS.js":"9","E:\\MMS\\ITS_Site\\Work\\src\\pages\\LoginPage\\LoginPage.js":"10","E:\\MMS\\ITS_Site\\Work\\src\\redux\\actions\\appActions.js":"11","E:\\MMS\\ITS_Site\\Work\\src\\services\\global.js":"12","E:\\MMS\\ITS_Site\\Work\\src\\pages\\NotFound.js":"13","E:\\MMS\\ITS_Site\\Work\\src\\redux\\reducers\\factoryReducer.js":"14","E:\\MMS\\ITS_Site\\Work\\src\\redux\\reducers\\appReducer.js":"15","E:\\MMS\\ITS_Site\\Work\\src\\redux\\reducers\\userReducer.js":"16","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\MainLayout\\MainLayout.js":"17","E:\\MMS\\ITS_Site\\Work\\src\\services\\apiCall.js":"18","E:\\MMS\\ITS_Site\\Work\\src\\redux\\actions\\factoryActions.js":"19","E:\\MMS\\ITS_Site\\Work\\src\\services\\CONSTANTS.js":"20","E:\\MMS\\ITS_Site\\Work\\src\\redux\\actions\\userActions.js":"21","E:\\MMS\\ITS_Site\\Work\\src\\pages\\MachineStatus\\MachineStatus.js":"22","E:\\MMS\\ITS_Site\\Work\\src\\pages\\Settings\\Settings.js":"23","E:\\MMS\\ITS_Site\\Work\\src\\pages\\Dashboard\\Dashboard.js":"24","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\TopLayout\\TopLayout.js":"25","E:\\MMS\\ITS_Site\\Work\\src\\pages\\InstallConfig\\InstallConfig.js":"26","E:\\MMS\\ITS_Site\\Work\\src\\pages\\ProcessMonitor\\ProcessMonitor.js":"27","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\ContentLayout\\ContentLayout.js":"28","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\BottomLayout\\BottomLayout.js":"29","E:\\MMS\\ITS_Site\\Work\\src\\pages\\Maintenance\\Maintenance.js":"30","E:\\MMS\\ITS_Site\\Work\\src\\components\\InputWidgets\\InputNormal\\InputNormal.js":"31","E:\\MMS\\ITS_Site\\Work\\src\\components\\ButtonWidgets\\NormalButton\\NormalButton.js":"32","E:\\MMS\\ITS_Site\\Work\\src\\components\\InputWidgets\\InputPassword\\InputPassword.js":"33","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\QualityLayout\\QualityLayout.js":"34","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\CleaningStationLayout\\CleaningStationLayout.js":"35","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\TimeLoggerLayout\\TimeLoggerLayout.js":"36","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\MaintenanceTopLayout\\MaintenanceTopLayout.js":"37","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\PaintStationLayout\\PaintStationLayout.js":"38","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\BlastStationLayout\\BlastStationLayout.js":"39","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\AssemblyStation137Layout\\AssemblyStation137Layout.js":"40","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\AssemblyStation3Layout\\AssemblyStation3Layout.js":"41","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\AssemblyStation136Layout\\AssemblyStation136Layout.js":"42","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\InstallConfigTopLayout\\InstallConfigTopLayout.js":"43","E:\\MMS\\ITS_Site\\Work\\src\\components\\TextInput\\TextInput.js":"44","E:\\MMS\\ITS_Site\\Work\\src\\components\\RadialInput\\RadialInput.js":"45","E:\\MMS\\ITS_Site\\Work\\src\\components\\TextInputArrayModal\\TextInputArrayModal.js":"46","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\PartIDModal\\PartIDModal.js":"47","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\PartIDInputLayout\\PartIDInputLayout.js":"48","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\InputModeModal\\InputModeModal.js":"49","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\UserInfoLayout\\UserInfoLayout.js":"50","E:\\MMS\\ITS_Site\\Work\\src\\components\\GoodBadModal\\GoodBadModal.js":"51","E:\\MMS\\ITS_Site\\Work\\src\\components\\GoodBadWidget\\GoodBadWidget.js":"52","E:\\MMS\\ITS_Site\\Work\\src\\components\\CurrentPartProcessingTimeWidget\\CurrentPartProcessingTimeWidget.js":"53","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\LoginIDModal\\LoginIDModal.js":"54","E:\\MMS\\ITS_Site\\Work\\src\\components\\TankTimeWidget\\TankTimeWidget.js":"55","E:\\MMS\\ITS_Site\\Work\\src\\components\\UsageWidget\\UsageWidget.js":"56","E:\\MMS\\ITS_Site\\Work\\src\\components\\AmbientPaintWidget\\AmbientPaintWidget.js":"57","E:\\MMS\\ITS_Site\\Work\\src\\components\\RecordPhosphateTestInfoModal\\RecordPhosphateTestInfoModal.js":"58","E:\\MMS\\ITS_Site\\Work\\src\\components\\CurrentPartNotesWidget\\CurrentPartNotesWidget.js":"59","E:\\MMS\\ITS_Site\\Work\\src\\components\\RadialInputGroup\\RadialInputGroup.js":"60","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\RejectReasonsModal\\RejectReasonsModal.js":"61","E:\\MMS\\ITS_Site\\Work\\src\\components\\TextWithIcon\\TextWithIcon.js":"62","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SidebarMenu\\SidebarMenu.js":"63","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\DashboardUtilizationLayout\\DashboardUtilizationLayout.js":"64","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\DashboardOEELayout\\DashboardOEELayout.js":"65","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\DashboardMachineInfoLayout\\DashboardMachineInfoLayout.js":"66","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\DashboardChartLayout\\DashboardChartLayout.js":"67","E:\\MMS\\ITS_Site\\Work\\src\\components\\IndicatorDots.js":"68","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingsTopLayout\\SettingsTopLayout.js":"69","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingsServerInfoLayout\\SettingsServerInfoLayout.js":"70","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingsInCycleSignalFromLayout\\SettingsInCycleSignalFromLayout.js":"71","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingsAppInfoLayout\\SettingsAppInfoLayout.js":"72","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingTempDataSourceLayout\\SettingTempDataSourceLayout.js":"73","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingTimeLayout\\SettingTimeLayout.js":"74","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingShiftTimeLayout\\SettingShiftTimeLayout.js":"75","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingProcessMonitorLayout\\SettingProcessMonitorLayout.js":"76","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingMachineInfoLayout\\SettingMachineInfoLayout.js":"77","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingGanttChartLayout\\SettingGanttChartLayout.js":"78","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingDowntimeLayout\\SettingDowntimeLayout.js":"79","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingCycleStopAlertLayout\\SettingCycleStopAlertLayout.js":"80","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingCSLockLayout\\SettingCSLockLayout.js":"81","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingAuxDataLayout\\SettingAuxDataLayout.js":"82","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingAutomaticCounterLayout\\SettingAutomaticCounterLayout.js":"83","E:\\MMS\\ITS_Site\\Work\\src\\components\\MachineStatusButton\\MachineStatusButton.js":"84","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingMachineInfoLayout\\AccountIDModal\\AccountIDModal.js":"85","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingGanttChartLayout\\SettingGanttChartCalcLayout\\SettingGanttChartCalcLayout.js":"86","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\DashboardMachineInfoLayout\\JobIDModal\\JobIDModal.js":"87","E:\\MMS\\ITS_Site\\Work\\src\\components\\TextInputGroup\\TextInputGroup.js":"88","E:\\MMS\\ITS_Site\\Work\\src\\components\\OptionInput\\OptionInput.js":"89","E:\\MMS\\ITS_Site\\Work\\src\\components\\OneGantt\\OneGantt.js":"90","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\CycleAlertInfo\\CycleAlertInfoModal.js":"91","E:\\MMS\\ITS_Site\\Work\\src\\components\\SliderInput\\SliderInput.js":"92","E:\\MMS\\ITS_Site\\Work\\src\\components\\IndicatorItem\\IndicatorItem.js":"93","E:\\MMS\\ITS_Site\\Work\\src\\pages\\LanguageModal\\LanguageModal.js":"94","E:\\MMS\\ITS_Site\\Work\\src\\redux\\reducers\\shiftReducer.js":"95","E:\\MMS\\ITS_Site\\Work\\src\\redux\\actions\\shiftActions.js":"96","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\AlertDlg\\AlertDlg.js":"97","E:\\MMS\\MMSUI_Site\\Work\\src\\index.js":"98","E:\\MMS\\MMSUI_Site\\Work\\src\\App.js":"99","E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\store.js":"100","E:\\MMS\\MMSUI_Site\\Work\\src\\utils\\dropConsole.js":"101","E:\\MMS\\MMSUI_Site\\Work\\src\\navigation\\RouterConfig.js":"102","E:\\MMS\\MMSUI_Site\\Work\\src\\navigation\\ProvideAuth.js":"103","E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\reducers\\index.js":"104","E:\\MMS\\MMSUI_Site\\Work\\src\\navigation\\useProvideAuth.js":"105","E:\\MMS\\MMSUI_Site\\Work\\src\\navigation\\CONSTANTS.js":"106","E:\\MMS\\MMSUI_Site\\Work\\src\\pages\\NotFound.js":"107","E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\actions\\appActions.js":"108","E:\\MMS\\MMSUI_Site\\Work\\src\\services\\global.js":"109","E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\reducers\\appReducer.js":"110","E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\reducers\\userReducer.js":"111","E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\reducers\\factoryReducer.js":"112","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\MainLayout\\MainLayout.js":"113","E:\\MMS\\MMSUI_Site\\Work\\src\\services\\apiCall.js":"114","E:\\MMS\\MMSUI_Site\\Work\\src\\services\\CONSTANTS.js":"115","E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\actions\\userActions.js":"116","E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\actions\\factoryActions.js":"117","E:\\MMS\\MMSUI_Site\\Work\\src\\pages\\MachineStatus\\MachineStatus.js":"118","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\InputWidgets\\InputPassword\\InputPassword.js":"119","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\ButtonWidgets\\NormalButton\\NormalButton.js":"120","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\InputWidgets\\InputNormal\\InputNormal.js":"121","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\TopLayout\\TopLayout.js":"122","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\ContentLayout\\ContentLayout.js":"123","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\BottomLayout\\BottomLayout.js":"124","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\IndicatorDots.js":"125","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\UserInfoLayout\\UserInfoLayout.js":"126","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardUtilizationLayout\\DashboardUtilizationLayout.js":"127","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardOEELayout\\DashboardOEELayout.js":"128","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardMachineInfoLayout\\DashboardMachineInfoLayout.js":"129","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardChartLayout\\DashboardChartLayout.js":"130","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\TextWithIcon\\TextWithIcon.js":"131","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardMachineInfoLayout\\JobIDModal\\JobIDModal.js":"132","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\InputModeModal\\InputModeModal.js":"133","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\TextInput\\TextInput.js":"134","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\OneGantt\\OneGantt.js":"135","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\RadialInput\\RadialInput.js":"136","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\AlertDlg\\AlertDlg.js":"137","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\LoginIDModal\\LoginIDModal.js":"138","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\IndicatorItem\\IndicatorItem.js":"139","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\MachineStatusButton\\MachineStatusButton.js":"140","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\TextInputGroup\\TextInputGroup.js":"141","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\OptionInput\\OptionInput.js":"142","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\RadialInputGroup\\RadialInputGroup.js":"143","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\SliderInput\\SliderInput.js":"144","E:\\MMS\\MMSUI_Site\\Work\\src\\components\\TextInputArrayModal\\TextInputArrayModal.js":"145","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\MachineInfoLayout\\MachineInfoLayout.js":"146","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\MachineIDModal\\MachineIDModal.js":"147","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardOEELayout\\IndicatorItem.js":"148","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\FactoryInfoLayout\\FactoryInfoLayout.js":"149","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\AccountIDModal\\AccountIDModal.js":"150"},{"size":214,"mtime":1686956732000,"results":"151","hashOfConfig":"152"},{"size":1335,"mtime":1686943364000,"results":"153","hashOfConfig":"152"},{"size":913,"mtime":1626501154000,"results":"154","hashOfConfig":"152"},{"size":2358,"mtime":1686952370000,"results":"155","hashOfConfig":"152"},{"size":1169,"mtime":1690227464000,"results":"156","hashOfConfig":"152"},{"size":803,"mtime":1620424262000,"results":"157","hashOfConfig":"152"},{"size":692,"mtime":1686953480000,"results":"158","hashOfConfig":"152"},{"size":619,"mtime":1707122284788,"results":"159","hashOfConfig":"152"},{"size":302,"mtime":1686696024000,"results":"160","hashOfConfig":"152"},{"size":4253,"mtime":1686953440000,"results":"161","hashOfConfig":"152"},{"size":366,"mtime":1689890022000,"results":"162","hashOfConfig":"152"},{"size":17637,"mtime":1707891792172,"results":"163","hashOfConfig":"152"},{"size":301,"mtime":1682667226000,"results":"164","hashOfConfig":"152"},{"size":1004,"mtime":1707892928777,"results":"165","hashOfConfig":"152"},{"size":1967,"mtime":1707891810595,"results":"166","hashOfConfig":"152"},{"size":811,"mtime":1689881734000,"results":"167","hashOfConfig":"152"},{"size":6958,"mtime":1707902837895,"results":"168","hashOfConfig":"152"},{"size":25891,"mtime":1707128005283,"results":"169","hashOfConfig":"152"},{"size":169,"mtime":1689966922000,"results":"170","hashOfConfig":"152"},{"size":864,"mtime":1707122464299,"results":"171","hashOfConfig":"152"},{"size":374,"mtime":1689846034000,"results":"172","hashOfConfig":"152"},{"size":3856,"mtime":1704477998558,"results":"173","hashOfConfig":"152"},{"size":9170,"mtime":1704451281196,"results":"174","hashOfConfig":"152"},{"size":3328,"mtime":1689891428000,"results":"175","hashOfConfig":"152"},{"size":4560,"mtime":1704478022404,"results":"176","hashOfConfig":"152"},{"size":7727,"mtime":1686951072000,"results":"177","hashOfConfig":"152"},{"size":1697,"mtime":1686950652000,"results":"178","hashOfConfig":"152"},{"size":498,"mtime":1686951386000,"results":"179","hashOfConfig":"152"},{"size":8407,"mtime":1707904419150,"results":"180","hashOfConfig":"152"},{"size":531,"mtime":1686950342000,"results":"181","hashOfConfig":"152"},{"size":916,"mtime":1682706892000,"results":"182","hashOfConfig":"152"},{"size":444,"mtime":1623885264000,"results":"183","hashOfConfig":"152"},{"size":865,"mtime":1682707940000,"results":"184","hashOfConfig":"152"},{"size":10400,"mtime":1689980342000,"results":"185","hashOfConfig":"152"},{"size":7115,"mtime":1689974978000,"results":"186","hashOfConfig":"152"},{"size":13995,"mtime":1703850564580,"results":"187","hashOfConfig":"152"},{"size":1404,"mtime":1686952196000,"results":"188","hashOfConfig":"152"},{"size":10806,"mtime":1689978892000,"results":"189","hashOfConfig":"152"},{"size":7750,"mtime":1689978904000,"results":"190","hashOfConfig":"152"},{"size":12536,"mtime":1689978240000,"results":"191","hashOfConfig":"152"},{"size":9863,"mtime":1689979510000,"results":"192","hashOfConfig":"152"},{"size":16333,"mtime":1689979430000,"results":"193","hashOfConfig":"152"},{"size":1436,"mtime":1686952186000,"results":"194","hashOfConfig":"152"},{"size":1184,"mtime":1686951848000,"results":"195","hashOfConfig":"152"},{"size":493,"mtime":1686950342000,"results":"196","hashOfConfig":"152"},{"size":3173,"mtime":1689977826000,"results":"197","hashOfConfig":"152"},{"size":2397,"mtime":1686951442000,"results":"198","hashOfConfig":"152"},{"size":1225,"mtime":1687170978000,"results":"199","hashOfConfig":"152"},{"size":3256,"mtime":1707866299217,"results":"200","hashOfConfig":"152"},{"size":3330,"mtime":1707912310106,"results":"201","hashOfConfig":"152"},{"size":2587,"mtime":1687899346000,"results":"202","hashOfConfig":"152"},{"size":2174,"mtime":1687208422000,"results":"203","hashOfConfig":"152"},{"size":1117,"mtime":1687252852000,"results":"204","hashOfConfig":"152"},{"size":3005,"mtime":1687163846000,"results":"205","hashOfConfig":"152"},{"size":1260,"mtime":1688074836000,"results":"206","hashOfConfig":"152"},{"size":1961,"mtime":1689976154000,"results":"207","hashOfConfig":"152"},{"size":1054,"mtime":1686950558000,"results":"208","hashOfConfig":"152"},{"size":7383,"mtime":1703850547201,"results":"209","hashOfConfig":"152"},{"size":657,"mtime":1687209892000,"results":"210","hashOfConfig":"152"},{"size":644,"mtime":1686950342000,"results":"211","hashOfConfig":"152"},{"size":2622,"mtime":1687384442000,"results":"212","hashOfConfig":"152"},{"size":965,"mtime":1686951838000,"results":"213","hashOfConfig":"152"},{"size":3819,"mtime":1703850561295,"results":"214","hashOfConfig":"152"},{"size":3468,"mtime":1686951290000,"results":"215","hashOfConfig":"152"},{"size":1271,"mtime":1686951482000,"results":"216","hashOfConfig":"152"},{"size":6857,"mtime":1707904247998,"results":"217","hashOfConfig":"152"},{"size":712,"mtime":1686951806000,"results":"218","hashOfConfig":"152"},{"size":921,"mtime":1682995436000,"results":"219","hashOfConfig":"152"},{"size":1285,"mtime":1686952344000,"results":"220","hashOfConfig":"152"},{"size":1353,"mtime":1686951526000,"results":"221","hashOfConfig":"152"},{"size":1289,"mtime":1703850558362,"results":"222","hashOfConfig":"152"},{"size":1062,"mtime":1686951456000,"results":"223","hashOfConfig":"152"},{"size":1925,"mtime":1689876846000,"results":"224","hashOfConfig":"152"},{"size":2569,"mtime":1689929420000,"results":"225","hashOfConfig":"152"},{"size":2098,"mtime":1704356634229,"results":"226","hashOfConfig":"152"},{"size":1882,"mtime":1689876216000,"results":"227","hashOfConfig":"152"},{"size":2966,"mtime":1689967726000,"results":"228","hashOfConfig":"152"},{"size":1691,"mtime":1689933910000,"results":"229","hashOfConfig":"152"},{"size":1807,"mtime":1689877278000,"results":"230","hashOfConfig":"152"},{"size":4417,"mtime":1691243808000,"results":"231","hashOfConfig":"152"},{"size":1848,"mtime":1704355977579,"results":"232","hashOfConfig":"152"},{"size":1317,"mtime":1689893706000,"results":"233","hashOfConfig":"152"},{"size":2074,"mtime":1689932512000,"results":"234","hashOfConfig":"152"},{"size":2414,"mtime":1704447918394,"results":"235","hashOfConfig":"152"},{"size":3332,"mtime":1707905024762,"results":"236","hashOfConfig":"152"},{"size":3344,"mtime":1689966388000,"results":"237","hashOfConfig":"152"},{"size":2689,"mtime":1707893519572,"results":"238","hashOfConfig":"152"},{"size":1519,"mtime":1689932436000,"results":"239","hashOfConfig":"152"},{"size":955,"mtime":1683226118000,"results":"240","hashOfConfig":"152"},{"size":8531,"mtime":1707127945675,"results":"241","hashOfConfig":"152"},{"size":2710,"mtime":1686951486000,"results":"242","hashOfConfig":"152"},{"size":707,"mtime":1689904380000,"results":"243","hashOfConfig":"152"},{"size":1520,"mtime":1683067796000,"results":"244","hashOfConfig":"152"},{"size":1212,"mtime":1686950970000,"results":"245","hashOfConfig":"152"},{"size":2157,"mtime":1707123128233,"results":"246","hashOfConfig":"152"},{"size":161,"mtime":1707892607764,"results":"247","hashOfConfig":"152"},{"size":1808,"mtime":1707912336609,"results":"248","hashOfConfig":"152"},{"size":214,"mtime":1686956732000,"results":"249","hashOfConfig":"250"},{"size":1335,"mtime":1686943364000,"results":"251","hashOfConfig":"250"},{"size":913,"mtime":1721897220880,"results":"252","hashOfConfig":"250"},{"size":1169,"mtime":1690227464000,"results":"253","hashOfConfig":"250"},{"size":2159,"mtime":1721934161079,"results":"254","hashOfConfig":"250"},{"size":803,"mtime":1620424262000,"results":"255","hashOfConfig":"250"},{"size":334,"mtime":1721897236570,"results":"256","hashOfConfig":"250"},{"size":692,"mtime":1686953480000,"results":"257","hashOfConfig":"250"},{"size":344,"mtime":1712863115964,"results":"258","hashOfConfig":"250"},{"size":301,"mtime":1682667226000,"results":"259","hashOfConfig":"250"},{"size":366,"mtime":1721934172735,"results":"260","hashOfConfig":"250"},{"size":7515,"mtime":1722016304013,"results":"261","hashOfConfig":"250"},{"size":1130,"mtime":1721943822120,"results":"262","hashOfConfig":"250"},{"size":811,"mtime":1721928139202,"results":"263","hashOfConfig":"250"},{"size":1004,"mtime":1707892928777,"results":"264","hashOfConfig":"250"},{"size":5400,"mtime":1722017653050,"results":"265","hashOfConfig":"250"},{"size":26446,"mtime":1725267748553,"results":"266","hashOfConfig":"250"},{"size":838,"mtime":1725095445757,"results":"267","hashOfConfig":"250"},{"size":374,"mtime":1721928135414,"results":"268","hashOfConfig":"250"},{"size":169,"mtime":1689966922000,"results":"269","hashOfConfig":"250"},{"size":3261,"mtime":1721973829600,"results":"270","hashOfConfig":"250"},{"size":865,"mtime":1682707940000,"results":"271","hashOfConfig":"272"},{"size":444,"mtime":1623885264000,"results":"273","hashOfConfig":"272"},{"size":916,"mtime":1682706892000,"results":"274","hashOfConfig":"272"},{"size":529,"mtime":1721941893878,"results":"275","hashOfConfig":"250"},{"size":6571,"mtime":1725095826238,"results":"276","hashOfConfig":"250"},{"size":4851,"mtime":1725096962862,"results":"277","hashOfConfig":"250"},{"size":921,"mtime":1682995436000,"results":"278","hashOfConfig":"272"},{"size":2471,"mtime":1721973186779,"results":"279","hashOfConfig":"250"},{"size":2597,"mtime":1721994232923,"results":"280","hashOfConfig":"250"},{"size":1811,"mtime":1721994224387,"results":"281","hashOfConfig":"250"},{"size":6841,"mtime":1712878008531,"results":"282","hashOfConfig":"272"},{"size":1334,"mtime":1721994217041,"results":"283","hashOfConfig":"250"},{"size":965,"mtime":1686951838000,"results":"284","hashOfConfig":"272"},{"size":2689,"mtime":1707893519572,"results":"285","hashOfConfig":"272"},{"size":3256,"mtime":1707866299217,"results":"286","hashOfConfig":"272"},{"size":1184,"mtime":1686951848000,"results":"287","hashOfConfig":"272"},{"size":4112,"mtime":1721974935804,"results":"288","hashOfConfig":"250"},{"size":493,"mtime":1686950342000,"results":"289","hashOfConfig":"272"},{"size":1808,"mtime":1707912336609,"results":"290","hashOfConfig":"250"},{"size":3005,"mtime":1687163846000,"results":"291","hashOfConfig":"250"},{"size":1520,"mtime":1683067796000,"results":"292","hashOfConfig":"250"},{"size":2256,"mtime":1721975910320,"results":"293","hashOfConfig":"250"},{"size":1519,"mtime":1689932436000,"results":"294","hashOfConfig":"272"},{"size":955,"mtime":1683226118000,"results":"295","hashOfConfig":"272"},{"size":644,"mtime":1686950342000,"results":"296","hashOfConfig":"272"},{"size":707,"mtime":1689904380000,"results":"297","hashOfConfig":"272"},{"size":3173,"mtime":1689977826000,"results":"298","hashOfConfig":"272"},{"size":2000,"mtime":1721941876574,"results":"299","hashOfConfig":"250"},{"size":2764,"mtime":1721941883686,"results":"300","hashOfConfig":"250"},{"size":2146,"mtime":1713163336887,"results":"301","hashOfConfig":"272"},{"size":1619,"mtime":1721938352026,"results":"302","hashOfConfig":"250"},{"size":3301,"mtime":1721938404994,"results":"303","hashOfConfig":"250"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},"231ddp",{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"306"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"306"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"306"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"306"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"306"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"306"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"306"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"306"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"306"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"306"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"306"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"306"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"306"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"306"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"306"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"306"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"306"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"306"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"306"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"306"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"306"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"306"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"306"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"306"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"306"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"306"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"306"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"306"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"306"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"306"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"306"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"306"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"306"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"306"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"306"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"306"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"306"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"306"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"306"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497","usedDeprecatedRules":"306"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500","usedDeprecatedRules":"306"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"306"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"306"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"306"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"306"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"306"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"306"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"306"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"306"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527","usedDeprecatedRules":"306"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"530","messages":"531","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"306"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"306"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12tlia6",{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"571","messages":"572","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"579","messages":"580","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"587","messages":"588","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"589","messages":"590","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"593","messages":"594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"597","messages":"598","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"599","messages":"600","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"601"},"1egxq6z",{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"601"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"601"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"608","messages":"609","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"610","messages":"611","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"614"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"617","messages":"618","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"619","messages":"620","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"621","messages":"622","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"614"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"601"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"614"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"601"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"601"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"601"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"640","messages":"641","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"644","messages":"645","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"601"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"601"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"601"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"601"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"601"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\MMS\\ITS_Site\\Work\\src\\index.js",[],["666","667"],"E:\\MMS\\ITS_Site\\Work\\src\\App.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\redux\\store.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\navigation\\RouterConfig.js",["668"],"import {\r\n  ROOT,\r\n  ROUTE_LOGIN\r\n} from \"navigation/CONSTANTS\";\r\nimport { NotFound } from \"pages/NotFound\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\n\r\nimport { Spin } from \"antd\";\r\nimport MainLayout from \"layouts/MainLayout/MainLayout\";\r\nimport LoginPage from \"pages/LoginPage/LoginPage\";\r\nimport { appData } from \"services/global\";\r\n// // import LoginPage from \"pages/LoginPage/LoginPage\";\r\n// const LoginPage = React.lazy(() => import(\"pages/LoginPage/LoginPage\"));\r\n\r\nexport const RouterConfig = () => {\r\n  const screenSize = useWindowSize();\r\n  const dispatch = useDispatch();\r\n  const { isSpinning } = useSelector((x) => x.appDataStore);\r\n\r\n  useEffect(() => {\r\n    if (screenSize === undefined || screenSize.width === undefined) return;\r\n    appData.width = screenSize.width;\r\n    appData.height = screenSize.height;\r\n    dispatch(setAppDataStore(appData));\r\n  }, [screenSize]);\r\n\r\n  return (\r\n    <Spin size={\"large\"} spinning={isSpinning}>\r\n      <Switch>\r\n        <Route exact path={ROOT} component={MainLayout} />\r\n        <Route exact path={ROUTE_LOGIN} component={LoginPage} />\r\n        {/* List a generic 404-Not Found route here */}\r\n        <Route path=\"*\" component={NotFound} />\r\n      </Switch>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nfunction useWindowSize() {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    function handleResize() {\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n\r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n\r\n  return windowSize;\r\n}\r\n","E:\\MMS\\ITS_Site\\Work\\src\\utils\\dropConsole.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\navigation\\ProvideAuth.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\navigation\\useProvideAuth.js",["669"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { apiCallForLogin } from \"services/apiCall\";\r\n\r\nexport function useProvideAuth() {\r\n  const { userData } = useSelector((x) => x.userDataStore);\r\n  const dispatch = useDispatch();\r\n  // signin method: It can either return a promise or execute a callback function.\r\n  // You can prefer to keep this in userServices.js\r\n  const signin = (userDetail) => {\r\n    return new Promise((resolve, reject) => {\r\n      apiCallForLogin(userDetail)\r\n        .then((res) => {\r\n          resolve(res);\r\n        })\r\n        .catch((err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  };\r\n\r\n  return {\r\n    userData,\r\n    signin,\r\n  };\r\n}\r\n","E:\\MMS\\ITS_Site\\Work\\src\\redux\\reducers\\index.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\navigation\\CONSTANTS.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\pages\\LoginPage\\LoginPage.js",["670"],"// @flow strict\r\n\r\nimport { Col, Row, message } from \"antd\";\r\nimport { ROOT } from \"navigation/CONSTANTS\";\r\nimport { useAuth } from \"navigation/ProvideAuth\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { setFromUrl } from \"redux/actions/userActions\";\r\nimport \"./LoginPage.css\";\r\n\r\nimport NormalButton from \"components/ButtonWidgets/NormalButton/NormalButton\";\r\nimport InputNormal from \"components/InputWidgets/InputNormal/InputNormal\";\r\nimport InputPassword from \"components/InputWidgets/InputPassword/InputPassword\";\r\nimport { setUserDataStore } from \"redux/actions/userActions\";\r\nimport { logoUrl } from \"services/CONSTANTS\";\r\nimport { setUserData, userData, validatePassword } from \"services/global\";\r\n\r\nfunction LoginPage(props) {\r\n  const history = useHistory();\r\n  const auth = useAuth();\r\n  const dispatch = useDispatch();\r\n  const [isBusy, setIsBusy] = useState(false);\r\n  const { userDataStore } = useSelector((x) => x.userDataStore);\r\n  const [userDetail, setUserDetail] = useState({\r\n    name: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [wrongList, setWrongList] = useState([]);\r\n\r\n  const validateFields = () => {\r\n    const { name, password } = userDetail;\r\n    let tmpWrongList = [];\r\n    if (name === undefined || name === \"\") {\r\n      tmpWrongList.push(\"name\");\r\n    }\r\n    if (validatePassword(password) === false) tmpWrongList.push(\"password\");\r\n    setWrongList(tmpWrongList);\r\n    return tmpWrongList.length === 0;\r\n  };\r\n\r\n  const onClickNext = () => {\r\n    if (validateFields() === false) {\r\n      return;\r\n    }\r\n    onClickLogin();\r\n  };\r\n\r\n  useEffect(() => {\r\n    userData.name = \"\";\r\n    userData.photo = \"\";\r\n    dispatch(setUserDataStore(userData));\r\n  }, []);\r\n\r\n  const onClickLogin = () => {\r\n    setIsBusy(true);\r\n    auth\r\n      .signin(userDetail)\r\n      .then((res) => {\r\n        const { status } = res;\r\n        if (status === undefined || status === false) {\r\n          setIsBusy(false);\r\n          message.error(\"Login Fail\");\r\n        } else {\r\n          setIsBusy(false);\r\n          onSuccessLogin(res);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsBusy(false);\r\n        message.error(\"Login Fail\");\r\n      });\r\n\r\n    setIsBusy(false);\r\n    onSuccessLogin(userDetail);\r\n  };\r\n\r\n  const onSuccessLogin = (info) => {\r\n    if (info.name === undefined || info.password === undefined) {\r\n      return;\r\n    }\r\n    setUserData(info);\r\n    dispatch(setUserDataStore(userData));\r\n    const fromUrl = userDataStore.fromUrl;\r\n    setTimeout(() => {\r\n      if (fromUrl === undefined || fromUrl.pathname === undefined) {\r\n        history.replace(ROOT);\r\n      } else {\r\n        dispatch(setFromUrl(undefined));\r\n        history.replace(fromUrl.pathname);\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-page\">\r\n      <Row className=\"auth-dialog-row\">\r\n        <Col className=\"auth-dialog-widget\">\r\n          <div>\r\n            <div className=\"auth-logo-container\">\r\n              <img className=\"auth-logo\" src={logoUrl} alt=\"logo\" />\r\n            </div>\r\n            <div style={{ marginTop: 40 }}>\r\n              <InputNormal\r\n                userDetail={userDetail}\r\n                setUserDetail={setUserDetail}\r\n                placeholder=\"Enter Name\"\r\n                field=\"name\"\r\n                title=\"Username\"\r\n                wrongList={wrongList}\r\n                setWrongList={setWrongList}\r\n              />\r\n            </div>\r\n            <div style={{ marginTop: 20 }}>\r\n              <InputPassword\r\n                userDetail={userDetail}\r\n                setUserDetail={setUserDetail}\r\n                wrongList={wrongList}\r\n                setWrongList={setWrongList}\r\n                onPressEnter={onClickNext}\r\n              />\r\n            </div>\r\n            <div style={{ marginTop: 30 }}>\r\n              <NormalButton\r\n                style={{ backgroundColor: \"var(--blueColor)\" }}\r\n                onClick={onClickNext}\r\n                isBusy={isBusy}\r\n              >\r\n                Login\r\n              </NormalButton>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\redux\\actions\\appActions.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\services\\global.js",["671","672"],"import moment from \"moment\";\r\n// User Data\r\nlet userData = {\r\n  id: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n  username_full: \"UnAttended\",\r\n  user_picture: \"\",\r\n  security_level: \"\",\r\n  customer_id: \"\",\r\n};\r\n\r\nexport function setUserData(value) {\r\n  if (value === null || value === undefined || Object.keys(value).length === 0)\r\n    return;\r\n  userData = value;\r\n}\r\nexport { userData };\r\n\r\n// Factory Data\r\nvar factoryData = {\r\n  accountId: \"\",\r\n  customer_details: {},\r\n  current_ganttdata: {},\r\n  last_ganttdata: {},\r\n  machine_status: [\r\n    \"Clear Chips\",\r\n    \"Wait Materials\",\r\n    \"Wait Tooling\",\r\n    \"Break\",\r\n    \"No Operator\",\r\n    \"P.M\",\r\n    \"Unplanned Repair\",\r\n    \"Other\",\r\n    \"Idle-Uncategorized\",\r\n    \"In Cycle\",\r\n    \"Offline\",\r\n  ],\r\n  idle_times: [0, 0, 0, 0, 0, 0, 0, 0],\r\n  uncat_time: 0,\r\n  idle_status: \"\",\r\n};\r\n\r\nexport function setFactoryData(value) {\r\n  if (value === null || value === undefined || Object.keys(value).length === 0)\r\n    return;\r\n  factoryData.accountId = isNull(value.accountId) ? \"\" : value.accountId;\r\n  factoryData.customer_details = isNull(value.customer_details)\r\n    ? {}\r\n    : value.customer_details;\r\n  factoryData.current_ganttdata = isNull(value.current_ganttdata)\r\n    ? {}\r\n    : { ...value.current_ganttdata };\r\n  factoryData.last_ganttdata = isNull(value.last_ganttdata)\r\n    ? {}\r\n    : { ...value.last_ganttdata };\r\n  factoryData.machine_status = isNull(value.machine_status)\r\n    ? [\r\n        \"Clear Chips\",\r\n        \"Wait Materials\",\r\n        \"Wait Tooling\",\r\n        \"Break\",\r\n        \"No Operator\",\r\n        \"P.M\",\r\n        \"Unplanned Repair\",\r\n        \"Other\",\r\n        \"Idle-Uncategorized\",\r\n        \"In Cycle\",\r\n        \"Offline\",\r\n      ]\r\n    : [...value.machine_status];\r\n  factoryData.idle_times = isNull(value.idle_times)\r\n    ? [0, 0, 0, 0, 0, 0, 0, 0]\r\n    : [...value.idle_times];\r\n  factoryData.uncat_time = isNull(value.uncat_time) ? 0 : value.uncat_time;\r\n  factoryData.idle_status = isNull(value.idle_status) ? \"\" : value.idle_status;\r\n}\r\nexport { factoryData };\r\n\r\n// App Settings\r\nlet appData = {\r\n  pages: [0],\r\n  width: 1024,\r\n  height: 768,\r\n  machineName: \"\",\r\n  shiftGoodParts: 0,\r\n  shiftBadParts: 0,\r\n  jobId: \"\",\r\n\r\n  inCycleSignalFrom: 0,\r\n  process: 1,\r\n  temperatureDataSource: 0,\r\n\r\n  downtime_reason1: \"Clear Chips\",\r\n  downtime_reason2: \"Wait Materials\",\r\n  downtime_reason3: \"Wait Tooling\",\r\n  downtime_reason4: \"Break\",\r\n  downtime_reason5: \"No Operator\",\r\n  downtime_reason6: \"P.M.\",\r\n  downtime_reason7: \"Unplanned Repair\",\r\n  downtime_reason8: \"Other\",\r\n\r\n  auxData1: \"Aux1Data\",\r\n  auxData2: \"Aux2Data\",\r\n  auxData3: \"Aux3Data\",\r\n\r\n  cslock_cycle: \"1\",\r\n  cslock_reverse: \"0\",\r\n  cslock_guest: \"0\",\r\n  cslock_alert: \"1\",\r\n\r\n  time_stop: \"00:01:30\",\r\n  time_production: \"08:00:00\",\r\n\r\n  shift1_ppt: \"\",\r\n  shift2_ppt: \"\",\r\n  shift3_ppt: \"\",\r\n\r\n  cycle_send_alert: \"0\",\r\n  cycle_email1: \"\",\r\n  cycle_email2: \"\",\r\n  cycle_email3: \"\",\r\n\r\n  automatic_part: \"0\",\r\n  automatic_min_time: \"10\",\r\n  automatic_part_per_cycle: \"1\",\r\n\r\n  gantt_chart_display: \"0\",\r\n\r\n  calc_chart_title: \"\",\r\n  calc_chart_formula: \"72\",\r\n  calc_chart_option: \"0\",\r\n  calc_chart_unit: \"\",\r\n  calc_chart_disp_mode: \"0\",\r\n  calc_chart_max_value: \"100\",\r\n\r\n  collapsed: false,\r\n  currentRoute: \"/\",\r\n  isLoadedServerInfo: false,\r\n\r\n  partsPerCycle: 0,\r\n  targetCycleTime: 0,\r\n};\r\n\r\nexport function setAppData(value) {\r\n  if (value === null || value === undefined || Object.keys(value).length === 0)\r\n    return;\r\n\r\n  appData.pages = isNull(value.pages) ? [0] : value.pages;\r\n\r\n  appData.machineName = isNull(value.machineName) ? \"\" : value.machineName;\r\n  appData.shiftGoodParts = isNull(value.shiftGoodParts)\r\n    ? 0\r\n    : value.shiftGoodParts;\r\n  appData.shiftBadParts = isNull(value.shiftBadParts) ? 0 : value.shiftBadParts;\r\n  appData.jobId = isNull(value.jobId) ? \"\" : value.jobId;\r\n\r\n  // InCycle Signal Setting\r\n  appData.inCycleSignalFrom = isNull(value.inCycleSignalFrom)\r\n    ? 0\r\n    : value.inCycleSignalFrom;\r\n  // Process Monitor Setting\r\n  appData.process = isNull(value.process) ? 0 : value.process;\r\n\r\n  // Temperature Source Setting\r\n  appData.temperatureDataSource = isNull(value.temperatureDataSource)\r\n    ? 0\r\n    : value.temperatureDataSource;\r\n\r\n  // Downtime reason settings\r\n  appData.downtime_reason1 = isNull(value.downtime_reason1)\r\n    ? \"Clear Chips\"\r\n    : value.downtime_reason1;\r\n  appData.downtime_reason2 = isNull(value.downtime_reason2)\r\n    ? \"Wait Materials\"\r\n    : value.downtime_reason2;\r\n  appData.downtime_reason3 = isNull(value.downtime_reason3)\r\n    ? \"Wait Tooling\"\r\n    : value.downtime_reason3;\r\n  appData.downtime_reason4 = isNull(value.downtime_reason4)\r\n    ? \"Break\"\r\n    : value.downtime_reason4;\r\n  appData.downtime_reason5 = isNull(value.downtime_reason5)\r\n    ? \"No Operator\"\r\n    : value.downtime_reason5;\r\n  appData.downtime_reason6 = isNull(value.downtime_reason6)\r\n    ? \"P.M.\"\r\n    : value.downtime_reason6;\r\n  appData.downtime_reason7 = isNull(value.downtime_reason7)\r\n    ? \"Unplanned Repair\"\r\n    : value.downtime_reason7;\r\n  appData.downtime_reason8 = isNull(value.downtime_reason8)\r\n    ? \"Other\"\r\n    : value.downtime_reason8;\r\n\r\n  // AuxData Settings\r\n  appData.auxData1 = isNull(value.auxData1) ? \"\" : value.auxData1;\r\n  appData.auxData2 = isNull(value.auxData2) ? \"\" : value.auxData2;\r\n  appData.auxData3 = isNull(value.auxData3) ? \"\" : value.auxData3;\r\n\r\n  // CSLock Settings\r\n  appData.cslock_cycle = isNull(value.cslock_cycle) ? \"0\" : value.cslock_cycle;\r\n  appData.cslock_reverse = isNull(value.cslock_reverse)\r\n    ? \"0\"\r\n    : value.cslock_reverse;\r\n  appData.cslock_guest = isNull(value.cslock_guest) ? \"0\" : value.cslock_guest;\r\n  appData.cslock_alert = isNull(value.cslock_alert) ? \"0\" : value.cslock_alert;\r\n\r\n  // Time Settings\r\n  appData.time_stop = isNull(value.time_stop) ? \"00:01:30\" : value.time_stop;\r\n  appData.time_production = isNull(value.time_production)\r\n    ? \"08:00:00\"\r\n    : value.time_production;\r\n\r\n  // Shift PPT Time Setting\r\n  appData.shift1_ppt = isNull(value.shift1_ppt) ? \"\" : value.shift1_ppt;\r\n  appData.shift2_ppt = isNull(value.shift2_ppt) ? \"\" : value.shift2_ppt;\r\n  appData.shift3_ppt = isNull(value.shift3_ppt) ? \"\" : value.shift3_ppt;\r\n\r\n  // Cycle Stop Alert eSettings\r\n  appData.cycle_send_alert = isNull(value.cycle_send_alert)\r\n    ? \"0\"\r\n    : value.cycle_send_alert;\r\n  appData.cycle_email1 = isNull(value.cycle_email1) ? \"\" : value.cycle_email1;\r\n  appData.cycle_email2 = isNull(value.cycle_email2) ? \"\" : value.cycle_email2;\r\n  appData.cycle_email3 = isNull(value.cycle_email3) ? \"\" : value.cycle_email3;\r\n\r\n  // Automatic part counter Settings\r\n  appData.automatic_part = isNull(value.automatic_part)\r\n    ? \"0\"\r\n    : value.automatic_part;\r\n  appData.automatic_min_time = isNull(value.automatic_min_time)\r\n    ? \"10\"\r\n    : value.automatic_min_time;\r\n  appData.automatic_part_per_cycle = isNull(value.automatic_part_per_cycle)\r\n    ? \"1\"\r\n    : value.automatic_part_per_cycle;\r\n\r\n  // Gantt Chart Setting\r\n  appData.gantt_chart_display = isNull(value.gantt_chart_display)\r\n    ? \"0\"\r\n    : value.gantt_chart_display;\r\n  appData.calc_chart_title = isNull(value.calc_chart_title)\r\n    ? \"\"\r\n    : value.calc_chart_title;\r\n  appData.calc_chart_formula = isNull(value.calc_chart_formula)\r\n    ? \"72\"\r\n    : value.calc_chart_formula;\r\n  appData.calc_chart_option = isNull(value.calc_chart_option)\r\n    ? \"0\"\r\n    : value.calc_chart_option;\r\n  appData.calc_chart_unit = isNull(value.calc_chart_unit)\r\n    ? \"\"\r\n    : value.calc_chart_unit;\r\n  appData.calc_chart_disp_mode = isNull(value.calc_chart_disp_mode)\r\n    ? \"0\"\r\n    : value.calc_chart_disp_mode;\r\n  appData.calc_chart_max_value = isNull(value.calc_chart_max_value)\r\n    ? \"100\"\r\n    : value.calc_chart_max_value;\r\n  appData.isLoadedServerInfo = isNull(value.isLoadedServerInfo)\r\n    ? false\r\n    : value.isLoadedServerInfo;\r\n  appData.partsPerCycle = isNull(value.partsPerCycle) ? 0 : value.partsPerCycle;\r\n  appData.targetCycleTime = isNull(value.targetCycleTime)\r\n    ? 0\r\n    : value.targetCycleTime;\r\n}\r\nexport { appData };\r\n\r\nlet shiftData = {\r\n  id: 0, // Local DB ID\r\n  shiftId: 0, // Server ID\r\n\r\n  shiftStartTime: 0, // Server Setting Start Time 08:00  : 8 * 60                        Not Used\r\n  shiftStopTime: 0, // Server Setting Stop Time 16:30 : 16 * 60 + 30                    Not Used\r\n\r\n  jobID: \"\",\r\n  jobSequenceNo: \"\",\r\n  machine: \"\",\r\n  operator: \"Unattended\",\r\n  userID: \"0\",\r\n\r\n  startTime: 0, // Real Shift Start Timestamp in Milis\r\n  stopTime: 0, // Real Shift Stop Timestamp in Milis\r\n\r\n  shiftStartSetting: 0, // Shift Start Time Setting in Milis    Daily Offset Time value     Not Used\r\n  shiftEndSetting: 0, // Shift Stop Time Setting in Milis                                 Not Used\r\n  shiftSetting: \"\", // Shift Time Setting String\r\n\r\n  utilization: 0.0,\r\n  offLineT: 0,\r\n\r\n  oee: 0.0,\r\n  availablity: 0.0,\r\n  performance: 0.0,\r\n  quality: 0.0,\r\n\r\n  goodParts: 0,\r\n  badParts: 0,\r\n\r\n  prevGoodParts: 0, // Previous Good Parts\r\n  prevBadParts: 0, // Previous Bad Parts\r\n\r\n  /*\r\n    [0] uncat\r\n    [1] Incycle\r\n    [2] r1t\r\n    [3] r2t\r\n    [4] r3t\r\n    [5] r4t\r\n    [6] r5t\r\n    [7] r6t\r\n    [8] r7t\r\n    [9] r8t\r\n    * */\r\n  elapsedMiliseconds: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n\r\n  statusRework: 0,\r\n  statusSetup: 0,\r\n\r\n  auxData1: 0.0,\r\n  auxData2: 0.0,\r\n  auxData3: 0.0,\r\n\r\n  // Time Settings\r\n  targetCycleTimeSeconds: 0,\r\n  plannedProductionTime: 0,\r\n\r\n  isCompleted: false, // Completed Status\r\n  isUpdated: false, // New Data Status\r\n\r\n  partIds: \"\",\r\n};\r\n\r\nexport function setShiftData(value) {\r\n  if (value === null || value === undefined || Object.keys(value).length === 0)\r\n    return;\r\n\r\n  shiftData.id = isNull(value.id) ? 0 : value.id;\r\n  shiftData.shiftId = isNull(value.shiftId) ? 0 : value.shiftId;\r\n  shiftData.shiftStartTime = isNull(value.shiftStartTime)\r\n    ? 0\r\n    : value.shiftStartTime;\r\n  shiftData.shiftStopTime = isNull(value.shiftStopTime)\r\n    ? 0\r\n    : value.shiftStopTime;\r\n  shiftData.jobID = isNull(value.jobID) ? \"\" : value.jobID;\r\n  shiftData.jobSequenceNo = isNull(value.jobSequenceNo)\r\n    ? \"\"\r\n    : value.jobSequenceNo;\r\n  shiftData.machine = isNull(value.machine) ? \"\" : value.machine;\r\n  shiftData.operator = isNull(value.operator) ? \"Unattended\" : value.operator;\r\n  shiftData.userID = isNull(value.userID) ? \"0\" : value.userID;\r\n  shiftData.startTime = isNull(value.startTime) ? 0 : value.startTime;\r\n  shiftData.stopTime = isNull(value.stopTime) ? 0 : value.stopTime;\r\n  shiftData.shiftStartSetting = isNull(value.shiftStartSetting)\r\n    ? 0\r\n    : value.shiftStartSetting;\r\n  shiftData.shiftEndSetting = isNull(value.shiftEndSetting)\r\n    ? 0\r\n    : value.shiftEndSetting;\r\n  shiftData.shiftSetting = isNull(value.shiftSetting) ? \"\" : value.shiftSetting;\r\n  shiftData.utilization = isNull(value.utilization) ? 0.0 : value.utilization;\r\n  shiftData.offLineT = isNull(value.offLineT) ? 0 : value.offLineT;\r\n  shiftData.oee = isNull(value.oee) ? 0.0 : value.oee;\r\n  shiftData.availablity = isNull(value.availablity) ? 0.0 : value.availablity;\r\n  shiftData.performance = isNull(value.performance) ? 0.0 : value.performance;\r\n  shiftData.quality = isNull(value.quality) ? 0.0 : value.quality;\r\n  shiftData.goodParts = isNull(value.goodParts) ? 0 : value.goodParts;\r\n  shiftData.badParts = isNull(value.badParts) ? 0 : value.badParts;\r\n  shiftData.prevGoodParts = isNull(value.prevGoodParts)\r\n    ? 0\r\n    : value.prevGoodParts;\r\n  shiftData.prevBadParts = isNull(value.prevBadParts) ? 0 : value.prevBadParts;\r\n  shiftData.elapsedMiliseconds = isNull(value.elapsedMiliseconds)\r\n    ? [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    : value.elapsedMiliseconds;\r\n  shiftData.statusRework = isNull(value.statusRework) ? 0 : value.statusRework;\r\n  shiftData.statusSetup = isNull(value.statusSetup) ? 0 : value.statusSetup;\r\n  shiftData.auxData1 = isNull(value.auxData1) ? 0.0 : value.auxData1;\r\n  shiftData.auxData2 = isNull(value.auxData2) ? 0.0 : value.auxData2;\r\n  shiftData.auxData3 = isNull(value.auxData3) ? 0.0 : value.auxData3;\r\n  shiftData.targetCycleTimeSeconds = isNull(value.targetCycleTimeSeconds)\r\n    ? 0\r\n    : value.targetCycleTimeSeconds;\r\n  shiftData.plannedProductionTime = isNull(value.plannedProductionTime)\r\n    ? 0\r\n    : value.plannedProductionTime;\r\n  shiftData.isCompleted = isNull(value.isCompleted) ? false : value.isCompleted;\r\n  shiftData.isUpdated = isNull(value.isUpdated) ? false : value.isUpdated;\r\n  shiftData.partIds = isNull(value.partIds) ? \"\" : value.partIds;\r\n}\r\n\r\nexport { shiftData };\r\n\r\nlet shiftSettingInfo = {\r\n  shift1_time: \"\",\r\n  shift2_time: \"\",\r\n  shift3_time: \"\",\r\n};\r\nexport { shiftSettingInfo };\r\n\r\nlet jobInfo = null;\r\n\r\nexport const validateEmail = (email) => {\r\n  var pattern = new RegExp(\r\n    /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\r\n  );\r\n  if (!pattern.test(email)) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const validatePassword = (password) => {\r\n  if (password === undefined) {\r\n    return false;\r\n  }\r\n\r\n  if (password.length < 6) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getLSString = (key) => {\r\n  if (\r\n    localStorage.getItem(key) === null ||\r\n    localStorage.getItem(key) === undefined\r\n  ) {\r\n    return \"\";\r\n  } else {\r\n    return localStorage.getItem(key);\r\n  }\r\n};\r\n\r\nexport const getLSNumber = (key) => {\r\n  if (\r\n    localStorage.getItem(key) === null ||\r\n    localStorage.getItem(key) === undefined\r\n  ) {\r\n    return 0;\r\n  } else {\r\n    return localStorage.getItem(key);\r\n  }\r\n};\r\n\r\nexport const getLSJson = (key) => {\r\n  if (\r\n    localStorage.getItem(key) === null ||\r\n    localStorage.getItem(key) === undefined\r\n  ) {\r\n    return {};\r\n  } else {\r\n    return JSON.parse(localStorage.getItem(key));\r\n  }\r\n};\r\n\r\nexport const timeToSecond = (time) => {\r\n  var a = time.split(\":\"); // split it at the colons\r\n  var seconds = a.length == 2 ? +a[0] * 60 * 60 + +a[1] * 60 + +a[2] : a[0];\r\n  return seconds * 1000;\r\n};\r\n\r\nexport const secondToTime = (second) => {\r\n  var sec_num = Math.floor(parseInt(second, 10) / 1000); // don't forget the second param\r\n  var hours = Math.floor(sec_num / 3600);\r\n  var minutes = Math.floor((sec_num - hours * 3600) / 60);\r\n  var seconds = sec_num - hours * 3600 - minutes * 60;\r\n\r\n  if (hours < 10) {\r\n    hours = \"0\" + hours;\r\n  }\r\n  if (minutes < 10) {\r\n    minutes = \"0\" + minutes;\r\n  }\r\n  if (seconds < 10) {\r\n    seconds = \"0\" + seconds;\r\n  }\r\n  return hours + \":\" + minutes + \":\" + seconds;\r\n};\r\n\r\nexport const isValidTime = (time) => {\r\n  // Check if the time matches the pattern HH:MM:SS (2 digits for hours, minutes, and seconds)\r\n  const timePattern = /^\\d{2}:\\d{2}:\\d{2}$/;\r\n  if (!timePattern.test(time)) {\r\n    return false;\r\n  }\r\n\r\n  // Split the time into hours, minutes, and seconds\r\n  const [hours, minutes, seconds] = time.split(\":\");\r\n\r\n  // Convert the hours, minutes, and seconds to numbers\r\n  const hoursNum = parseInt(hours, 10);\r\n  const minutesNum = parseInt(minutes, 10);\r\n  const secondsNum = parseInt(seconds, 10);\r\n\r\n  // Check if the hours are between 0 and 23\r\n  if (hoursNum < 0 || hoursNum > 23) {\r\n    return false;\r\n  }\r\n\r\n  // Check if the minutes are between 0 and 59\r\n  if (minutesNum < 0 || minutesNum > 59) {\r\n    return false;\r\n  }\r\n\r\n  // Check if the seconds are between 0 and 59\r\n  if (secondsNum < 0 || secondsNum > 59) {\r\n    return false;\r\n  }\r\n\r\n  // If all checks passed, the time is valid\r\n  return true;\r\n};\r\n\r\nexport function GetCustomerCurrentTime(customerTimezone) {\r\n  var currentTime = Math.floor(Date.now() / 1000);\r\n  var offset = new Date().getTimezoneOffset() * 60;\r\n  currentTime += offset;\r\n  currentTime += parseInt(customerTimezone) * 3600;\r\n  return new Date(currentTime * 1000);\r\n}\r\n\r\nexport function pad(num) {\r\n  const size = 2;\r\n  var s = num + \"\";\r\n  while (s.length < size) s = \"0\" + s;\r\n  return s;\r\n}\r\n\r\nexport function onlyUnique(value, index, self) {\r\n  return self.indexOf(value) === index;\r\n}\r\n\r\nexport function ConvertTimestampToDateBasedOnTimezone(timestamp, timezone) {\r\n  var offset = new Date().getTimezoneOffset() * 60;\r\n  var resTime = parseInt(timestamp);\r\n  resTime += offset;\r\n  // resTime += offset;\r\n  resTime += parseInt(timezone) * 3600;\r\n\r\n  return new Date(resTime * 1000);\r\n}\r\n\r\nexport function getBetweenTime(from, to) {\r\n  return humanitizeDuration(parseInt(to) - parseInt(from));\r\n}\r\nexport function humanitizeDuration(seconds, secAvailable = true) {\r\n  var duration = moment.duration(seconds, \"seconds\");\r\n  try {\r\n    var hour = duration.hours() + duration.days() * 24;\r\n    var minutes = duration.minutes();\r\n    var seconds1 = duration.seconds();\r\n\r\n    if (secAvailable === false)\r\n      duration =\r\n        formattedNumber(hour) + \"hours \" + formattedNumber(minutes) + \"minutes\";\r\n    else\r\n      duration =\r\n        formattedNumber(hour) +\r\n        \":\" +\r\n        formattedNumber(minutes) +\r\n        \":\" +\r\n        formattedNumber(seconds1);\r\n    return duration;\r\n  } catch (_) {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nfunction formattedNumber(myNumber) {\r\n  return (\"0\" + myNumber).slice(-2);\r\n}\r\n\r\nexport function GetTimeWithStyle(datetime) {\r\n  var time = moment(datetime);\r\n\r\n  return time.format(\"hh:mm:ss a\");\r\n}\r\n\r\nexport function isNull(value) {\r\n  return value === undefined || value === null ? true : false;\r\n}\r\n\r\nexport function isValid(value) {\r\n  return value === undefined || value === null ? false : true;\r\n}\r\n","E:\\MMS\\ITS_Site\\Work\\src\\pages\\NotFound.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\redux\\reducers\\factoryReducer.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\redux\\reducers\\appReducer.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\redux\\reducers\\userReducer.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\MainLayout\\MainLayout.js",["673","674","675","676","677","678","679","680","681"],"import { Col, Row, Spin } from \"antd\";\r\nimport BottomLayout from \"layouts/BottomLayout/BottomLayout\";\r\nimport ContentLayout from \"layouts/ContentLayout/ContentLayout\";\r\nimport TopLayout from \"layouts/TopLayout/TopLayout\";\r\nimport Dashboard from \"pages/Dashboard/Dashboard\";\r\nimport InstallConfig from \"pages/InstallConfig/InstallConfig\";\r\nimport Maintenance from \"pages/Maintenance/Maintenance\";\r\nimport ProcessMonitor from \"pages/ProcessMonitor/ProcessMonitor\";\r\nimport Settings from \"pages/Settings/Settings\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\nimport { setUserDataStore } from \"redux/actions/userActions\";\r\nimport { setFactoryDataStore } from \"redux/actions/factoryActions\";\r\nimport { LS_ITEMS, SYS_INTERVAL } from \"services/CONSTANTS\";\r\nimport {\r\n  appData,\r\n  getLSJson,\r\n  setAppData,\r\n  factoryData,\r\n  setFactoryData,\r\n  setUserData,\r\n  userData,\r\n  secondToTime,\r\n  isValid,\r\n} from \"services/global\";\r\nimport \"./MainLayout.css\";\r\nimport MachineStatus from \"pages/MachineStatus/MachineStatus\";\r\nimport {\r\n  apiCallForGetAppSetting,\r\n  apiCallForGetBufferGanttData,\r\n} from \"services/apiCall\";\r\n\r\nconst MainLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { factoryDataStore } = useSelector((x) => x.factoryDataStore);\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n  useEffect(() => {\r\n    if (appData.machineName !== \"\" && factoryData.accountId !== \"\") {\r\n      apiCallForGetBufferGanttData(factoryData.accountId, appData.machineName)\r\n        .then((res) => {\r\n          if (isValid(res.buffer_data) && isValid(res.last_data)) {\r\n            let oneGantt = res.buffer_data.find(\r\n              (x) =>\r\n                x.machine_id == appData.machineName &&\r\n                x.customer_id == factoryData.accountId\r\n            );\r\n\r\n            let newFactoryData = {\r\n              ...factoryData,\r\n              ...{ current_ganttdata: oneGantt, last_ganttdata: res.last_data },\r\n            };\r\n            setFactoryData(newFactoryData);\r\n            dispatch(setFactoryDataStore(newFactoryData));\r\n          }\r\n        })\r\n        .catch((err) => {});\r\n    }\r\n  }, [tick]);\r\n\r\n  useEffect(() => {\r\n    clearInterval(intervalId);\r\n    setIntervalID(setInterval(timer, SYS_INTERVAL));\r\n    loadLSUserData();\r\n    loadLSFactoryData();\r\n    loadLSAppData();\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadServerAppData();\r\n  }, [appDataStore.machineName, factoryDataStore.accountId]);\r\n\r\n  // Load User Data\r\n  const loadLSUserData = () => {\r\n    setUserData(getLSJson(LS_ITEMS.userData));\r\n    dispatch(setUserDataStore(userData));\r\n  };\r\n\r\n  // Load Factory Data\r\n  const loadLSFactoryData = () => {\r\n    setFactoryData({\r\n      ...getLSJson(LS_ITEMS.factoryData),\r\n      ...{ idle_status: \"\" },\r\n    });\r\n    dispatch(setFactoryDataStore(factoryData));\r\n  };\r\n\r\n  // Load App Data\r\n  const loadLSAppData = () => {\r\n    setAppData(getLSJson(LS_ITEMS.appData));\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const loadServerAppData = () => {\r\n    if (appData.machineName != \"\" && factoryData.accountId != \"\") {\r\n      apiCallForGetAppSetting(factoryData.accountId, appData.machineName)\r\n        .then((res) => {\r\n          let newAppData = {\r\n            ...appData,\r\n            ...{\r\n              downtime_reason1: res[\"downtime_reason1\"],\r\n              downtime_reason2: res[\"downtime_reason2\"],\r\n              downtime_reason3: res[\"downtime_reason3\"],\r\n              downtime_reason4: res[\"downtime_reason4\"],\r\n              downtime_reason5: res[\"downtime_reason5\"],\r\n              downtime_reason6: res[\"downtime_reason6\"],\r\n              downtime_reason7: res[\"downtime_reason7\"],\r\n              downtime_reason8: res[\"downtime_reason8\"],\r\n              cslock_cycle: res[\"cslock_cycle\"],\r\n              cslock_reverse: res[\"cslock_reverse\"],\r\n              cslock_guest: res[\"cslock_guest\"],\r\n              cslock_alert: res[\"cslock_alert\"],\r\n              time_stop: secondToTime(res[\"time_stop\"] * 1000),\r\n              time_production: secondToTime(res[\"time_production\"] * 1000),\r\n              cycle_send_alert: res[\"cycle_send_alert\"],\r\n              cycle_email1: res[\"cycle_email1\"],\r\n              cycle_email2: res[\"cycle_email2\"],\r\n              cycle_email3: res[\"cycle_email3\"],\r\n              automatic_part: res[\"automatic_part\"],\r\n              automatic_min_time: res[\"automatic_min_time\"],\r\n              automatic_part_per_cycle: res[\"automatic_part_per_cycle\"],\r\n              gantt_chart_display: res[\"gantt_chart_display\"],\r\n              calc_chart_title: res[\"calc_chart_title\"],\r\n              calc_chart_formula: res[\"calc_chart_formula\"],\r\n              calc_chart_option: res[\"calc_chart_option\"],\r\n              calc_chart_unit: res[\"calc_chart_unit\"],\r\n              calc_chart_disp_mode: res[\"calc_chart_disp_mode\"],\r\n              calc_chart_max_value: res[\"calc_chart_max_value\"],\r\n              isLoadedServerInfo: true,\r\n            },\r\n          };\r\n          setAppData(newAppData);\r\n          dispatch(setAppDataStore(newAppData));\r\n          let newFactoryData = {\r\n            ...factoryData,\r\n            ...{\r\n              machine_status: [\r\n                newAppData.downtime_reason1,\r\n                newAppData.downtime_reason2,\r\n                newAppData.downtime_reason3,\r\n                newAppData.downtime_reason4,\r\n                newAppData.downtime_reason5,\r\n                newAppData.downtime_reason6,\r\n                newAppData.downtime_reason7,\r\n                newAppData.downtime_reason8,\r\n                \"Idle-Uncategorized\",\r\n                \"In Cycle\",\r\n                \"Offline\",\r\n              ],\r\n            },\r\n          };\r\n          setFactoryData(newFactoryData);\r\n          dispatch(setFactoryDataStore(newFactoryData));\r\n        })\r\n        .catch((err) => {});\r\n    }\r\n  };\r\n\r\n  if (factoryDataStore.current_ganttdata == undefined) {\r\n    return (\r\n      <Row className=\"dashboard-machine-info-layout\" align={\"middle\"}>\r\n        <Col span={24} style={{ textAlign: \"center\" }}>\r\n          <Spin\r\n            size={\"large\"}\r\n            spinning={factoryDataStore.current_ganttdata == undefined}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"main-layout\">\r\n      <TopLayout />\r\n      <ContentLayout>\r\n        <Dashboard />\r\n        <ProcessMonitor />\r\n        {appDataStore.pages[appDataStore.pages.length - 1] === 6 && (\r\n          <MachineStatus />\r\n        )}\r\n        <Settings />\r\n        <InstallConfig />\r\n        <Maintenance />\r\n      </ContentLayout>\r\n      <BottomLayout />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\services\\apiCall.js",["682","683"],"import axios from \"axios\";\r\nimport { SYSTEM_ERROR } from \"./CONSTANTS\";\r\nimport { timeToSecond } from \"./global\";\r\n\r\nconst DOMAIN = \"https://api.slymms.com\";\r\nconst BASE_URL = DOMAIN + \"/api\";\r\n\r\nconst loginWithUserId = BASE_URL + \"/loginWithUserId\";\r\nconst loginWithCustomerId = BASE_URL + \"/loginWithCustomerId\";\r\nconst getAppSetting = BASE_URL + \"/getAppSetting\";\r\nconst updateAppSetting = BASE_URL + \"/updateAppSetting\";\r\nconst getBufferGanttData = BASE_URL + \"/getBufferGanttData\";\r\nconst postBufferGanttData = BASE_URL + \"/postBufferGanttData\";\r\nconst urlGetJobData = BASE_URL + \"/getJobData\";\r\nconst getTankTime = BASE_URL + \"/getTankTime\";\r\nconst postTankTime = BASE_URL + \"/postTankTime\";\r\nconst postPhosTestData = BASE_URL + \"/postPhos_test_data\";\r\nconst getCleaningStation = BASE_URL + \"/getCleaningStation\";\r\nconst postCleaningStation = BASE_URL + \"/postCleaningStation\";\r\nconst getBlastStation = BASE_URL + \"/getBlastStation\";\r\nconst postBlastStation = BASE_URL + \"/postBlastStation\";\r\nconst getTankTemperature = BASE_URL + \"/getTankTemperature\";\r\nconst postPaintStation = BASE_URL + \"/postPaintStation\";\r\nconst getPaintStation = BASE_URL + \"/getPaintStation\";\r\nconst postAssembly1Station = BASE_URL + \"/postAssembly1Station\";\r\nconst getAssembly1Station = BASE_URL + \"/getAssembly1Station\";\r\nconst postBlu136Assembly = BASE_URL + \"/postBlu136Assembly\";\r\nconst getBlu136Assembly = BASE_URL + \"/getBlu136Assembly\";\r\nconst postAssembly3Station = BASE_URL + \"/postAssembly3Station\";\r\nconst getAssembly3Station = BASE_URL + \"/getAssembly3Station\";\r\nconst postQualityStation = BASE_URL + \"/postQualityStation\";\r\nconst getQualityStation = BASE_URL + \"/getQualityStation\";\r\n\r\nexport function postRequest(url, param, callback) {\r\n  axios\r\n    .post(url, param)\r\n    .then((res) => {\r\n      callback(res.data);\r\n    })\r\n    .catch((error) => {\r\n      callback(null);\r\n    });\r\n}\r\n\r\nexport const apiCallPost = (url, formData, errorMessage = \"\") => {\r\n  const config = {\r\n    headers: {\r\n      \"content-type\": \"multipart/form-data\",\r\n    },\r\n  };\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      axios\r\n        .post(url, formData, config)\r\n        .then((res) => {\r\n          const { data } = res;\r\n          if (data.status === true) {\r\n            resolve(data);\r\n          } else {\r\n            reject(data.message);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          reject(errorMessage, err);\r\n        });\r\n    } catch (error) {\r\n      reject(SYSTEM_ERROR);\r\n    }\r\n  });\r\n};\r\n\r\nexport const apiCallGet = (url, param, errorMessage = \"\") => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      axios\r\n        .get(url, { params: param })\r\n        .then((res) => {\r\n          const { data } = res;\r\n          if (data.status === true) {\r\n            resolve(data.data);\r\n          } else {\r\n            reject(data.message);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          reject(errorMessage, err);\r\n        });\r\n    } catch (error) {\r\n      console.error(errorMessage, error);\r\n      reject(SYSTEM_ERROR);\r\n    }\r\n  });\r\n};\r\n\r\nexport const apiCallForLogin = (userId, deviceId) => {\r\n  const url = loginWithUserId;\r\n  var formData = new FormData();\r\n  formData.append(\"userId\", userId);\r\n  formData.append(\"deviceId\", deviceId);\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForLogin\")\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForLoginWithCustomerId = (accountId, deviceId) => {\r\n  const url = loginWithCustomerId;\r\n  var formData = new FormData();\r\n  formData.append(\"customerId\", accountId);\r\n  formData.append(\"deviceId\", deviceId);\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForLoginWithCustomerId\")\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetAppSetting = (accountId, deviceId) => {\r\n  const url = getAppSetting;\r\n  var formData = new FormData();\r\n  formData.append(\"factory_id\", accountId);\r\n  formData.append(\"machine_id\", deviceId);\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForGetAppSetting\")\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForUpdateAppSetting = (accountId, deviceId, params) => {\r\n  const url = updateAppSetting;\r\n  var formData = new FormData();\r\n  formData.append(\"factory_id\", accountId);\r\n  formData.append(\"machine_id\", deviceId);\r\n  let keys = Object.keys(params);\r\n  keys.forEach(function (key) {\r\n    if (key != \"time_stop\" && key != \"time_production\")\r\n      formData.append(key, params[key]);\r\n  });\r\n  formData.append(\"time_stop\", timeToSecond(params[\"time_stop\"]) / 1000);\r\n  formData.append(\r\n    \"time_production\",\r\n    timeToSecond(params[\"time_production\"]) / 1000\r\n  );\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForUpdateAppSetting\")\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport function apiCallForGetMachineListData(\r\n  customer_id,\r\n  machine_names,\r\n  timezone,\r\n  startDate,\r\n  endDate,\r\n  callback\r\n) {\r\n  // Read gantt and hst data\r\n  const url = \"https://slymms.com/backend/get_machine_data.php\";\r\n  const param = {\r\n    customer_id: customer_id,\r\n    startDate: startDate,\r\n    endDate: endDate,\r\n    machine_names: machine_names,\r\n    timezone: timezone,\r\n  };\r\n  postRequest(url, param, (res) => {\r\n    callback(res);\r\n  });\r\n}\r\n\r\nexport const apiCallForGetBufferGanttData = (customer_id, machine_id) => {\r\n  const url = getBufferGanttData;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", customer_id);\r\n  formData.append(\"machine_id\", machine_id);\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForGetBufferGanttData\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForPostBufferGanttData = (\r\n  customer_id,\r\n  machine_id,\r\n  status,\r\n  color\r\n) => {\r\n  const url = postBufferGanttData;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", customer_id);\r\n  formData.append(\"machine_id\", machine_id);\r\n  formData.append(\"status\", status);\r\n  formData.append(\"color\", color);\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostBufferGanttData\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetJobData = (customerId, jobId) => {\r\n  const url = urlGetJobData;\r\n  var formData = new FormData();\r\n  formData.append(\"customerId\", customerId);\r\n  formData.append(\"jobId\", jobId);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForGetJobData\")\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForPostTankTime = (params) => {\r\n  const url = postTankTime;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"machine_id\", params[\"machine_id\"]);\r\n  formData.append(\"created_at\", params[\"created_at\"]);\r\n  formData.append(\"timestamp\", params[\"timestamp\"]);\r\n  formData.append(\"operator\", params[\"operator\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n  formData.append(\"date\", params[\"date\"]);\r\n  formData.append(\"time\", params[\"time\"]);\r\n  formData.append(\"ttime1\", params[\"ttime1\"]);\r\n  formData.append(\"ttemp1\", params[\"ttemp1\"]);\r\n  formData.append(\"ttime2\", params[\"ttime2\"]);\r\n  formData.append(\"ttemp2\", params[\"ttemp2\"]);\r\n  formData.append(\"ttime3\", params[\"ttime3\"]);\r\n  formData.append(\"ttemp3\", params[\"ttemp3\"]);\r\n  formData.append(\"ttime4\", params[\"ttime4\"]);\r\n  formData.append(\"ttemp4\", params[\"ttemp4\"]);\r\n  formData.append(\"ttime5\", params[\"ttime5\"]);\r\n  formData.append(\"ttemp5\", params[\"ttemp5\"]);\r\n  formData.append(\"ttime6\", params[\"ttime6\"]);\r\n  formData.append(\"ttemp6\", params[\"ttemp6\"]);\r\n  formData.append(\"ttime7\", params[\"ttime7\"]);\r\n  formData.append(\"ttemp7\", params[\"ttemp7\"]);\r\n  formData.append(\"ttime8\", params[\"ttime8\"]);\r\n  formData.append(\"ttemp8\", params[\"ttemp8\"]);\r\n  formData.append(\"toven\", params[\"toven\"]);\r\n  formData.append(\"rm_lot\", params[\"rm_lot\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostTankTime\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetTankTime = (params) => {\r\n  const url = getTankTime;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForGetTankTime\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForRecordPhosphateTestInfo = (params) => {\r\n  const url = postPhosTestData;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"machine_id\", params[\"machine_id\"]);\r\n  formData.append(\"operator\", params[\"operator\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n  formData.append(\"created_at\", params[\"created_at\"]);\r\n  formData.append(\"timestamp\", params[\"timestamp\"]);\r\n  formData.append(\"date\", params[\"date\"]);\r\n  formData.append(\"time\", params[\"time\"]);\r\n  formData.append(\"weight\", params[\"weight\"]);\r\n  formData.append(\"water_break\", params[\"water_break\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"postPhos_test_data\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForPostCleaningStation = (params) => {\r\n  const url = postCleaningStation;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"machine_id\", params[\"machine_id\"]);\r\n  formData.append(\"created_at\", params[\"created_at\"]);\r\n  formData.append(\"timestamp\", params[\"timestamp\"]);\r\n  formData.append(\"operator\", params[\"operator\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n  formData.append(\"date\", params[\"date\"]);\r\n  formData.append(\"time\", params[\"time\"]);\r\n  formData.append(\"processing_time\", params[\"processing_time\"]);\r\n  formData.append(\"notes\", params[\"notes\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostCleaningStation\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetCleaningStation = (params) => {\r\n  const url = getCleaningStation;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForGetCleaningStation\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForPostBlastStation = (params) => {\r\n  const url = postBlastStation;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"machine_id\", params[\"machine_id\"]);\r\n  formData.append(\"created_at\", params[\"created_at\"]);\r\n  formData.append(\"timestamp\", params[\"timestamp\"]);\r\n  formData.append(\"operator\", params[\"operator\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n  formData.append(\"date\", params[\"date\"]);\r\n  formData.append(\"time\", params[\"time\"]);\r\n  formData.append(\"processing_time\", params[\"processing_time\"]);\r\n  formData.append(\"media_wt_before\", params[\"media_wt_before\"]);\r\n  formData.append(\"media_wt_after\", params[\"media_wt_after\"]);\r\n  formData.append(\"media_used\", params[\"media_used\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostBlastStation\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetBlastStation = (params) => {\r\n  const url = getBlastStation;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForGetBlastStation\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForPostPaintStation = (params) => {\r\n  const url = postPaintStation;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"machine_id\", params[\"machine_id\"]);\r\n  formData.append(\"created_at\", params[\"created_at\"]);\r\n  formData.append(\"timestamp\", params[\"timestamp\"]);\r\n  formData.append(\"operator\", params[\"operator\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n  formData.append(\"date\", params[\"date\"]);\r\n  formData.append(\"time\", params[\"time\"]);\r\n  formData.append(\"processing_time\", params[\"processing_time\"]);\r\n  formData.append(\"bitu_wt_before\", params[\"bitu_wt_before\"]);\r\n  formData.append(\"bitu_wt_after\", params[\"bitu_wt_after\"]);\r\n  formData.append(\"bitu_used\", params[\"bitu_used\"]);\r\n  formData.append(\"ambient_temp\", params[\"ambient_temp\"]);\r\n  formData.append(\"ambient_humidity\", params[\"ambient_humidity\"]);\r\n  formData.append(\"ambient_dewpoint\", params[\"ambient_dewpoint\"]);\r\n  formData.append(\"paintbooth_temp\", params[\"paintbooth_temp\"]);\r\n  formData.append(\"paintbooth_humidity\", params[\"paintbooth_humidity\"]);\r\n  formData.append(\"paintbooth_dewpoint\", params[\"paintbooth_dewpoint\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostPaintStation\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetPaintStation = (params) => {\r\n  const url = getPaintStation;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForGetPaintStation\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetTankTemperature = (params) => {\r\n  const url = getTankTemperature;\r\n  var formData = new FormData();\r\n  formData.append(\"customerId\", params[\"customer_id\"]);\r\n  formData.append(\"activeMin\", \"20\");\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForGetTankTemperature\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForPostAssembly1Station = (params) => {\r\n  const url = postAssembly1Station;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"machine_id\", params[\"machine_id\"]);\r\n  formData.append(\"created_at\", params[\"created_at\"]);\r\n  formData.append(\"timestamp\", params[\"timestamp\"]);\r\n  formData.append(\"operator\", params[\"operator\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n  formData.append(\"date\", params[\"date\"]);\r\n  formData.append(\"time\", params[\"time\"]);\r\n  formData.append(\"processing_time\", params[\"processing_time\"]);\r\n\r\n  formData.append(\"case_number\", params[\"case_number\"]);\r\n  formData.append(\"serial\", params[\"serial\"]);\r\n  formData.append(\"shipment\", params[\"shipment\"]);\r\n  formData.append(\"empty_wt\", params[\"empty_wt\"]);\r\n\r\n  formData.append(\"center_grav\", params[\"center_grav\"]);\r\n  formData.append(\"aft_ass\", params[\"aft_ass\"]);\r\n  formData.append(\"aft_retain_ring\", params[\"aft_retain_ring\"]);\r\n  formData.append(\"shipping_cover\", params[\"shipping_cover\"]);\r\n\r\n  formData.append(\"shipping_plug\", params[\"shipping_plug\"]);\r\n  formData.append(\"end_cap\", params[\"end_cap\"]);\r\n  formData.append(\"lugs\", params[\"lugs\"]);\r\n  formData.append(\"retain_ring\", params[\"retain_ring\"]);\r\n\r\n  formData.append(\"adapt_ring\", params[\"adapt_ring\"]);\r\n  formData.append(\"impact_ring\", params[\"impact_ring\"]);\r\n  formData.append(\"total_wt\", params[\"total_wt\"]);\r\n  formData.append(\"ass_center_grav\", params[\"ass_center_grav\"]);\r\n\r\n  // Usage 2\r\n  formData.append(\"degrease_sol\", params[\"degrease_sol\"]);\r\n  formData.append(\"corrosin_prev_compound\", params[\"corrosin_prev_compound\"]);\r\n  formData.append(\"ship_cover_oring\", params[\"ship_cover_oring\"]);\r\n  formData.append(\"oring_grease\", params[\"oring_grease\"]);\r\n\r\n  formData.append(\"protective_end_cap\", params[\"protective_end_cap\"]);\r\n  formData.append(\"end_cap_set_screw\", params[\"end_cap_set_screw\"]);\r\n  formData.append(\"lifting_lug_bolt\", params[\"lifting_lug_bolt\"]);\r\n  formData.append(\"lifting_lug_washer\", params[\"lifting_lug_washer\"]);\r\n\r\n  formData.append(\"stencil_ink\", params[\"stencil_ink\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostAssembly1Station\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetAssembly1Station = (params) => {\r\n  const url = getAssembly1Station;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostAssembly1Station\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForPostBlu136Assembly = (params) => {\r\n  const url = postBlu136Assembly;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"machine_id\", params[\"machine_id\"]);\r\n  formData.append(\"created_at\", params[\"created_at\"]);\r\n  formData.append(\"timestamp\", params[\"timestamp\"]);\r\n  formData.append(\"operator\", params[\"operator\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n  formData.append(\"date\", params[\"date\"]);\r\n  formData.append(\"time\", params[\"time\"]);\r\n  formData.append(\"processing_time\", params[\"processing_time\"]);\r\n\r\n  formData.append(\"base_plat11\", params[\"p_base_plat11\"]);\r\n  formData.append(\"20199266_fwd_fuze_line\", params[\"p_20199266_fwd_fuze_line\"]);\r\n  formData.append(\"20199367_aft_fuz_line\", params[\"p_20199367_aft_fuz_line\"]);\r\n  formData.append(\"1265394_fit_chrg_tube\", params[\"p_1265394_fit_chrg_tube\"]);\r\n  formData.append(\r\n    \"1252629_washer_lock_iternal_tooth2\",\r\n    params[\"p_1252629_washer_lock_iternal_tooth2\"]\r\n  );\r\n  formData.append(\r\n    \"4902493_retainer_fuz_liner_aft\",\r\n    params[\"p_4902493_retainer_fuz_liner_aft\"]\r\n  );\r\n  formData.append(\r\n    \"1123646_nut_fit_charg_tube2\",\r\n    params[\"p_1123646_nut_fit_charg_tube2\"]\r\n  );\r\n  formData.append(\"20199361_fwd_chrg_tube\", params[\"p_20199361_fwd_chrg_tube\"]);\r\n  formData.append(\r\n    \"20199361_030_aft_charg_tube\",\r\n    params[\"p_20199361_030_aft_charg_tube\"]\r\n  );\r\n  formData.append(\"4512424_cap_shipping\", params[\"p_4512424_cap_shipping\"]);\r\n  formData.append(\r\n    \"nas1149f0832p_flat_washer8\",\r\n    params[\"p_nas1149f0832p_flat_washer8\"]\r\n  );\r\n  formData.append(\r\n    \"nas568_41_hex_head_bolt8\",\r\n    params[\"p_nas568_41_hex_head_bolt8\"]\r\n  );\r\n  formData.append(\r\n    \"x20173251_lug_shipping2\",\r\n    params[\"p_x20173251_lug_shipping2\"]\r\n  );\r\n  formData.append(\r\n    \"20199362_charge_tube_plug\",\r\n    params[\"p_20199362_charge_tube_plug\"]\r\n  );\r\n  formData.append(\r\n    \"nasm90725_31_screw_cap_hex_head2\",\r\n    params[\"p_nasm90725_31_screw_cap_hex_head2\"]\r\n  );\r\n  formData.append(\r\n    \"ms35338_45_washer_lock_sprg4\",\r\n    params[\"p_ms35338_45_washer_lock_sprg4\"]\r\n  );\r\n  formData.append(\"mil_dtl_450_bituminous\", params[\"p_mil_dtl_450_bituminous\"]);\r\n  formData.append(\r\n    \"as3582_236_o_ring_small2\",\r\n    params[\"p_as3582_236_o_ring_small2\"]\r\n  );\r\n  formData.append(\"923as694_o_ring_rubber\", params[\"p_923as694_o_ring_rubber\"]);\r\n  formData.append(\"ms51964_69_set_screw1\", params[\"p_ms51964_69_set_screw1\"]);\r\n  formData.append(\r\n    \"a_a_208_ink_marking_stencil\",\r\n    params[\"p_a_a_208_ink_marking_stencil\"]\r\n  );\r\n  formData.append(\"mil_prf_63460_gun_oil\", params[\"p_mil_prf_63460_gun_oil\"]);\r\n  formData.append(\r\n    \"mil_prf_16173_corrision_resistant_grease\",\r\n    params[\"p_mil_prf_16173_corrision_resistant_grease\"]\r\n  );\r\n  formData.append(\r\n    \"sae_as8660_silicone_lubricant\",\r\n    params[\"p_sae_as8660_silicone_lubricant\"]\r\n  );\r\n  formData.append(\r\n    \"mil_prf_680_degreasing_solvent\",\r\n    params[\"p_mil_prf_680_degreasing_solvent\"]\r\n  );\r\n  formData.append(\"shipping_plugs2\", params[\"p_shipping_plugs2\"]);\r\n  formData.append(\"job_at\", params[\"p_job_at\"]);\r\n  formData.append(\"screw_lot6\", params[\"p_screw_lot6\"]);\r\n  formData.append(\"threadlock_271_lot\", params[\"p_threadlock_271_lot\"]);\r\n  formData.append(\"set_screw_lot_6\", params[\"p_set_screw_lot_6\"]);\r\n  formData.append(\"ams_s_8802_lot\", params[\"p_ams_s_8802_lot\"]);\r\n  formData.append(\r\n    \"two_part_polysulfie_sealant\",\r\n    params[\"p_two_part_polysulfie_sealant\"]\r\n  );\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostBlu136Assembly\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetBlu136Assembly = (params) => {\r\n  const url = getBlu136Assembly;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostBlu136Assembly\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForPostAssembly3Station = (params) => {\r\n  const url = postAssembly3Station;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"machine_id\", params[\"machine_id\"]);\r\n  formData.append(\"created_at\", params[\"created_at\"]);\r\n  formData.append(\"timestamp\", params[\"timestamp\"]);\r\n  formData.append(\"operator\", params[\"operator\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n  formData.append(\"date\", params[\"date\"]);\r\n  formData.append(\"time\", params[\"time\"]);\r\n  formData.append(\"processing_time\", params[\"processing_time\"]);\r\n  formData.append(\r\n    \"mil_d_16791_non_ionic_detergent_lot\",\r\n    params[\"p_mil_d_16791_non_ionic_detergent_lot\"]\r\n  );\r\n  formData.append(\r\n    \"923as829_drive_lok_pins_lot\",\r\n    params[\"p_923as829_drive_lok_pins_lot\"]\r\n  );\r\n  formData.append(\r\n    \"ams_s_8802_polysulfide_lot\",\r\n    params[\"p_ams_s_8802_polysulfide_lot\"]\r\n  );\r\n  formData.append(\"4512421_base_plate_lt\", params[\"p_4512421_base_plate_lt\"]);\r\n  formData.append(\"4512422_abs_insert_lot\", params[\"p_4512422_abs_insert_lot\"]);\r\n  formData.append(\r\n    \"4512423_steel_insert_lot\",\r\n    params[\"p_4512423_steel_insert_lot\"]\r\n  );\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostAssembly3Station\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetAssembly3Station = (params) => {\r\n  const url = getAssembly3Station;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostAssembly3Station\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForPostQualityStation = (params) => {\r\n  const url = postQualityStation;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"machine_id\", params[\"machine_id\"]);\r\n  formData.append(\"created_at\", params[\"created_at\"]);\r\n  formData.append(\"timestamp\", params[\"timestamp\"]);\r\n  formData.append(\"operator\", params[\"operator\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n  formData.append(\"date\", params[\"date\"]);\r\n  formData.append(\"time\", params[\"time\"]);\r\n  formData.append(\"processing_time\", params[\"processing_time\"]);\r\n  formData.append(\"comments\", params[\"comments\"]);\r\n  formData.append(\"scrap_code\", params[\"scrap_code\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForPostQualityStation\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const apiCallForGetQualityStation = (params) => {\r\n  const url = getQualityStation;\r\n  var formData = new FormData();\r\n  formData.append(\"customer_id\", params[\"customer_id\"]);\r\n  formData.append(\"part_id\", params[\"part_id\"]);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiCallPost(url, formData, \"apiCallForGetQualityStation\")\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n","E:\\MMS\\ITS_Site\\Work\\src\\redux\\actions\\factoryActions.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\services\\CONSTANTS.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\redux\\actions\\userActions.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\pages\\MachineStatus\\MachineStatus.js",["684","685"],"// @flow strict\r\n\r\nimport { Col, Row } from \"antd\";\r\nimport MachineStatusButton from \"components/MachineStatusButton/MachineStatusButton\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\nimport {\r\n  appData,\r\n  secondToTime\r\n} from \"services/global\";\r\nimport \"./MachineStatus.css\";\r\n\r\nfunction MachineStatus(props) {\r\n  const dispatch = useDispatch();\r\n  const { factoryDataStore } = useSelector((x) => x.factoryDataStore);\r\n  const [elapsedIdleTime, setElapsedIdleTime] = useState(\"00:00:00\");\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n\r\n  useEffect(() => {\r\n    clearInterval(intervalId);\r\n    setIntervalID(setInterval(timer, 1000));\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let idleSeconds = 0;\r\n    for (let i = 0; i < 8; i++) {\r\n      idleSeconds += factoryDataStore.idle_times[i];\r\n    }\r\n    setElapsedIdleTime(secondToTime(idleSeconds));\r\n  }, [tick]);\r\n\r\n  return (\r\n    <div className=\"machine-status-page\">\r\n      <Row align=\"middle\" className=\"machine-status-top\">\r\n        <Col span={24}>\r\n          <span className=\"machine-status-title\">\r\n            Elapsed Idle Time : {elapsedIdleTime}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n\r\n      <div className=\"machine-status-content\">\r\n        <Row className=\"machine-status-button-row\">\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <MachineStatusButton status={factoryDataStore.machine_status[0]} />\r\n          </Col>\r\n\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <MachineStatusButton\r\n              marginLeft={\"10px\"}\r\n              status={factoryDataStore.machine_status[1]}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"machine-status-button-row\">\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <MachineStatusButton status={factoryDataStore.machine_status[2]} />\r\n          </Col>\r\n\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <MachineStatusButton\r\n              marginLeft={\"10px\"}\r\n              status={factoryDataStore.machine_status[3]}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"machine-status-button-row\">\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <MachineStatusButton status={factoryDataStore.machine_status[4]} />\r\n          </Col>\r\n\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <MachineStatusButton\r\n              marginLeft={\"10px\"}\r\n              status={factoryDataStore.machine_status[5]}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"machine-status-button-row\">\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <MachineStatusButton status={factoryDataStore.machine_status[6]} />\r\n          </Col>\r\n\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <MachineStatusButton\r\n              marginLeft={\"10px\"}\r\n              status={factoryDataStore.machine_status[7]}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n\r\n      <Row\r\n        align=\"middle\"\r\n        className=\"machine-status-close\"\r\n        onClick={() => {\r\n          let newPages = [...appData.pages];\r\n          newPages.splice(-1);\r\n          appData.pages = [...newPages];\r\n          dispatch(setAppDataStore(appData));\r\n        }}\r\n      >\r\n        <Col span={24}>\r\n          <span className=\"machine-status-close-text\">Close</span>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MachineStatus;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\pages\\Settings\\Settings.js",["686","687","688","689","690","691"],"// @flow strict\r\n\r\nimport { Col, Row, message } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./Settings.css\";\r\n\r\nimport SettingAutomaticCounterLayout from \"layouts/SettingAutomaticCounterLayout/SettingAutomaticCounterLayout\";\r\nimport SettingAuxDataLayout from \"layouts/SettingAuxDataLayout/SettingAuxDataLayout\";\r\nimport SettingCSLockLayout from \"layouts/SettingCSLockLayout/SettingCSLockLayout\";\r\nimport SettingCycleStopAlertLayout from \"layouts/SettingCycleStopAlertLayout/SettingCycleStopAlertLayout\";\r\nimport SettingDowntimeLayout from \"layouts/SettingDowntimeLayout/SettingDowntimeLayout\";\r\nimport SettingGanttChartLayout from \"layouts/SettingGanttChartLayout/SettingGanttChartLayout\";\r\nimport SettingMachineInfoLayout from \"layouts/SettingMachineInfoLayout/SettingMachineInfoLayout\";\r\nimport SettingProcessMonitorLayout from \"layouts/SettingProcessMonitorLayout/SettingProcessMonitorLayout\";\r\nimport SettingShiftTimeLayout from \"layouts/SettingShiftTimeLayout/SettingShiftTimeLayout\";\r\nimport SettingTempDataSourceLayout from \"layouts/SettingTempDataSourceLayout/SettingTempDataSourceLayout\";\r\nimport SettingTimeLayout from \"layouts/SettingTimeLayout/SettingTimeLayout\";\r\nimport SettingsAppInfoLayout from \"layouts/SettingsAppInfoLayout/SettingsAppInfoLayout\";\r\nimport SettingsInCycleSignalFromLayout from \"layouts/SettingsInCycleSignalFromLayout/SettingsInCycleSignalFromLayout\";\r\nimport SettingsServerInfoLayout from \"layouts/SettingsServerInfoLayout/SettingsServerInfoLayout\";\r\nimport SettingsTopLayout from \"layouts/SettingsTopLayout/SettingsTopLayout\";\r\nimport { isSpinning, setAppDataStore } from \"redux/actions/appActions\";\r\nimport { LS_ITEMS } from \"services/CONSTANTS\";\r\nimport {\r\n  appData,\r\n  isValidTime,\r\n  setAppData,\r\n  factoryData,\r\n  setFactoryData,\r\n} from \"services/global\";\r\nimport settingsIcon from \"../../assets/icons/ic_settings.png\";\r\nimport { setFactoryDataStore } from \"redux/actions/factoryActions\";\r\nimport { apiCallForUpdateAppSetting } from \"services/apiCall\";\r\n\r\nfunction Settings(props) {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { factoryDataStore } = useSelector((x) => x.factoryDataStore);\r\n  const { pages } = appDataStore;\r\n\r\n  const [appSetting, setAppSetting] = useState({ ...appDataStore });\r\n\r\n  useEffect(() => {\r\n    setAppSetting({ ...appDataStore });\r\n  }, [\r\n    appDataStore.pages[appDataStore.pages.length - 1],\r\n    appDataStore.inCycleSignalFrom,\r\n    appDataStore.machineName,\r\n    appDataStore.downtime_reason1,\r\n    appDataStore.downtime_reason2,\r\n    appDataStore.downtime_reason3,\r\n    appDataStore.downtime_reason4,\r\n    appDataStore.downtime_reason5,\r\n    appDataStore.downtime_reason6,\r\n    appDataStore.downtime_reason7,\r\n    appDataStore.downtime_reason8,\r\n\r\n    appDataStore.cslock_cycle,\r\n    appDataStore.cslock_reverse,\r\n    appDataStore.cslock_guest,\r\n    appDataStore.cslock_alert,\r\n\r\n    appDataStore.time_stop,\r\n    appDataStore.time_production,\r\n\r\n    appDataStore.cycle_send_alert,\r\n    appDataStore.cycle_email1,\r\n    appDataStore.cycle_email2,\r\n    appDataStore.cycle_email3,\r\n\r\n    appDataStore.automatic_part,\r\n    appDataStore.automatic_min_time,\r\n    appDataStore.automatic_part_per_cycle,\r\n\r\n    appDataStore.gantt_chart_display,\r\n    appDataStore.calc_chart_title,\r\n    appDataStore.calc_chart_formula,\r\n    appDataStore.calc_chart_option,\r\n    appDataStore.calc_chart_unit,\r\n    appDataStore.calc_chart_disp_mode,\r\n    appDataStore.calc_chart_max_value,\r\n  ]);\r\n\r\n  useEffect(() => {}, [appSetting]);\r\n\r\n  const onClickSave = () => {\r\n    // Check Time Settings Input\r\n    if (appSetting.machineName === \"\"){\r\n       message.error(\"Please input machine name.\");\r\n       return;\r\n    }\r\n    if (\r\n      !isValidTime(appSetting.time_stop) ||\r\n      !isValidTime(appSetting.time_production)\r\n    ) {\r\n      message.error(\"Please input valid time format.\");\r\n      return;\r\n    }\r\n\r\n    let newPages = [...appData.pages];\r\n    newPages.splice(-1);\r\n    let newSettings = { ...appData, ...appSetting };\r\n    newSettings.pages = newPages;\r\n    setAppData(newSettings);\r\n    dispatch(setAppDataStore(appData));\r\n    let newFactoryData = {\r\n      ...factoryData,\r\n      ...{\r\n        machine_status: [\r\n          appSetting.downtime_reason1,\r\n          appSetting.downtime_reason2,\r\n          appSetting.downtime_reason3,\r\n          appSetting.downtime_reason4,\r\n          appSetting.downtime_reason5,\r\n          appSetting.downtime_reason6,\r\n          appSetting.downtime_reason7,\r\n          appSetting.downtime_reason8,\r\n          \"Idle-Uncategorized\",\r\n          \"In Cycle\",\r\n          \"Offline\",\r\n        ],\r\n      },\r\n    };\r\n    setFactoryData(newFactoryData);\r\n    dispatch(setFactoryDataStore(newFactoryData));\r\n    if (appData.isLoadedServerInfo) {\r\n      updateServerAppSettings();\r\n    }\r\n  };\r\n\r\n  const updateServerAppSettings = () => {\r\n    let params = {\r\n      downtime_reason1: appSetting[\"downtime_reason1\"],\r\n      downtime_reason2: appSetting[\"downtime_reason2\"],\r\n      downtime_reason3: appSetting[\"downtime_reason3\"],\r\n      downtime_reason4: appSetting[\"downtime_reason4\"],\r\n      downtime_reason5: appSetting[\"downtime_reason5\"],\r\n      downtime_reason6: appSetting[\"downtime_reason6\"],\r\n      downtime_reason7: appSetting[\"downtime_reason7\"],\r\n      downtime_reason8: appSetting[\"downtime_reason8\"],\r\n      cslock_cycle: appSetting[\"cslock_cycle\"],\r\n      cslock_reverse: appSetting[\"cslock_reverse\"],\r\n      cslock_guest: appSetting[\"cslock_guest\"],\r\n      cslock_alert: appSetting[\"cslock_alert\"],\r\n      time_stop: appSetting[\"time_stop\"],\r\n      time_production: appSetting[\"time_production\"],\r\n      cycle_send_alert: appSetting[\"cycle_send_alert\"],\r\n      cycle_email1: appSetting[\"cycle_email1\"],\r\n      cycle_email2: appSetting[\"cycle_email2\"],\r\n      cycle_email3: appSetting[\"cycle_email3\"],\r\n      automatic_part: appSetting[\"automatic_part\"],\r\n      automatic_min_time: appSetting[\"automatic_min_time\"],\r\n      automatic_part_per_cycle: appSetting[\"automatic_part_per_cycle\"],\r\n      gantt_chart_display: appSetting[\"gantt_chart_display\"],\r\n      calc_chart_title: appSetting[\"calc_chart_title\"],\r\n      calc_chart_formula: appSetting[\"calc_chart_formula\"],\r\n      calc_chart_option: appSetting[\"calc_chart_option\"],\r\n      calc_chart_unit: appSetting[\"calc_chart_unit\"],\r\n      calc_chart_disp_mode: appSetting[\"calc_chart_disp_mode\"],\r\n      calc_chart_max_value: appSetting[\"calc_chart_max_value\"],\r\n    };\r\n    dispatch(isSpinning(true));\r\n    apiCallForUpdateAppSetting(\r\n      factoryData.accountId,\r\n      appData.machineName,\r\n      params\r\n    )\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        pages[pages.length - 1] === 2 ? \"settings-page\" : \"display-none\"\r\n      }\r\n    >\r\n      <SettingsTopLayout />\r\n      <div className=\"settings-content\">\r\n        {/* <SettingsAppInfoLayout />\r\n        <SettingsServerInfoLayout /> */}\r\n        <SettingsInCycleSignalFromLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingProcessMonitorLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingTempDataSourceLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingMachineInfoLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingDowntimeLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingAuxDataLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingCSLockLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingTimeLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingShiftTimeLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingCycleStopAlertLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingAutomaticCounterLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n        <SettingGanttChartLayout\r\n          appSetting={appSetting}\r\n          setAppSetting={setAppSetting}\r\n        />\r\n      </div>\r\n      <Row\r\n        align={\"middle\"}\r\n        className=\"settings-save-button\"\r\n        onClick={onClickSave}\r\n      >\r\n        <Col span={4} style={{ textAlign: \"left\" }}>\r\n          <img\r\n            className=\"settings-save-button-icon\"\r\n            src={settingsIcon}\r\n            alt=\"settings\"\r\n          />\r\n        </Col>\r\n        <Col span={16} style={{ textAlign: \"center\" }}>\r\n          {\"Save Settings\"}\r\n        </Col>\r\n        <Col span={4}></Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\pages\\Dashboard\\Dashboard.js",["692"],"// @flow strict\r\n\r\nimport { Col, Row, message } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./Dashboard.css\";\r\n\r\nimport GoodBadModal from \"components/GoodBadModal/GoodBadModal\";\r\nimport GoodBadWidget from \"components/GoodBadWidget/GoodBadWidget\";\r\nimport IndicatorDots from \"components/IndicatorDots\";\r\nimport DashboardChartLayout from \"layouts/DashboardChartLayout/DashboardChartLayout\";\r\nimport DashboardMachineInfoLayout from \"layouts/DashboardMachineInfoLayout/DashboardMachineInfoLayout\";\r\nimport DashboardOEELayout from \"layouts/DashboardOEELayout/DashboardOEELayout\";\r\nimport DashboardUtilizationLayout from \"layouts/DashboardUtilizationLayout/DashboardUtilizationLayout\";\r\nimport UserInfoLayout from \"layouts/UserInfoLayout/UserInfoLayout\";\r\nimport Carousel from \"re-carousel\";\r\nimport { useEffect } from \"react\";\r\nimport { appData } from \"services/global\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\n\r\nfunction Dashboard(props) {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { pages } = appDataStore;\r\n\r\n  const [goodParts, setGoodParts] = useState(\"0\");\r\n  const [badParts, setBadParts] = useState(\"0\");\r\n  const [showGoodBadModal, setShowGoodBadModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setGoodParts(appData.shiftGoodParts);\r\n    setBadParts(appData.shiftBadParts);\r\n  }, [appDataStore.shiftGoodParts, appDataStore.shiftBadParts]);\r\n\r\n  const updateGoodParts = (value) =>{\r\n    appData.shiftGoodParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  }\r\n\r\n  const updateBadParts = (value) => {\r\n    appData.shiftBadParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        pages[pages.length - 1] === 0 ? \"dashboard-page\" : \"display-none\"\r\n      }\r\n    >\r\n      <GoodBadModal\r\n        goodParts={goodParts}\r\n        badParts={badParts}\r\n        setGoodParts={updateGoodParts}\r\n        setBadParts={updateBadParts}\r\n        showModal={showGoodBadModal}\r\n        setShowModal={setShowGoodBadModal}\r\n      />\r\n      <div className=\"dashboard-content-left\">\r\n        <UserInfoLayout />\r\n        <DashboardMachineInfoLayout />\r\n        <div className=\"dashboard-content-left-good-bad\">\r\n          <Row>\r\n            <Col span={12}>\r\n              <GoodBadWidget\r\n                type={0}\r\n                value={goodParts}\r\n                setValue={updateGoodParts}\r\n                setShowModal={setShowGoodBadModal}\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <GoodBadWidget\r\n                type={1}\r\n                value={badParts}\r\n                setValue={updateBadParts}\r\n                setShowModal={setShowGoodBadModal}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n      <div className=\"dashboard-content-right\">\r\n        <Carousel auto widgets={[IndicatorDots]}>\r\n          <div style={{ height: \"100%\" }}>\r\n            <DashboardOEELayout />\r\n          </div>\r\n          <div style={{ height: \"100%\" }}>\r\n            <DashboardUtilizationLayout />\r\n          </div>\r\n        </Carousel>\r\n      </div>\r\n      <DashboardChartLayout />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\TopLayout\\TopLayout.js",["693","694","695","696","697","698","699","700","701","702","703"],"import { Col, Drawer, Row } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./TopLayout.css\";\r\n\r\nimport SidebarMenu from \"layouts/SidebarMenu/SidebarMenu\";\r\nimport menuIcon from \"../../assets/icons/ic_menu.png\";\r\n\r\nimport TextWithIcon from \"components/TextWithIcon/TextWithIcon\";\r\nimport { STATUS_COLORS } from \"services/CONSTANTS\";\r\nimport { timeToSecond } from \"services/global\";\r\nimport connectedIcon from \"../../assets/icons/ic_connected.png\";\r\nimport disconnectedIcon from \"../../assets/icons/ic_disconnected.png\";\r\n\r\nconst TopLayout = (props) => {\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { factoryDataStore } = useSelector((x) => x.factoryDataStore);\r\n\r\n  const { pages } = appDataStore;\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const [plcConnected, setPlcConnected] = useState(false);\r\n  const [serverConnected, setServerConnected] = useState(true);\r\n\r\n  const [status, setStatus] = useState(factoryDataStore.machine_status[8]); // Uncategorized\r\n  const [statusColor, setStatusColor] = useState(STATUS_COLORS[8]);\r\n\r\n  useEffect(() => {\r\n    let sIndex =\r\n      factoryDataStore.machine_status.findIndex((x) => x == status) > 0\r\n        ? factoryDataStore.machine_status.findIndex((x) => x == status)\r\n        : 0;\r\n    setStatusColor(STATUS_COLORS[sIndex]);\r\n  }, [status]);\r\n\r\n\r\n  useEffect(() => {\r\n    let currentTimestamp = Math.floor(new Date().getTime() / 1000);\r\n    let isTimeLimit =\r\n      currentTimestamp - factoryDataStore.current_ganttdata.start >\r\n      timeToSecond(appDataStore.time_stop) / 1000;\r\n    let isInCyle =\r\n      factoryDataStore.current_ganttdata.status ==\r\n      factoryDataStore.machine_status[9];\r\n    if (isTimeLimit) {\r\n      setPlcConnected(false);\r\n      setStatus(factoryDataStore.machine_status[8]);\r\n      setStatusColor(\r\n        factoryDataStore.machine_status.findIndex(\r\n          (x) => x == factoryDataStore.machine_status[8]\r\n        ) > 0\r\n          ? factoryDataStore.machine_status.findIndex(\r\n              (x) => x == factoryDataStore.machine_status[8]\r\n            )\r\n          : 0\r\n      );\r\n    } else {\r\n      if (isInCyle) {\r\n        setPlcConnected(true);\r\n      } else {\r\n        setPlcConnected(false);\r\n      }\r\n      setStatus(factoryDataStore.current_ganttdata.status);\r\n      setStatusColor(factoryDataStore.current_ganttdata.color);\r\n    }\r\n  }, [appDataStore.machineName, factoryDataStore.current_ganttdata]);\r\n\r\n  return (\r\n    <Row\r\n      align=\"middle\"\r\n      className={\r\n        pages[pages.length - 1] === 0 || pages[pages.length - 1] === 1\r\n          ? \"top-layout\"\r\n          : \"display-none\"\r\n      }\r\n    >\r\n      <Col span={6}>\r\n        <a className=\"top-layout-menu-button\" onClick={() => setVisible(true)}>\r\n          <img className=\"top-layout-menu-icon\" src={menuIcon} />\r\n        </a>\r\n        <Drawer\r\n          className=\"custom-drawer\"\r\n          placement=\"left\"\r\n          onClick={() => setVisible(false)}\r\n          onClose={() => setVisible(false)}\r\n          open={visible}\r\n        >\r\n          <SidebarMenu open={setVisible} />\r\n        </Drawer>\r\n        {appDataStore.machineName !== \"\" &&\r\n          factoryDataStore.accountId !== \"\" && (\r\n            <div className=\"top-layout-machine-status\">\r\n              <span className=\"top-layout-machine\">\r\n                {appDataStore.machineName}\r\n              </span>\r\n              <span\r\n                className=\"top-layout-status\"\r\n                style={{ color: statusColor }}\r\n              >\r\n                {status}\r\n              </span>\r\n            </div>\r\n          )}\r\n      </Col>\r\n      <Col span={12} style={{ textAlign: \"center\" }}>\r\n        {factoryDataStore.customer_details.logo !== undefined && (\r\n          <img\r\n            className=\"top-logo\"\r\n            src={factoryDataStore.customer_details.logo}\r\n          />\r\n        )}\r\n      </Col>\r\n\r\n      <Col span={6} style={{ textAlign: \"right\" }}>\r\n        <TextWithIcon\r\n          text={plcConnected ? \"PLC Connnected\" : \"PLC Disconnected\"}\r\n          icon={plcConnected ? connectedIcon : disconnectedIcon}\r\n          marginLeft={\"5px\"}\r\n          iconBottom={\"1px\"}\r\n        />\r\n        <TextWithIcon\r\n          text={\r\n            serverConnected ? \"Connnected to Server\" : \"Disonnnected to Server\"\r\n          }\r\n          icon={serverConnected ? connectedIcon : disconnectedIcon}\r\n          marginLeft={\"5px\"}\r\n          iconBottom={\"1px\"}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default TopLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\pages\\InstallConfig\\InstallConfig.js",["704"],"// @flow strict\r\n\r\nimport { Col, Row } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport \"./InstallConfig.css\";\r\n\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport RadialInput from \"components/RadialInput/RadialInput\";\r\nimport TextInput from \"components/TextInput/TextInput\";\r\nimport InstallConfigTopLayout from \"layouts/InstallConfigTopLayout/InstallConfigTopLayout\";\r\nimport { useSelector } from \"react-redux\";\r\nimport machinenNameIcon from \"../../assets/icons/ic_machine_name.png\";\r\nimport installConfigIncon from \"../../assets/icons/ic_menu_install.png\";\r\n\r\nfunction InstallConfig(props) {\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { pages } = appDataStore;\r\n\r\n  const [machineName, setMachineName] = useState(\"\");\r\n  const [serialNumber, setSerialNumber] = useState(\"\");\r\n  const [inCycleSignal, setInCycleSignal] = useState(\"\");\r\n  const [cycleStartInterlock, setCycleStartInterlock] = useState(\"\");\r\n  const [cycleStartOnOff, setCycleStartOnOff] = useState(0);\r\n  const [cycleStartCloseOpen, setCycleStartCloseOpen] = useState(0);\r\n  const [pics, setPics] = useState([\r\n    \"https://slymms.com/backend/images/photo/20230419123228_20230112163511_20221028111250_20191207233715Visser Logo.jpg\",\r\n    \"https://slymms.com/backend/images/photo/20230419123228_20230112163511_20221028111250_20191207233715Visser Logo.jpg\",\r\n    \"https://slymms.com/backend/images/photo/20230419123228_20230112163511_20221028111250_20191207233715Visser Logo.jpg\",\r\n    \"https://slymms.com/backend/images/photo/20230419123228_20230112163511_20221028111250_20191207233715Visser Logo.jpg\",\r\n    \"https://slymms.com/backend/images/photo/20230419123228_20230112163511_20221028111250_20191207233715Visser Logo.jpg\",\r\n    \"https://slymms.com/backend/images/photo/20230419123228_20230112163511_20221028111250_20191207233715Visser Logo.jpg\",\r\n    \"https://slymms.com/backend/images/photo/20230419123228_20230112163511_20221028111250_20191207233715Visser Logo.jpg\",\r\n    \"https://slymms.com/backend/images/photo/20230419123228_20230112163511_20221028111250_20191207233715Visser Logo.jpg\",\r\n    \"https://slymms.com/backend/images/photo/20230419123228_20230112163511_20221028111250_20191207233715Visser Logo.jpg\",\r\n    \"https://slymms.com/backend/images/photo/20230419123228_20230112163511_20221028111250_20191207233715Visser Logo.jpg\",\r\n  ]);\r\n\r\n  const onClickSave = () => {\r\n    \r\n  };\r\n\r\n  const onDropImage = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    var formData = new FormData();\r\n    formData.append(\"file\", files[0]);\r\n    // postRequest(Urls.UPLOAD_USER_IMAGE, formData, (response) => {\r\n    //   if (response.status === true) {\r\n    //     setImageUrl(response.url);\r\n    //     updateImage(response.url);\r\n    //   } else {\r\n    //     message.error(lang(langIndex, \"msg_something_wrong\"));\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  const imagesUI = pics.map((pic, index) => {\r\n    return (\r\n      <img\r\n        className=\"install-config-pic\"\r\n        src={pic}\r\n        key={\"key-\" + index}\r\n        alt={\"key-\" + index}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        pages[pages.length - 1] === 3 ? \"install-config-page\" : \"display-none\"\r\n      }\r\n    >\r\n      <InstallConfigTopLayout />\r\n      <div className=\"install-config-content\">\r\n        <Row>\r\n          <Col span={12} className=\"install-config-grad-background\">\r\n            <div>\r\n              <TextInput\r\n                title={\"Machine Name\"}\r\n                value={machineName}\r\n                setValue={setMachineName}\r\n              />\r\n              <img\r\n                src={machinenNameIcon}\r\n                className=\"install-config-machine-info-icon\"\r\n                alt=\"machine-name\"\r\n              />\r\n            </div>\r\n          </Col>\r\n\r\n          <Col span={12} className=\"install-config-grad-background\">\r\n            <div>\r\n              <TextInput\r\n                title={\"Serial Number\"}\r\n                value={serialNumber}\r\n                setValue={setSerialNumber}\r\n              />\r\n              <img\r\n                src={machinenNameIcon}\r\n                className=\"install-config-machine-info-icon\"\r\n                alt=\"machine-info\"\r\n              />\r\n            </div>\r\n          </Col>\r\n\r\n          <Col span={24} className=\"install-config-grad-background\">\r\n            <div className=\"install-config-title\">{\"Cyle Settings\"}</div>\r\n            <Row>\r\n              <Col span={8}>\r\n                <div className=\"install-config-incyle-signal\">\r\n                  {\"In Cyle Signal\"}\r\n                </div>\r\n                <TextArea\r\n                  className=\"install-config-textarea\"\r\n                  rows={4}\r\n                  max\r\n                  value={inCycleSignal}\r\n                  onChange={(e) => {\r\n                    setInCycleSignal(e.target.value);\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={8}\r\n                style={{ paddingRight: \"20px\", paddingLeft: \"20px\" }}\r\n              >\r\n                <div className=\"install-config-incyle-signal\">\r\n                  {\"Cyle Start Interlock\"}\r\n                </div>\r\n                <RadialInput\r\n                  value={cycleStartOnOff}\r\n                  title=\"On/Off\"\r\n                  setValue={setCycleStartOnOff}\r\n                />\r\n                <RadialInput\r\n                  value={cycleStartCloseOpen}\r\n                  title=\"Normally Closed/Open\"\r\n                  setValue={setCycleStartCloseOpen}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <div className=\"install-config-incyle-signal\">\r\n                  {\"Cyle Start Interlock Interface\"}\r\n                </div>\r\n                <TextArea\r\n                  className=\"install-config-textarea\"\r\n                  rows={4}\r\n                  max\r\n                  value={cycleStartInterlock}\r\n                  onChange={(e) => {\r\n                    setCycleStartInterlock(e.target.value);\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n\r\n          <Col span={24}>\r\n            <Row\r\n              align={\"middle\"}\r\n              className=\"install-config-save-button\"\r\n              onClick={onClickSave}\r\n            >\r\n              <Col span={4} style={{ textAlign: \"left\" }}>\r\n                <img\r\n                  className=\"install-config-save-button-icon\"\r\n                  src={installConfigIncon}\r\n                  alt=\"save\"\r\n                />\r\n              </Col>\r\n              <Col span={16} style={{ textAlign: \"center\" }}>\r\n                {\"Save Configuration\"}\r\n              </Col>\r\n              <Col span={4}></Col>\r\n            </Row>\r\n          </Col>\r\n\r\n          <Col span={24} className=\"install-config-grad-background\">\r\n            <div className=\"install-config-title\">{\"Pictures\"}</div>\r\n            <div className=\"install-config-images-container\">\r\n              <label\r\n                className=\"install-config-image-picker\"\r\n                htmlFor=\"upload_customer_image\"\r\n              >\r\n                {\"+\"}\r\n                <input\r\n                  type=\"file\"\r\n                  id=\"upload_customer_image\"\r\n                  name=\"upload_customer_image\"\r\n                  style={{ display: \"none\" }}\r\n                  accept=\"image/x-png,image/gif,image/jpeg\"\r\n                  onChange={onDropImage}\r\n                />\r\n              </label>\r\n              <div className=\"install-config-images\">\r\n                <div>{imagesUI}</div>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InstallConfig;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\pages\\ProcessMonitor\\ProcessMonitor.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\ContentLayout\\ContentLayout.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\BottomLayout\\BottomLayout.js",["705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724"],"import { Col, Row, message } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\nimport { STATUS_COLORS, SYS_INTERVAL } from \"services/CONSTANTS\";\r\nimport {\r\n  GetCustomerCurrentTime,\r\n  appData,\r\n  factoryData,\r\n  secondToTime,\r\n  setFactoryData,\r\n  timeToSecond,\r\n} from \"services/global\";\r\nimport \"./BottomLayout.css\";\r\nimport { apiCallForPostBufferGanttData } from \"services/apiCall\";\r\nimport { setFactoryDataStore } from \"redux/actions/factoryActions\";\r\n\r\nconst BottomLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { factoryDataStore } = useSelector((x) => x.factoryDataStore);\r\n\r\n  const [inCyleStatusTime, setInCyleStatusTime] = useState(\"00:00:00\");\r\n  const [idleStatusTime, setIdleStatusTime] = useState(\"00:00:00\");\r\n\r\n  const [uncategorizedStatusTime, setUncategorizedStatusTime] =\r\n    useState(\"00:00:00\");\r\n\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [customerTime, setCustomerTime] = useState(new Date());\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const [apiCallCounter, setApiCallCounter] = useState(SYS_INTERVAL / 1000);\r\n  const timer = () => setTick((t) => !t);\r\n\r\n  useEffect(() => {\r\n    clearInterval(intervalId);\r\n    setIntervalID(setInterval(timer, 1000));\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (factoryData.accountId == \"\" || appData.machineName == \"\") {\r\n      setNoStatus();\r\n    }\r\n  }, [factoryDataStore.accountId, appDataStore.machineName]);\r\n\r\n  useEffect(() => {\r\n    setCurrentTime(new Date());\r\n    let timezone =\r\n      factoryData.customer_details.timezone != undefined\r\n        ? factoryData.customer_details.timezone\r\n        : 0;\r\n    setCustomerTime(GetCustomerCurrentTime(timezone));\r\n\r\n    if (factoryData.accountId == \"\" || appData.machineName == \"\") {\r\n      return;\r\n    }\r\n\r\n    if (factoryData.idle_status != \"\") {\r\n      setIdleStatus();\r\n    } else {\r\n      let currentTimestamp = Math.floor(new Date().getTime() / 1000);\r\n      let isTimeLimit =\r\n        currentTimestamp - factoryData.current_ganttdata.start >\r\n        timeToSecond(appDataStore.time_stop) / 1000;\r\n      if (!isTimeLimit) {\r\n        let isInCyle =\r\n          factoryData.current_ganttdata.status == factoryData.machine_status[9];\r\n        if (isInCyle) {\r\n          setInCycleStatus();\r\n        } else {\r\n          setUnCategorizedStatus();\r\n          if (factoryData.uncat_time % timeToSecond(appData.time_stop) == 0) {\r\n            showDowntimeReasonView();\r\n          }\r\n        }\r\n      } else {\r\n        setUnCategorizedStatus();\r\n        if (factoryData.uncat_time % timeToSecond(appData.time_stop) == 0) {\r\n          showDowntimeReasonView();\r\n        }\r\n      }\r\n    }\r\n  }, [tick]);\r\n\r\n  const setUnCategorizedStatus = () => {\r\n    updateCurrentGanttData(factoryData.machine_status[8]);\r\n    let newFactoryData = {\r\n      ...factoryData,\r\n      ...{\r\n        idle_times: [0, 0, 0, 0, 0, 0, 0, 0],\r\n        uncat_time: factoryData.uncat_time + 1000,\r\n        idle_status: \"\",\r\n      },\r\n    };\r\n    setFactoryData(newFactoryData);\r\n    dispatch(setFactoryDataStore(newFactoryData));\r\n    setIdleStatusTime(\"00:00:00\");\r\n    setInCyleStatusTime(\"00:00:00\");\r\n    setUncategorizedStatusTime(secondToTime(factoryData.uncat_time));\r\n  };\r\n\r\n  const setIdleStatus = () => {\r\n    updateCurrentGanttData(factoryData.idle_status);\r\n    let newIdleTimes = factoryData.idle_times;\r\n    for (let i = 0; i < 8; i++) {\r\n      if (\r\n        i ==\r\n        factoryData.machine_status.findIndex(\r\n          (x) => x == factoryData.idle_status\r\n        )\r\n      )\r\n        newIdleTimes[i] += 1000;\r\n    }\r\n    let newFactoryData = {\r\n      ...factoryData,\r\n      ...{ idle_times: newIdleTimes, uncat_time: 0 },\r\n    };\r\n    let idleSeconds = 0;\r\n    for (let i = 0; i < 8; i++) {\r\n      idleSeconds += newIdleTimes[i];\r\n    }\r\n    setIdleStatusTime(secondToTime(idleSeconds));\r\n    setInCyleStatusTime(\"00:00:00\");\r\n    setUncategorizedStatusTime(\"00:00:00\");\r\n    setFactoryData(newFactoryData);\r\n    dispatch(setFactoryDataStore(newFactoryData));\r\n  };\r\n\r\n  const setInCycleStatus = () => {\r\n    let currentTimestamp = Math.floor(new Date().getTime() / 1000);\r\n    setInCyleStatusTime(\r\n      secondToTime((currentTimestamp - factoryData.last_ganttdata.start) * 1000)\r\n    );\r\n    let newFactoryData = {\r\n      ...factoryData,\r\n      ...{\r\n        idle_times: [0, 0, 0, 0, 0, 0, 0, 0],\r\n        idle_status: factoryData.machine_status[9],\r\n        uncat_time: 0,\r\n      },\r\n    };\r\n    setFactoryData(newFactoryData);\r\n    dispatch(setFactoryDataStore(newFactoryData));\r\n    setIdleStatusTime(\"00:00:00\");\r\n    setUncategorizedStatusTime(\"00:00:00\");\r\n  };\r\n\r\n  const setNoStatus = () => {\r\n    factoryData.idle_times = [0, 0, 0, 0, 0, 0, 0, 0];\r\n    factoryData.idle_status = \"\";\r\n    factoryData.uncat_time = 0;\r\n    setInCyleStatusTime(\"00:00:00\");\r\n    setIdleStatusTime(\"00:00:00\");\r\n    setUncategorizedStatusTime(\"00:00:00\");\r\n  };\r\n\r\n  const updateCurrentGanttData = (newStatus) => {\r\n    let counter = apiCallCounter;\r\n    if (\r\n      counter > 0 ||\r\n      factoryData.accountId == \"\" ||\r\n      appData.machineName == \"\"\r\n    ) {\r\n      setApiCallCounter(counter - 1);\r\n      return;\r\n    }\r\n    setApiCallCounter(5);\r\n    apiCallForPostBufferGanttData(\r\n      factoryData.accountId,\r\n      appData.machineName,\r\n      newStatus,\r\n      STATUS_COLORS[\r\n        factoryData.machine_status.findIndex((x) => x == newStatus) > 0\r\n          ? factoryData.machine_status.findIndex((x) => x == newStatus)\r\n          : 0\r\n      ]\r\n    )\r\n      .then((res) => {})\r\n      .catch((err) => {});\r\n  };\r\n\r\n  const onClickInCyle = () => {\r\n    message.info(\"onClickInCyle\");\r\n  };\r\n\r\n  const formattedTime = currentTime.toLocaleString(\"en-US\", {\r\n    year: \"2-digit\",\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    weekday: \"short\",\r\n    //week: 'numeric'\r\n  });\r\n\r\n  const formattedCustomerTime = customerTime.toLocaleString(\"en-US\", {\r\n    year: \"2-digit\",\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    weekday: \"short\",\r\n    //week: 'numeric'\r\n  });\r\n\r\n  const onClickIdle = () => {\r\n    if (factoryDataStore.idle_status != factoryData.machine_status[9])\r\n      // if not in cycle\r\n      showDowntimeReasonView();\r\n  };\r\n\r\n  const showDowntimeReasonView = () => {\r\n    if (appData.pages[appData.pages.length - 1] == 6) return;\r\n    appData.pages.push(6); // page_index : 6 => show MachineStatusPage\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const onClickUncategorized = () => {};\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        appDataStore.pages[appDataStore.pages.length - 1] === 0 ||\r\n        appDataStore[appDataStore.length - 1] === 1\r\n          ? \"bottom-layout\"\r\n          : \"display-none\"\r\n      }\r\n    >\r\n      <Row align=\"middle\" className=\"bottom-container\">\r\n        <Col flex=\"auto\">\r\n          <span\r\n            className=\"bottom-status\"\r\n            style={{ color: STATUS_COLORS[9] }}\r\n            onClick={onClickInCyle}\r\n          >\r\n            {factoryDataStore.machine_status[9]} : {inCyleStatusTime}\r\n          </span>\r\n\r\n          <span\r\n            className=\"bottom-status\"\r\n            style={{\r\n              color: STATUS_COLORS[0],\r\n            }}\r\n            onClick={onClickIdle}\r\n          >\r\n            {\"Idle\"} : {idleStatusTime}\r\n          </span>\r\n\r\n          <span\r\n            className=\"bottom-status\"\r\n            style={{ color: STATUS_COLORS[8] }}\r\n            onClick={onClickUncategorized}\r\n          >\r\n            {factoryDataStore.machine_status[8]} : {uncategorizedStatusTime}\r\n          </span>\r\n        </Col>\r\n        <Col flex=\"330px\">\r\n          <div>\r\n            <span className=\"bottom-time\">\r\n              Factory Time : {formattedCustomerTime}\r\n            </span>\r\n          </div>\r\n          <div>\r\n            <span className=\"bottom-time\">Current Time : {formattedTime}</span>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BottomLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\pages\\Maintenance\\Maintenance.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\components\\InputWidgets\\InputNormal\\InputNormal.js",["725"],"// @flow strict\r\n\r\nimport { Input } from \"antd\";\r\nimport React from \"react\";\r\nimport \"./InputNormal.css\";\r\nfunction InputNormal(props) {\r\n  const { title, placeholder, field, userDetail, setUserDetail } = props;\r\n  const { wrongList, setWrongList } = props;\r\n  return (\r\n    <div className=\"input-normal\">\r\n      <h3 className=\"input-title\">{title}</h3>\r\n      <Input\r\n        placeholder={placeholder === undefined ? \"\" : placeholder}\r\n        value={userDetail[field] === undefined ? \"\" : userDetail[field]}\r\n        style={{\r\n          border:\r\n            wrongList.includes(field) === true\r\n              ? \"1px solid var(--redColor)\"\r\n              : \"1px solid var(--greyColor)\",\r\n        }}\r\n        onChange={(e) => {\r\n          let temp = userDetail;\r\n          temp[field] = e.target.value;\r\n          setUserDetail({ ...temp });\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputNormal;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\ButtonWidgets\\NormalButton\\NormalButton.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\components\\InputWidgets\\InputPassword\\InputPassword.js",["726"],"// @flow strict\r\n\r\nimport { Input } from \"antd\";\r\nimport React from \"react\";\r\nimport \"./InputPassword.css\";\r\nfunction InputPassword(props) {\r\n  const { userDetail, setUserDetail, onPressEnter } = props;\r\n  const { wrongList, setWrongList } = props;\r\n  return (\r\n    <div className=\"input-password\">\r\n      <h3 className=\"input-title\">Password</h3>\r\n      <Input.Password\r\n        placeholder={\"Password\"}\r\n        value={userDetail.password === undefined ? \"\" : userDetail.password}\r\n        onChange={(e) =>\r\n          setUserDetail({ ...userDetail, password: e.target.value })\r\n        }\r\n        onPressEnter={onPressEnter}\r\n        className={\r\n          wrongList.includes(\"password\") === true\r\n            ? \"phone-input-password-wrong\"\r\n            : \"phone-input-password-correct\"\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputPassword;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\QualityLayout\\QualityLayout.js",["727","728"],"import { Col, Row, message } from \"antd\";\r\nimport CurrentPartProcessingTimeWidget from \"components/CurrentPartProcessingTimeWidget/CurrentPartProcessingTimeWidget\";\r\nimport GoodBadModal from \"components/GoodBadModal/GoodBadModal\";\r\nimport GoodBadWidget from \"components/GoodBadWidget/GoodBadWidget\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport PartIDInputLayout from \"layouts/PartIDInputLayout/PartIDInputLayout\";\r\nimport PartIDModal from \"layouts/PartIDModal/PartIDModal\";\r\nimport UserInfoLayout from \"layouts/UserInfoLayout/UserInfoLayout\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./QualityLayout.css\";\r\nimport RejectReasonsModal from \"layouts/RejectReasonsModal/RejectReasonsModal\";\r\nimport RadialInputGroup from \"components/RadialInputGroup/RadialInputGroup\";\r\nimport jobidEditIcon from \"../../assets/icons/ic_jobid_edit.png\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { isSpinning, setAppDataStore } from \"redux/actions/appActions\";\r\nimport { appData, secondToTime, timeToSecond, userData, factoryData } from \"services/global\";\r\nimport {\r\n  apiCallForGetQualityStation,\r\n  apiCallForPostQualityStation,\r\n} from \"services/apiCall\";\r\n\r\nconst QualityLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n  const [showPartID, setShowPartID] = useState(false);\r\n  const [partID, setPartID] = useState(\"\");\r\n\r\n  const [goodParts, setGoodParts] = useState(\"0\");\r\n  const [badParts, setBadParts] = useState(\"0\");\r\n  const [showGoodBadModal, setShowGoodBadModal] = useState(false);\r\n  const [showRejectReasons, setShowRejectReasons] = useState(false);\r\n  const [selectedTitleIndex, setSelectedTitleIndex] = useState(0);\r\n\r\n  const [processingTime, setProcessingTime] = useState(\"00:00:00\");\r\n  const [comments, setComments] = useState(\"\");\r\n\r\n  const [reasons, setReasons] = useState({\r\n    reason1: 0,\r\n    reason2: 0,\r\n    reason3: 0,\r\n    reason4: 0,\r\n    reason5: 0,\r\n    reason6: 0,\r\n    reason7: 0,\r\n    reason8: 0,\r\n    reason9: 0,\r\n    reason10: 0,\r\n  });\r\n\r\n  const [reasonTitles, setReasonTitles] = useState([\r\n    \"FOD in paint\",\r\n    \"FOD in Bituminous\",\r\n    \"Bituminous Separation\",\r\n    \"Missing Phosphate\",\r\n    \"Damaged Product\",\r\n    \"Paperwork not completed\",\r\n    \"Paperwork incorrect\",\r\n    \"Heavy Coatings\",\r\n    \"Rust\",\r\n    \"Light Coatings\",\r\n  ]);\r\n\r\n  const updateReasons = (field, value) => {\r\n    message.warn(\"updateReasons\");\r\n    var newReasons = { ...reasons };\r\n    newReasons[field] = value;\r\n    setReasons({ ...newReasons });\r\n  };\r\n\r\n  const reasonsUI = Object.keys(reasons).map((key, index) => {\r\n    return (\r\n      <Col span={12} key={\"key-\" + index}>\r\n        <RadialInputGroup\r\n          initValue={reasons}\r\n          field={key}\r\n          updateValue={updateReasons}\r\n          title={reasonTitles[index]}\r\n        />\r\n        <img\r\n          className=\"reject-reasons-title-edit\"\r\n          src={jobidEditIcon}\r\n          onClick={() => {\r\n            setSelectedTitleIndex(index);\r\n            setShowRejectReasons(true);\r\n          }}\r\n          alt=\"edit\"\r\n        />\r\n      </Col>\r\n    );\r\n  });\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setGoodParts(appData.shiftGoodParts);\r\n    setBadParts(appData.shiftBadParts);\r\n  }, [appDataStore.shiftGoodParts, appDataStore.shiftBadParts]);\r\n\r\n  const updateGoodParts = (value) => {\r\n    appData.shiftGoodParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const updateBadParts = (value) => {\r\n    appData.shiftBadParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isStarted) {\r\n      setProcessingTime(\r\n        moment(processingTime, \"HH:mm:ss\").add(1, \"seconds\").format(\"HH:mm:ss\")\r\n      );\r\n    }\r\n  }, [tick]);\r\n\r\n  const onPartId = (value) => {\r\n    setPartID(value);\r\n    resetTimers();\r\n    getPartInfo(value);\r\n  };\r\n\r\n  const resetTimers = () => {\r\n    setComments(\"\");\r\n    setProcessingTime(\"00:00:00\");\r\n    setIsStarted(false);\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    if (!isStarted) {\r\n      // Clear Old Timer if exists\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n      }\r\n\r\n      setIntervalID(setInterval(timer, 1000));\r\n      setIsStarted(true);\r\n    }\r\n  };\r\n\r\n  const onStopClick = () => {\r\n    clearInterval(intervalId);\r\n    setIsStarted(false);\r\n    reportTimes();\r\n  };\r\n\r\n  const getPartInfo = (value) => {\r\n    if (value === \"\") {\r\n      return;\r\n    }\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      part_id: value,\r\n    };\r\n    dispatch(isSpinning(true));\r\n    apiCallForGetQualityStation(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        let stationInfo = res[\"station\"];\r\n        setProcessingTime(secondToTime(stationInfo[\"processing_time\"]));\r\n        setComments(stationInfo[\"comments\"]);\r\n        let scrapCode = stationInfo[\"scrap_code\"].toLowerCase();\r\n        let newReasons = { ...reasons };\r\n        for (let i = 0; i < reasonTitles.length; i++) {\r\n          if (scrapCode.includes(reasonTitles[i].toLowerCase())) {\r\n            newReasons[Object.keys(newReasons)[i]] = 1;\r\n          } else {\r\n            newReasons[Object.keys(newReasons)[i]] = 0;\r\n          }\r\n        }\r\n        setReasons(newReasons);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        //message.error(\"Fail to get times!\");\r\n      });\r\n  };\r\n\r\n  const reportTimes = () => {\r\n    if (partID === \"\") {\r\n      message.warn(\"Please input Part ID to save times.\");\r\n      return;\r\n    }\r\n\r\n    if (factoryData.accountId === \"\") {\r\n      message.warn(\"Please login with customer id\");\r\n      return;\r\n    }\r\n\r\n    if (appData.machineName === \"\") {\r\n      message.warn(\"Please input machine name in settings page\");\r\n      return;\r\n    }\r\n\r\n    let scrapCode = \"\";\r\n\r\n    for (let i = 0; i < reasonTitles.length; i++) {\r\n      if (reasons[Object.keys(reasons)[i]] === 1) {\r\n        if (scrapCode === \"\") {\r\n          scrapCode = reasonTitles[i];\r\n        } else {\r\n          scrapCode = scrapCode + \", \" + reasonTitles[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      machine_id: appData.machineName,\r\n      created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\") + \".000000\",\r\n      timestamp: Date.now(),\r\n      operator: userData.username_full,\r\n      part_id: partID,\r\n      date: moment().format(\"MM/DD/YYYY\"),\r\n      time: moment().format(\"HH:mm:ss\"),\r\n      processing_time: timeToSecond(processingTime),\r\n      comments: comments,\r\n      scrap_code: scrapCode,\r\n    };\r\n\r\n    dispatch(isSpinning(true));\r\n    apiCallForPostQualityStation(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        message.success(\"Success to report times!\");\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to report times!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"quality-station-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Input Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowPartID}\r\n      />\r\n      <PartIDModal\r\n        showModal={showPartID}\r\n        setShowModal={setShowPartID}\r\n        partID={partID}\r\n        setPartID={onPartId}\r\n      />\r\n      <GoodBadModal\r\n        goodParts={goodParts}\r\n        badParts={badParts}\r\n        setGoodParts={updateGoodParts}\r\n        setBadParts={updateBadParts}\r\n        showModal={showGoodBadModal}\r\n        setShowModal={setShowGoodBadModal}\r\n      />\r\n      <RejectReasonsModal\r\n        showModal={showRejectReasons}\r\n        setShowModal={setShowRejectReasons}\r\n        titles={reasonTitles}\r\n        setTitles={setReasonTitles}\r\n        index={selectedTitleIndex}\r\n      />\r\n      <div className=\"quality-station-title\">{\"Quality STATION\"}</div>\r\n      <div className=\"quality-station-part-id\">\r\n        <PartIDInputLayout\r\n          partID={partID}\r\n          setPartID={onPartId}\r\n          setShowInputMode={setShowInputMode}\r\n        />\r\n      </div>\r\n      <div className=\"quality-station-user-info\">\r\n        <UserInfoLayout />\r\n      </div>\r\n      <div className=\"quality-station-content\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <CurrentPartProcessingTimeWidget\r\n              time={processingTime}\r\n              setTime={setProcessingTime}\r\n              onStartClick={onStartClick}\r\n              onStopClick={onStopClick}\r\n            />\r\n          </Col>\r\n          <Col span={12} style={{ paddingLeft: \"5px\" }}>\r\n            <Row>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={0}\r\n                  value={goodParts}\r\n                  setValue={updateGoodParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={1}\r\n                  value={badParts}\r\n                  setValue={updateBadParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <div className=\"quality-station-info\">\r\n          <Row className=\"quality-station-info-content\">\r\n            <Col span={24} className=\"quality-station-reject-reasons\">\r\n              {\"Reject Reasons\"}\r\n            </Col>\r\n            {reasonsUI}\r\n            <Col span={24}>\r\n              <TextArea\r\n                className=\"reject-reasons-comment-textarea\"\r\n                rows={3}\r\n                max\r\n                placeholder=\"Add Comments Here\"\r\n                value={comments}\r\n                onChange={(e) => {\r\n                  setComments(e.target.value);\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QualityLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\CleaningStationLayout\\CleaningStationLayout.js",["729","730"],"import { Col, Row, message } from \"antd\";\r\nimport CurrentPartNotesWidget from \"components/CurrentPartNotesWidget/CurrentPartNotesWidget\";\r\nimport CurrentPartProcessingTimeWidget from \"components/CurrentPartProcessingTimeWidget/CurrentPartProcessingTimeWidget\";\r\nimport GoodBadModal from \"components/GoodBadModal/GoodBadModal\";\r\nimport GoodBadWidget from \"components/GoodBadWidget/GoodBadWidget\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport PartIDInputLayout from \"layouts/PartIDInputLayout/PartIDInputLayout\";\r\nimport PartIDModal from \"layouts/PartIDModal/PartIDModal\";\r\nimport UserInfoLayout from \"layouts/UserInfoLayout/UserInfoLayout\";\r\nimport moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isSpinning, setAppDataStore } from \"redux/actions/appActions\";\r\nimport {\r\n  apiCallForGetCleaningStation,\r\n  apiCallForPostCleaningStation,\r\n} from \"services/apiCall\";\r\nimport { appData, secondToTime, timeToSecond, userData, factoryData } from \"services/global\";\r\nimport \"./CleaningStationLayout.css\";\r\n\r\nconst CleaningStationLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n  const [showPartID, setShowPartID] = useState(false);\r\n  const [partID, setPartID] = useState(\"\");\r\n  const [processingTime, setProcessingTime] = useState(\"00:00:00\");\r\n  const [notes, setNotes] = useState(\"\");\r\n\r\n  const [goodParts, setGoodParts] = useState(\"0\");\r\n  const [badParts, setBadParts] = useState(\"0\");\r\n  const [showGoodBadModal, setShowGoodBadModal] = useState(false);\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setGoodParts(appData.shiftGoodParts);\r\n    setBadParts(appData.shiftBadParts);\r\n  }, [appDataStore.shiftGoodParts, appDataStore.shiftBadParts]);\r\n\r\n  const updateGoodParts = (value) => {\r\n    appData.shiftGoodParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const updateBadParts = (value) => {\r\n    appData.shiftBadParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isStarted) {\r\n      setProcessingTime(\r\n        moment(processingTime, \"HH:mm:ss\").add(1, \"seconds\").format(\"HH:mm:ss\")\r\n      );\r\n    }\r\n  }, [tick]);\r\n\r\n  const onPartId = (value) => {\r\n    setPartID(value);\r\n    resetTimers();\r\n    getPartInfo(value);\r\n  };\r\n\r\n  const resetTimers = () => {\r\n    setNotes(\"\");\r\n    setProcessingTime(\"00:00:00\");\r\n    setIsStarted(false);\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    if (!isStarted) {\r\n      setIntervalID(setInterval(timer, 1000));\r\n      setIsStarted(true);\r\n    }\r\n  };\r\n\r\n  const onStopClick = () => {\r\n    clearInterval(intervalId);\r\n    setIsStarted(false);\r\n    reportTimes();\r\n  };\r\n\r\n  const getPartInfo = (value) => {\r\n    if (value === \"\") {\r\n      return;\r\n    }\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      part_id: value,\r\n    };\r\n    dispatch(isSpinning(true));\r\n    apiCallForGetCleaningStation(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        let stationInfo = res[\"station\"];\r\n        setProcessingTime(secondToTime(stationInfo[\"processing_time\"]));\r\n        setNotes(stationInfo[\"notes\"]);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        //message.error(\"Fail to get times!\");\r\n      });\r\n  };\r\n\r\n  const reportTimes = () => {\r\n    if (partID === \"\") {\r\n      message.warn(\"Please input Part ID to save times.\");\r\n      return;\r\n    }\r\n\r\n    if (factoryData.accountId === \"\") {\r\n      message.warn(\"Please login with customer id\");\r\n      return;\r\n    }\r\n\r\n    if (appData.machineName === \"\") {\r\n      message.warn(\"Please input machine name in settings page\");\r\n      return;\r\n    }\r\n\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      machine_id: appData.machineName,\r\n      created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\") + \".000000\",\r\n      timestamp: Date.now(),\r\n      operator: userData.username_full,\r\n      part_id: partID,\r\n      date: moment().format(\"MM/DD/YYYY\"),\r\n      time: moment().format(\"HH:mm:ss\"),\r\n      processing_time: timeToSecond(processingTime),\r\n      notes: notes,\r\n    };\r\n\r\n    dispatch(isSpinning(true));\r\n    apiCallForPostCleaningStation(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        message.success(\"Success to report times!\");\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to report times!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"cleaning-station-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Input Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowPartID}\r\n      />\r\n      <PartIDModal\r\n        showModal={showPartID}\r\n        setShowModal={setShowPartID}\r\n        partID={partID}\r\n        setPartID={onPartId}\r\n      />\r\n      <GoodBadModal\r\n        goodParts={goodParts}\r\n        badParts={badParts}\r\n        setGoodParts={updateGoodParts}\r\n        setBadParts={updateBadParts}\r\n        showModal={showGoodBadModal}\r\n        setShowModal={setShowGoodBadModal}\r\n      />\r\n      <div className=\"cleaning-station-title\">{\"CLEANING STATION\"}</div>\r\n      <div className=\"cleaning-station-part-id\">\r\n        <PartIDInputLayout\r\n          partID={partID}\r\n          setPartID={onPartId}\r\n          setShowInputMode={setShowInputMode}\r\n        />\r\n      </div>\r\n      <div className=\"cleaning-station-user-info\">\r\n        <UserInfoLayout />\r\n      </div>\r\n      <div className=\"cleaning-station-content\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <CurrentPartProcessingTimeWidget\r\n              time={processingTime}\r\n              setTime={setProcessingTime}\r\n              onStartClick={onStartClick}\r\n              onStopClick={onStopClick}\r\n            />\r\n          </Col>\r\n          <Col span={12} style={{ paddingLeft: \"5px\" }}>\r\n            <CurrentPartNotesWidget notes={notes} setNotes={setNotes} />\r\n            <Row style={{ marginTop: \"20px\" }}>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={0}\r\n                  value={goodParts}\r\n                  setValue={updateGoodParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={1}\r\n                  value={badParts}\r\n                  setValue={updateBadParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CleaningStationLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\TimeLoggerLayout\\TimeLoggerLayout.js",["731","732","733"],"import { Col, Row, message } from \"antd\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport PartIDInputLayout from \"layouts/PartIDInputLayout/PartIDInputLayout\";\r\nimport PartIDModal from \"layouts/PartIDModal/PartIDModal\";\r\nimport moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isSpinning } from \"redux/actions/appActions\";\r\nimport {\r\n  apiCallForGetTankTime,\r\n  apiCallForPostTankTime,\r\n} from \"services/apiCall\";\r\nimport {\r\n  appData,\r\n  secondToTime,\r\n  timeToSecond,\r\n  userData,\r\n  factoryData,\r\n} from \"services/global\";\r\nimport TankTimeWidget from \"../../components/TankTimeWidget/TankTimeWidget\";\r\nimport \"./TimeLoggerLayout.css\";\r\nimport TextInputArrayModal from \"components/TextInputArrayModal/TextInputArrayModal\";\r\nimport RecordPhosphateTestInfo from \"components/RecordPhosphateTestInfoModal/RecordPhosphateTestInfoModal\";\r\n\r\nconst TimeLoggerLayout = (props) => {\r\n  const defaultTimes = [\r\n    \"00:00:00\",\r\n    \"00:00:00\",\r\n    \"00:00:00\",\r\n    \"00:00:00\",\r\n    \"00:00:00\",\r\n    \"00:00:00\",\r\n    \"00:00:00\",\r\n    \"00:00:00\",\r\n    \"00:00:00\",\r\n  ];\r\n\r\n  const titles = [\r\n    \"Oven\",\r\n    \"Tank1\",\r\n    \"Tank2\",\r\n    \"Tank3\",\r\n    \"Tank4\",\r\n    \"Tank5\",\r\n    \"Tank6\",\r\n    \"Tank7\",\r\n    \"Tank8\",\r\n  ];\r\n\r\n  const tankTitles = [\r\n    \"Tank1\",\r\n    \"Tank2\",\r\n    \"Tank3\",\r\n    \"Tank4\",\r\n    \"Tank5\",\r\n    \"Tank6\",\r\n    \"Tank7\",\r\n    \"Tank8\",\r\n  ];\r\n\r\n  const [temps, setTemps] = useState([\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n  ]);\r\n\r\n  const [tankTemps, setTankTemps] = useState([\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n  ]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n  const [showPartID, setShowPartID] = useState(false);\r\n  const [showTextInputArrayModal, setShowTextInputArrayModal] = useState(false);\r\n  const [showRecordPhosphateTestInfo, setShowRecordPhosphateTestInfo] =\r\n    useState(false);\r\n\r\n  const [rmrot, setRmrot] = useState(\"\");\r\n  const [partID, setPartID] = useState(\"\");\r\n  const [times, setTimes] = useState(defaultTimes);\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n\r\n  const [selectedTankIndex, setSelectedTankIndex] = useState(1);\r\n\r\n  const [isStarted, setIsStarted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isStarted) {\r\n      let tempTimes = [...times];\r\n      tempTimes[selectedTankIndex] = moment(\r\n        times[selectedTankIndex],\r\n        \"HH:mm:ss\"\r\n      )\r\n        .add(1, \"seconds\")\r\n        .format(\"HH:mm:ss\");\r\n      setTimes(tempTimes);\r\n    }\r\n  }, [tick]);\r\n\r\n  const updateTankTemps = (values) => {\r\n    let newValues = [];\r\n    newValues = [temps[0], ...values];\r\n    setTemps(newValues);\r\n    setTankTemps(values);\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    if (!isStarted) {\r\n      setIntervalID(setInterval(timer, 1000));\r\n      setIsStarted(true);\r\n    }\r\n  };\r\n\r\n  const onStopClick = () => {\r\n    clearInterval(intervalId);\r\n    setIsStarted(false);\r\n    if (selectedTankIndex === 0) {\r\n      reportTimes();\r\n    }\r\n  };\r\n\r\n  const reportTimes = () => {\r\n    if (partID === \"\") {\r\n      message.warn(\"Please input Part ID to save times.\");\r\n      return;\r\n    }\r\n\r\n    if (rmrot === \"\") {\r\n      message.warn(\"Please input RM LOT# to save times.\");\r\n      return;\r\n    }\r\n\r\n    if (factoryData.accountId === \"\") {\r\n      message.warn(\"Please login with customer id\");\r\n      return;\r\n    }\r\n\r\n    if (appData.machineName === \"\") {\r\n      message.warn(\"Please input machine name in settings page\");\r\n      return;\r\n    }\r\n\r\n\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      machine_id: appData.machineName,\r\n      created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\") + \".000000\",\r\n      timestamp: Date.now(),\r\n      part_id: partID,\r\n      date: moment().format(\"MM/DD/YYYY\"),\r\n      time: moment().format(\"HH:mm:ss\"),\r\n      ttime1: timeToSecond(times[1]),\r\n      ttemp1: temps[1],\r\n      ttime2: timeToSecond(times[2]),\r\n      ttemp2: temps[2],\r\n      ttime3: timeToSecond(times[3]),\r\n      ttemp3: temps[3],\r\n      ttime4: timeToSecond(times[4]),\r\n      ttemp4: temps[4],\r\n      ttime5: timeToSecond(times[5]),\r\n      ttemp5: temps[5],\r\n      ttime6: timeToSecond(times[6]),\r\n      ttemp6: temps[6],\r\n      ttime7: timeToSecond(times[7]),\r\n      ttemp7: temps[7],\r\n      ttime8: timeToSecond(times[8]),\r\n      ttemp8: temps[8],\r\n      toven: timeToSecond(times[0]),\r\n      operator: userData.username_full,\r\n      rm_lot: rmrot,\r\n    };\r\n\r\n    dispatch(isSpinning(true));\r\n    apiCallForPostTankTime(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        message.success(\"Success to report times!\");\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to report times!\");\r\n      });\r\n  };\r\n\r\n  const onPartId = (value) => {\r\n    setPartID(value);\r\n    resetTimers();\r\n    getPartInfo(value);\r\n  };\r\n\r\n  const resetTimers = () => {\r\n    setRmrot(\"\");\r\n    setSelectedTankIndex(1);\r\n    setTimes(defaultTimes);\r\n    setIsStarted(false);\r\n  };\r\n\r\n  const getPartInfo = (value) => {\r\n    if (value === \"\") {\r\n      return;\r\n    }\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      part_id: value,\r\n    };\r\n    dispatch(isSpinning(true));\r\n    apiCallForGetTankTime(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        let tankTimes = res[\"tank_time\"];\r\n        setTimes([\r\n          secondToTime(tankTimes[\"toven\"]),\r\n          secondToTime(tankTimes[\"ttime1\"]),\r\n          secondToTime(tankTimes[\"ttime2\"]),\r\n          secondToTime(tankTimes[\"ttime3\"]),\r\n          secondToTime(tankTimes[\"ttime4\"]),\r\n          secondToTime(tankTimes[\"ttime5\"]),\r\n          secondToTime(tankTimes[\"ttime6\"]),\r\n          secondToTime(tankTimes[\"ttime7\"]),\r\n          secondToTime(tankTimes[\"ttime8\"]),\r\n        ]);\r\n        setRmrot(tankTimes[\"rm_lot\"]);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        //message.error(\"Fail to get times!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"time-logger-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Input Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowPartID}\r\n      />\r\n      <PartIDModal\r\n        showModal={showPartID}\r\n        setShowModal={setShowPartID}\r\n        partID={partID}\r\n        setPartID={onPartId}\r\n      />\r\n      <TextInputArrayModal\r\n        showModal={showTextInputArrayModal}\r\n        setShowModal={setShowTextInputArrayModal}\r\n        values={tankTemps}\r\n        setValues={updateTankTemps}\r\n        titles={tankTitles}\r\n        title={\"Temperature\"}\r\n        subTitle={\"Please Input Tank Temperature(°F)\"}\r\n        span={6}\r\n      />\r\n      <RecordPhosphateTestInfo\r\n        showModal={showRecordPhosphateTestInfo}\r\n        setShowModal={setShowRecordPhosphateTestInfo}\r\n        partID={partID}\r\n      />\r\n      <Row align={\"middle\"} className=\"time-logger-top-layout\">\r\n        <Col\r\n          flex={\"170px\"}\r\n          className=\"time-logger-top-record-test-info\"\r\n          onClick={() => {\r\n            setShowRecordPhosphateTestInfo(true);\r\n          }}\r\n        >\r\n          {\"Record Test Info\"}\r\n        </Col>\r\n        <Col flex={\"auto\"}>\r\n          <Row>\r\n            <Col span={8}>\r\n              <PartIDInputLayout\r\n                partID={partID}\r\n                setPartID={onPartId}\r\n                setShowInputMode={setShowInputMode}\r\n              />\r\n            </Col>\r\n            <Col span={8}>\r\n              <Row align={\"middle\"} className=\"time-logger-top-rmrot\">\r\n                <Col span={24}>\r\n                  <div className=\"time-logger-top-rmrot-left\">{\"RM LOT#\"}</div>\r\n                  <div className=\"time-logger-top-rmrot-right\">\r\n                    <input\r\n                      className=\"text-input\"\r\n                      value={rmrot}\r\n                      onChange={(e) => setRmrot(e.target.value)}\r\n                      style={{ outlineStyle: \"none\" }}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col span={8}>\r\n              <Row align={\"middle\"} className=\"time-logger-top-oven\">\r\n                <Col flex={\"80px\"}>{titles[0]}</Col>\r\n                <Col\r\n                  flex={\"auto\"}\r\n                  onClick={() => {\r\n                    setSelectedTankIndex(0);\r\n                  }}\r\n                  style={{\r\n                    color: selectedTankIndex === 0 ? \"red\" : \"white\",\r\n                    cursor: \"default\",\r\n                  }}\r\n                >\r\n                  {times[0]}\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"time-logger-content\">\r\n        <Row className=\"time-logger-tanktime-row\">\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <TankTimeWidget\r\n              title={titles[1]}\r\n              times={times}\r\n              temps={temps}\r\n              setTimes={setTimes}\r\n              selectedTankIndex={selectedTankIndex}\r\n              setSelectedTankIndex={setSelectedTankIndex}\r\n              setShowTemperatureModal={setShowTextInputArrayModal}\r\n              index={1}\r\n            />\r\n          </Col>\r\n\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <TankTimeWidget\r\n              title={titles[5]}\r\n              times={times}\r\n              temps={temps}\r\n              setTimes={setTimes}\r\n              selectedTankIndex={selectedTankIndex}\r\n              setSelectedTankIndex={setSelectedTankIndex}\r\n              setShowTemperatureModal={setShowTextInputArrayModal}\r\n              index={5}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"time-logger-tanktime-row\">\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <TankTimeWidget\r\n              title={titles[2]}\r\n              times={times}\r\n              temps={temps}\r\n              setTimes={setTimes}\r\n              selectedTankIndex={selectedTankIndex}\r\n              setSelectedTankIndex={setSelectedTankIndex}\r\n              setShowTemperatureModal={setShowTextInputArrayModal}\r\n              index={2}\r\n            />\r\n          </Col>\r\n\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <TankTimeWidget\r\n              title={titles[6]}\r\n              times={times}\r\n              temps={temps}\r\n              setTimes={setTimes}\r\n              selectedTankIndex={selectedTankIndex}\r\n              setSelectedTankIndex={setSelectedTankIndex}\r\n              setShowTemperatureModal={setShowTextInputArrayModal}\r\n              index={6}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"time-logger-tanktime-row\">\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <TankTimeWidget\r\n              title={titles[3]}\r\n              times={times}\r\n              temps={temps}\r\n              setTimes={setTimes}\r\n              selectedTankIndex={selectedTankIndex}\r\n              setSelectedTankIndex={setSelectedTankIndex}\r\n              setShowTemperatureModal={setShowTextInputArrayModal}\r\n              index={3}\r\n            />\r\n          </Col>\r\n\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <TankTimeWidget\r\n              title={titles[7]}\r\n              times={times}\r\n              temps={temps}\r\n              setTimes={setTimes}\r\n              selectedTankIndex={selectedTankIndex}\r\n              setSelectedTankIndex={setSelectedTankIndex}\r\n              setShowTemperatureModal={setShowTextInputArrayModal}\r\n              index={7}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"time-logger-tanktime-row\">\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <TankTimeWidget\r\n              title={titles[4]}\r\n              times={times}\r\n              temps={temps}\r\n              setTimes={setTimes}\r\n              selectedTankIndex={selectedTankIndex}\r\n              setSelectedTankIndex={setSelectedTankIndex}\r\n              setShowTemperatureModal={setShowTextInputArrayModal}\r\n              index={4}\r\n            />\r\n          </Col>\r\n\r\n          <Col span={12} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <TankTimeWidget\r\n              title={titles[8]}\r\n              times={times}\r\n              temps={temps}\r\n              setTimes={setTimes}\r\n              selectedTankIndex={selectedTankIndex}\r\n              setSelectedTankIndex={setSelectedTankIndex}\r\n              setShowTemperatureModal={setShowTextInputArrayModal}\r\n              index={8}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n      <div className=\"time-logger-bottom\">\r\n        <Row style={{ height: \"70px\" }}>\r\n          <Col span={8}>\r\n            <div\r\n              className=\"time-logger-bottom-button\"\r\n              style={{ marginRight: \"5px\" }}\r\n              onClick={() => {\r\n                onStartClick();\r\n              }}\r\n            >\r\n              {\"Start\"}\r\n            </div>\r\n          </Col>\r\n          <Col span={8} style={{ paddingLeft: \"10px\" }}>\r\n            <div\r\n              className=\"time-logger-bottom-button\"\r\n              onClick={() => {\r\n                onStopClick();\r\n              }}\r\n            >\r\n              {\"Stop\"}\r\n            </div>\r\n          </Col>\r\n          <Col span={8} style={{ paddingLeft: \"10px\" }}>\r\n            <div className=\"time-logger-bottom-button\">{\"Data Log\"}</div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeLoggerLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\MaintenanceTopLayout\\MaintenanceTopLayout.js",["734","735"],"import { Col, Row } from \"antd\";\r\nimport \"./MaintenanceTopLayout.css\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\nimport { appData } from \"services/global\";\r\nimport backIcon from \"../../assets/icons/ic_back_arrow_w.png\";\r\n\r\n\r\n\r\nconst MaintenanceTopLayout = (props) => {\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { pages } = appDataStore;\r\n  const dispatch = useDispatch();\r\n  const onClickBack = () => {\r\n    let newPages = pages;\r\n    newPages.splice(-1);\r\n    appData.pages = newPages;\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"maintenance-top-layout\">\r\n      <Row>\r\n        <Col span={6}>\r\n          <div className=\"maintenance-top-layout-left\">\r\n            <a\r\n              className=\"maintenance-top-layout-menu-button\"\r\n              onClick={() => onClickBack()}\r\n            >\r\n              <img\r\n                className=\"maintenance-top-layout-menu-icon\"\r\n                src={backIcon}\r\n              />\r\n            </a>\r\n\r\n            <div className=\"maintenance-top-layout-title-div\">\r\n              <span className=\"maintenance-top-layout-title\">\r\n                {\"Maintenance\"}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaintenanceTopLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\PaintStationLayout\\PaintStationLayout.js",["736","737","738"],"import { Col, Row, message } from \"antd\";\r\nimport AmbientPaintWidget from \"components/AmbientPaintWidget/AmbientPaintWidget\";\r\nimport CurrentPartProcessingTimeWidget from \"components/CurrentPartProcessingTimeWidget/CurrentPartProcessingTimeWidget\";\r\nimport GoodBadModal from \"components/GoodBadModal/GoodBadModal\";\r\nimport GoodBadWidget from \"components/GoodBadWidget/GoodBadWidget\";\r\nimport UsageWidget from \"components/UsageWidget/UsageWidget\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport PartIDInputLayout from \"layouts/PartIDInputLayout/PartIDInputLayout\";\r\nimport PartIDModal from \"layouts/PartIDModal/PartIDModal\";\r\nimport UserInfoLayout from \"layouts/UserInfoLayout/UserInfoLayout\";\r\nimport moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isSpinning, setAppDataStore } from \"redux/actions/appActions\";\r\nimport {\r\n  apiCallForGetPaintStation,\r\n  apiCallForGetTankTemperature,\r\n  apiCallForPostPaintStation,\r\n} from \"services/apiCall\";\r\nimport {\r\n  appData,\r\n  secondToTime,\r\n  timeToSecond,\r\n  userData,\r\n  factoryData,\r\n} from \"services/global\";\r\nimport \"./PaintStationLayout.css\";\r\nimport TextInputArrayModal from \"components/TextInputArrayModal/TextInputArrayModal\";\r\n\r\nconst PaintStationLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n  const [showPartID, setShowPartID] = useState(false);\r\n  const [partID, setPartID] = useState(\"\");\r\n  const [processingTime, setProcessingTime] = useState(\"00:00:00\");\r\n  const [showInputModal, setShowInputModal] = useState(false);\r\n  const titles = [\r\n    \"Temp1\",\r\n    \"Humidity1\",\r\n    \"Dew Point1\",\r\n    \"Temp2\",\r\n    \"Humidit2\",\r\n    \"Dew Point2\",\r\n  ];\r\n  const [values, setValues] = useState([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);\r\n\r\n  const [before, setBefore] = useState(0);\r\n  const [after, setAfter] = useState(0);\r\n  const [used, setUsed] = useState(0);\r\n\r\n  const [goodParts, setGoodParts] = useState(\"0\");\r\n  const [badParts, setBadParts] = useState(\"0\");\r\n  const [showGoodBadModal, setShowGoodBadModal] = useState(false);\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n\r\n  let timeLastTemperatureData = 0;\r\n\r\n  useEffect(() => {\r\n    setGoodParts(appData.shiftGoodParts);\r\n    setBadParts(appData.shiftBadParts);\r\n  }, [appDataStore.shiftGoodParts, appDataStore.shiftBadParts]);\r\n\r\n  useEffect(() => {\r\n    setUsed(before - after);\r\n  }, [before, after]);\r\n\r\n  const updateGoodParts = (value) => {\r\n    appData.shiftGoodParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const updateBadParts = (value) => {\r\n    appData.shiftBadParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTemperatureData();\r\n    clearInterval(intervalId);\r\n    setIntervalID(setInterval(timer, 1000));\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (timeLastTemperatureData > 3 * 60 * 1000) {\r\n      timeLastTemperatureData = 0;\r\n      getTemperatureData();\r\n    } else {\r\n      timeLastTemperatureData += 1000;\r\n    }\r\n    if (isStarted) {\r\n      setProcessingTime(\r\n        moment(processingTime, \"HH:mm:ss\").add(1, \"seconds\").format(\"HH:mm:ss\")\r\n      );\r\n    }\r\n  }, [tick]);\r\n\r\n  const onPartId = (value) => {\r\n    setPartID(value);\r\n    resetTimers();\r\n    getPartInfo(value);\r\n  };\r\n\r\n  const resetTimers = () => {\r\n    setBefore(\"\");\r\n    setAfter(\"\");\r\n    setUsed(\"\");\r\n    setProcessingTime(\"00:00:00\");\r\n    setIsStarted(false);\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    if (!isStarted) {\r\n      setIsStarted(true);\r\n    }\r\n  };\r\n\r\n  const onStopClick = () => {\r\n    setIsStarted(false);\r\n    reportTimes();\r\n  };\r\n\r\n  const getPartInfo = (value) => {\r\n    if (value === \"\") {\r\n      return;\r\n    }\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      part_id: value,\r\n    };\r\n    dispatch(isSpinning(true));\r\n    apiCallForGetPaintStation(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        let stationInfo = res[\"station\"];\r\n        setProcessingTime(secondToTime(stationInfo[\"processing_time\"]));\r\n        setBefore(stationInfo[\"bitu_wt_before\"]);\r\n        setAfter(stationInfo[\"bitu_wt_after\"]);\r\n        setUsed(stationInfo[\"bitu_used\"]);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to get times!\");\r\n      });\r\n  };\r\n\r\n  const getTemperatureData = () => {\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n    };\r\n    dispatch(isSpinning(true));\r\n    apiCallForGetTankTemperature(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        let sensors = res[\"sensors\"];\r\n        sensors.map((sensor) => {\r\n          let sensorName = sensor[\"sensor_name\"];\r\n          let newValues = [];\r\n          if (sensorName === \"Paint Booth - Internal\") {\r\n            newValues.push(sensor[\"value1\"]);\r\n            newValues.push(sensor[\"value2\"]);\r\n            newValues.push(sensor[\"value3\"]);\r\n          }\r\n\r\n          if (sensorName === \"Paint Booth - Ambient\") {\r\n            newValues.push(sensor[\"value1\"]);\r\n            newValues.push(sensor[\"value2\"]);\r\n            newValues.push(sensor[\"value3\"]);\r\n          }\r\n          setValues(newValues);\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to get times!\");\r\n      });\r\n  };\r\n\r\n  const reportTimes = () => {\r\n    if (partID === \"\") {\r\n      message.warn(\"Please input Part ID to save times.\");\r\n      return;\r\n    }\r\n\r\n    if (factoryData.accountId === \"\") {\r\n      message.warn(\"Please login with customer id\");\r\n      return;\r\n    }\r\n\r\n    if (appData.machineName === \"\") {\r\n      message.warn(\"Please input machine name in settings page\");\r\n      return;\r\n    }\r\n\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      machine_id: appData.machineName,\r\n      created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\") + \".000000\",\r\n      timestamp: Date.now(),\r\n      operator: userData.username_full,\r\n      part_id: partID,\r\n      date: moment().format(\"MM/DD/YYYY\"),\r\n      time: moment().format(\"HH:mm:ss\"),\r\n      processing_time: timeToSecond(processingTime),\r\n      bitu_wt_before: before,\r\n      bitu_wt_after: after,\r\n      bitu_used: used,\r\n      ambient_temp: values[0],\r\n      ambient_humidity: values[1],\r\n      ambient_dewpoint: values[2],\r\n      paintbooth_temp: values[3],\r\n      paintbooth_humidity: values[4],\r\n      paintbooth_dewpoint: values[5],\r\n    };\r\n\r\n    dispatch(isSpinning(true));\r\n    apiCallForPostPaintStation(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        message.success(\"Success to report times!\");\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to report times!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"paint-station-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Input Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowPartID}\r\n      />\r\n      <PartIDModal\r\n        showModal={showPartID}\r\n        setShowModal={setShowPartID}\r\n        partID={partID}\r\n        setPartID={onPartId}\r\n      />\r\n      <GoodBadModal\r\n        goodParts={goodParts}\r\n        badParts={badParts}\r\n        setGoodParts={updateGoodParts}\r\n        setBadParts={updateBadParts}\r\n        showModal={showGoodBadModal}\r\n        setShowModal={setShowGoodBadModal}\r\n      />\r\n      <TextInputArrayModal\r\n        showModal={showInputModal}\r\n        setShowModal={setShowInputModal}\r\n        values={values}\r\n        setValues={setValues}\r\n        titles={titles}\r\n        title={\"Temperature & Humidity & Dew Point\"}\r\n        subTitle={\r\n          \"Please input Temperatures(°F), Humidities(%) and Dew Points(°F).\"\r\n        }\r\n        span={8}\r\n      />\r\n      <div className=\"paint-station-title\">{\"PAINT STATION\"}</div>\r\n      <div className=\"paint-station-part-id\">\r\n        <PartIDInputLayout\r\n          partID={partID}\r\n          setPartID={onPartId}\r\n          setShowInputMode={setShowInputMode}\r\n        />\r\n      </div>\r\n      <div className=\"paint-station-user-info\">\r\n        <UserInfoLayout />\r\n      </div>\r\n      <div className=\"paint-station-content\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <CurrentPartProcessingTimeWidget\r\n              time={processingTime}\r\n              setTime={setProcessingTime}\r\n              onStartClick={onStartClick}\r\n              onStopClick={onStopClick}\r\n            />\r\n            <Row style={{ marginTop: \"20px\" }}>\r\n              <Col\r\n                span={12}\r\n                onClick={() => {\r\n                  setShowInputModal(true);\r\n                }}\r\n              >\r\n                <AmbientPaintWidget\r\n                  title={\"Ambient\"}\r\n                  temp={values[0]}\r\n                  hum={values[1]}\r\n                  dew={values[2]}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={12}\r\n                onClick={() => {\r\n                  setShowInputModal(true);\r\n                }}\r\n              >\r\n                <AmbientPaintWidget\r\n                  title={\"Paint Booth\"}\r\n                  temp={values[3]}\r\n                  hum={values[4]}\r\n                  dew={values[5]}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col span={12} style={{ paddingLeft: \"5px\" }}>\r\n            <UsageWidget\r\n              title={\"Bitumen Usage\"}\r\n              unit={\"oz\"}\r\n              before={before}\r\n              setBefore={setBefore}\r\n              after={after}\r\n              setAfter={setAfter}\r\n              used={used}\r\n              setUsed={setUsed}\r\n            />\r\n            <Row style={{ marginTop: \"20px\" }}>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={0}\r\n                  value={goodParts}\r\n                  setValue={updateGoodParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={1}\r\n                  value={badParts}\r\n                  setValue={updateBadParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaintStationLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\BlastStationLayout\\BlastStationLayout.js",["739","740"],"import { Col, Row, message } from \"antd\";\r\nimport CurrentPartProcessingTimeWidget from \"components/CurrentPartProcessingTimeWidget/CurrentPartProcessingTimeWidget\";\r\nimport GoodBadModal from \"components/GoodBadModal/GoodBadModal\";\r\nimport GoodBadWidget from \"components/GoodBadWidget/GoodBadWidget\";\r\nimport UsageWidget from \"components/UsageWidget/UsageWidget\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport PartIDInputLayout from \"layouts/PartIDInputLayout/PartIDInputLayout\";\r\nimport PartIDModal from \"layouts/PartIDModal/PartIDModal\";\r\nimport UserInfoLayout from \"layouts/UserInfoLayout/UserInfoLayout\";\r\nimport moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isSpinning, setAppDataStore } from \"redux/actions/appActions\";\r\nimport { apiCallForGetBlastStation, apiCallForPostBlastStation } from \"services/apiCall\";\r\nimport { appData, secondToTime, timeToSecond, userData, factoryData } from \"services/global\";\r\nimport \"./BlastStationLayout.css\";\r\n\r\nconst BlastStationLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n  const [showPartID, setShowPartID] = useState(false);\r\n  const [partID, setPartID] = useState(\"\");\r\n  const [processingTime, setProcessingTime] = useState(\"00:00:00\");\r\n\r\n  const [before, setBefore] = useState(0);\r\n  const [after, setAfter] = useState(0);\r\n  const [used, setUsed] = useState(0);\r\n\r\n  const [goodParts, setGoodParts] = useState(\"0\");\r\n  const [badParts, setBadParts] = useState(\"0\");\r\n  const [showGoodBadModal, setShowGoodBadModal] = useState(false);\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setGoodParts(appData.shiftGoodParts);\r\n    setBadParts(appData.shiftBadParts);\r\n  }, [appDataStore.shiftGoodParts, appDataStore.shiftBadParts]);\r\n\r\n  useEffect(() => {\r\n    setUsed(before - after);\r\n  }, [before, after]);\r\n\r\n  const updateGoodParts = (value) => {\r\n    appData.shiftGoodParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const updateBadParts = (value) => {\r\n    appData.shiftBadParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isStarted) {\r\n      setProcessingTime(\r\n        moment(processingTime, \"HH:mm:ss\").add(1, \"seconds\").format(\"HH:mm:ss\")\r\n      );\r\n    }\r\n  }, [tick]);\r\n\r\n\r\n  const onPartId = (value) => {\r\n    setPartID(value);\r\n    resetTimers();\r\n    getPartInfo(value);\r\n  };\r\n\r\n  const resetTimers = () => {\r\n    setBefore(\"\");\r\n    setAfter(\"\");\r\n    setUsed(\"\");\r\n    setProcessingTime(\"00:00:00\");\r\n    setIsStarted(false);\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    if (!isStarted) {\r\n\r\n      // Clear Old Timer if exists\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n      }\r\n\r\n      setIntervalID(setInterval(timer, 1000));\r\n      setIsStarted(true);\r\n    }\r\n  };\r\n\r\n  const onStopClick = () => {\r\n    clearInterval(intervalId);\r\n    setIsStarted(false);\r\n    reportTimes();\r\n  };\r\n\r\n  const getPartInfo = (value) => {\r\n    if (value === \"\") {\r\n      return;\r\n    }\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      part_id: value,\r\n    };\r\n    dispatch(isSpinning(true));\r\n    apiCallForGetBlastStation(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        let stationInfo = res[\"station\"];\r\n        setProcessingTime(secondToTime(stationInfo[\"processing_time\"]));\r\n        setBefore(stationInfo[\"media_wt_before\"]);\r\n        setAfter(stationInfo[\"media_wt_after\"]);\r\n        setUsed(stationInfo[\"media_used\"]);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        //message.error(\"Fail to get times!\");\r\n      });\r\n  };\r\n\r\n  const reportTimes = () => {\r\n    if (partID === \"\") {\r\n      message.warn(\"Please input Part ID to save times.\");\r\n      return;\r\n    }\r\n\r\n    if (factoryData.accountId === \"\") {\r\n      message.warn(\"Please login with customer id\");\r\n      return;\r\n    }\r\n\r\n    if (appData.machineName === \"\") {\r\n      message.warn(\"Please input machine name in settings page\");\r\n      return;\r\n    }\r\n\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      machine_id: appData.machineName,\r\n      created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\") + \".000000\",\r\n      timestamp: Date.now(),\r\n      operator: userData.username_full,\r\n      part_id: partID,\r\n      date: moment().format(\"MM/DD/YYYY\"),\r\n      time: moment().format(\"HH:mm:ss\"),\r\n      processing_time: timeToSecond(processingTime),\r\n      media_wt_before: before,\r\n      media_wt_after: after,\r\n      media_used: used,\r\n    };\r\n\r\n    dispatch(isSpinning(true));\r\n    apiCallForPostBlastStation(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        message.success(\"Success to report times!\");\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to report times!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"blast-station-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Input Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowPartID}\r\n      />\r\n      <PartIDModal\r\n        showModal={showPartID}\r\n        setShowModal={setShowPartID}\r\n        partID={partID}\r\n        setPartID={onPartId}\r\n      />\r\n      <GoodBadModal\r\n        goodParts={goodParts}\r\n        badParts={badParts}\r\n        setGoodParts={updateGoodParts}\r\n        setBadParts={updateBadParts}\r\n        showModal={showGoodBadModal}\r\n        setShowModal={setShowGoodBadModal}\r\n      />\r\n      <div className=\"blast-station-title\">{\"BLAST STATION\"}</div>\r\n      <div className=\"blast-station-part-id\">\r\n        <PartIDInputLayout\r\n          partID={partID}\r\n          setPartID={onPartId}\r\n          setShowInputMode={setShowInputMode}\r\n        />\r\n      </div>\r\n      <div className=\"blast-station-user-info\">\r\n        <UserInfoLayout />\r\n      </div>\r\n      <div className=\"blast-station-content\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <CurrentPartProcessingTimeWidget\r\n              time={processingTime}\r\n              setTime={setProcessingTime}\r\n              onStartClick={onStartClick}\r\n              onStopClick={onStopClick}\r\n            />\r\n          </Col>\r\n          <Col span={12} style={{ paddingLeft: \"5px\" }}>\r\n            <UsageWidget\r\n              title={\"Blast Media Usage\"}\r\n              unit={\"lbs\"}\r\n              before={before}\r\n              setBefore={setBefore}\r\n              after={after}\r\n              setAfter={setAfter}\r\n              used={used}\r\n              setUsed={setUsed}\r\n            />\r\n            <Row style={{ marginTop: \"20px\" }}>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={0}\r\n                  value={goodParts}\r\n                  setValue={updateGoodParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={1}\r\n                  value={badParts}\r\n                  setValue={updateBadParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlastStationLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\AssemblyStation137Layout\\AssemblyStation137Layout.js",["741","742","743"],"import { Col, Radio, Row, message } from \"antd\";\r\nimport CurrentPartProcessingTimeWidget from \"components/CurrentPartProcessingTimeWidget/CurrentPartProcessingTimeWidget\";\r\nimport GoodBadModal from \"components/GoodBadModal/GoodBadModal\";\r\nimport GoodBadWidget from \"components/GoodBadWidget/GoodBadWidget\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport PartIDInputLayout from \"layouts/PartIDInputLayout/PartIDInputLayout\";\r\nimport PartIDModal from \"layouts/PartIDModal/PartIDModal\";\r\nimport UserInfoLayout from \"layouts/UserInfoLayout/UserInfoLayout\";\r\nimport { useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport \"./AssemblyStation137Layout.css\";\r\nimport { isSpinning, setAppDataStore } from \"redux/actions/appActions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { appData, secondToTime, timeToSecond, userData, factoryData } from \"services/global\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  apiCallForGetAssembly1Station,\r\n  apiCallForPostAssembly1Station,\r\n} from \"services/apiCall\";\r\nimport TextInputArrayModal from \"components/TextInputArrayModal/TextInputArrayModal\";\r\n\r\nconst AssemblyStation137Layout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n  const [showPartID, setShowPartID] = useState(false);\r\n  const [partID, setPartID] = useState(\"\");\r\n\r\n  const [goodParts, setGoodParts] = useState(\"0\");\r\n  const [badParts, setBadParts] = useState(\"0\");\r\n  const [showGoodBadModal, setShowGoodBadModal] = useState(false);\r\n\r\n  const [inputMode, setInputMode] = useState(\"0\");\r\n  const [processingTime, setProcessingTime] = useState(\"00:00:00\");\r\n  const [notes, setNotes] = useState(\"\");\r\n\r\n  const [showInputModal1, setShowInputModal1] = useState(false);\r\n  const [showInputModal2, setShowInputModal2] = useState(false);\r\n\r\n  const titles1 = [\r\n    \"case_number\",\r\n    \"serial\",\r\n    \"shipment\",\r\n    \"empty_wt\",\r\n    \"center_grav\",\r\n    \"aft_ass\",\r\n    \"aft_retain_ring\",\r\n    \"shipping_cover\",\r\n    \"shipping_plug\",\r\n    \"end_cap\",\r\n    \"lugs\",\r\n    \"retain_ring\",\r\n    \"adapt_ring\",\r\n    \"impact_ring\",\r\n    \"total_wt\",\r\n    \"ass_center_grav\",\r\n  ];\r\n  const [values1, setValues1] = useState([\r\n    \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\",\r\n    \"0.0\",\r\n  ]);\r\n\r\n  const titles2 = [\r\n    \"degrease_sol\",\r\n    \"corrosin_prev_compound\",\r\n    \"ship_cover_oring\",\r\n    \"Oring_grease\",\r\n    \"protective_end_cap\",\r\n    \"end_cap_set_screw\",\r\n    \"lifting_lug_bolt\",\r\n    \"lifting_lug_washer\",\r\n    \"stencil_ink\",\r\n  ];\r\n  const [values2, setValues2] = useState([\r\n    \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.0\",\r\n  ]);\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setGoodParts(appData.shiftGoodParts);\r\n    setBadParts(appData.shiftBadParts);\r\n  }, [appDataStore.shiftGoodParts, appDataStore.shiftBadParts]);\r\n\r\n  const updateGoodParts = (value) => {\r\n    appData.shiftGoodParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const updateBadParts = (value) => {\r\n    appData.shiftBadParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isStarted) {\r\n      setProcessingTime(\r\n        moment(processingTime, \"HH:mm:ss\").add(1, \"seconds\").format(\"HH:mm:ss\")\r\n      );\r\n    }\r\n  }, [tick]);\r\n\r\n  const onPartId = (value) => {\r\n    setPartID(value);\r\n    resetTimers();\r\n    getPartInfo(value);\r\n  };\r\n\r\n  const resetTimers = () => {\r\n    setNotes(\"\");\r\n    setProcessingTime(\"00:00:00\");\r\n    setIsStarted(false);\r\n\r\n    const updatedValue1 = values1.map(() => \"0.0\");\r\n    setValues1(updatedValue1);\r\n\r\n    const updateValue2 = values2.map(() => \"0.0\");\r\n    setValues2(updateValue2);\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    if (!isStarted) {\r\n      setIntervalID(setInterval(timer, 1000));\r\n      setIsStarted(true);\r\n    }\r\n  };\r\n\r\n  const onStopClick = () => {\r\n    clearInterval(intervalId);\r\n    setIsStarted(false);\r\n    reportTimes();\r\n  };\r\n\r\n  const getPartInfo = (value) => {\r\n    if (value === \"\") {\r\n      return;\r\n    }\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      part_id: value,\r\n    };\r\n    dispatch(isSpinning(true));\r\n    apiCallForGetAssembly1Station(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        let stationInfo = res[\"station\"];\r\n        setProcessingTime(secondToTime(stationInfo[\"processing_time\"]));\r\n        setValues1([\r\n          stationInfo[\"case_number\"],\r\n          stationInfo[\"serial\"],\r\n          stationInfo[\"shipment\"],\r\n          stationInfo[\"empty_wt\"],\r\n          stationInfo[\"center_grav\"],\r\n          stationInfo[\"aft_ass\"],\r\n          stationInfo[\"aft_retain_ring\"],\r\n          stationInfo[\"shipping_cover\"],\r\n          stationInfo[\"shipping_plug\"],\r\n          stationInfo[\"end_cap\"],\r\n          stationInfo[\"lugs\"],\r\n          stationInfo[\"retain_ring\"],\r\n          stationInfo[\"adapt_ring\"],\r\n          stationInfo[\"impact_ring\"],\r\n          stationInfo[\"total_wt\"],\r\n          stationInfo[\"ass_center_grav\"],\r\n        ]);\r\n\r\n        setValues2([\r\n          stationInfo[\"degrease_sol\"],\r\n          stationInfo[\"corrosin_prev_compound\"],\r\n          stationInfo[\"ship_cover_oring\"],\r\n          stationInfo[\"oring_grease\"],\r\n          stationInfo[\"protective_end_cap\"],\r\n          stationInfo[\"end_cap_set_screw\"],\r\n          stationInfo[\"lifting_lug_bolt\"],\r\n          stationInfo[\"lifting_lug_washer\"],\r\n          stationInfo[\"stencil_ink\"],\r\n        ]);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        //message.error(\"Fail to get times!\");\r\n      });\r\n  };\r\n\r\n  const reportTimes = () => {\r\n    if (partID === \"\") {\r\n      message.warn(\"Please input Part ID to save times.\");\r\n      return;\r\n    }\r\n\r\n    if (factoryData.accountId === \"\") {\r\n      message.warn(\"Please login with customer id\");\r\n      return;\r\n    }\r\n\r\n    if (appData.machineName === \"\") {\r\n      message.warn(\"Please input machine name in settings page\");\r\n      return;\r\n    }\r\n\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      machine_id: appData.machineName,\r\n      created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\") + \".000000\",\r\n      timestamp: Date.now(),\r\n      operator: userData.username_full,\r\n      part_id: partID,\r\n      date: moment().format(\"MM/DD/YYYY\"),\r\n      time: moment().format(\"HH:mm:ss\"),\r\n      processing_time: timeToSecond(processingTime),\r\n      case_number: values1[0],\r\n      serial: values1[1],\r\n      shipment: values1[2],\r\n      empty_wt: values1[3],\r\n      center_grav: values1[4],\r\n      aft_ass: values1[5],\r\n      aft_retain_ring: values1[6],\r\n      shipping_cover: values1[7],\r\n      shipping_plug: values1[8],\r\n      end_cap: values1[9],\r\n      lugs: values1[10],\r\n      retain_ring: values1[11],\r\n      adapt_ring: values1[12],\r\n      impact_ring: values1[13],\r\n      total_wt: values1[14],\r\n      ass_center_grav: values1[15],\r\n      degrease_sol: values2[0],\r\n      corrosin_prev_compound: values2[1],\r\n      ship_cover_oring: values2[2],\r\n      oring_grease: values2[3],\r\n      protective_end_cap: values2[4],\r\n      end_cap_set_screw: values2[5],\r\n      lifting_lug_bolt: values2[6],\r\n      lifting_lug_washer: values2[7],\r\n      stencil_ink: values2[8],\r\n    };\r\n\r\n    dispatch(isSpinning(true));\r\n    apiCallForPostAssembly1Station(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        message.success(\"Success to report times!\");\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to report times!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"assembly137-station-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Input Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowPartID}\r\n      />\r\n      <PartIDModal\r\n        showModal={showPartID}\r\n        setShowModal={setShowPartID}\r\n        partID={partID}\r\n        setPartID={onPartId}\r\n      />\r\n      <GoodBadModal\r\n        goodParts={goodParts}\r\n        badParts={badParts}\r\n        setGoodParts={updateGoodParts}\r\n        setBadParts={updateBadParts}\r\n        showModal={showGoodBadModal}\r\n        setShowModal={setShowGoodBadModal}\r\n      />\r\n      <TextInputArrayModal\r\n        showModal={showInputModal1}\r\n        setShowModal={setShowInputModal1}\r\n        values={values1}\r\n        setValues={setValues1}\r\n        titles={titles1}\r\n        title={\"Assembly Usage 1\"}\r\n        subTitle={\"Please input Assembly Usage 1.\"}\r\n        span={6}\r\n      />\r\n      <TextInputArrayModal\r\n        showModal={showInputModal2}\r\n        setShowModal={setShowInputModal2}\r\n        values={values2}\r\n        setValues={setValues2}\r\n        titles={titles2}\r\n        title={\"Assembly Usage 2\"}\r\n        subTitle={\"Please input Assembly Usage 2.\"}\r\n        span={8}\r\n      />\r\n      <div className=\"assembly137-station-title\">\r\n        {\"ASSEMBLY STATION - BLU 137\"}\r\n      </div>\r\n      <div className=\"assembly3-station-top-left\">\r\n        <div className=\"assembly3-station-part-id\">\r\n          <PartIDInputLayout\r\n            partID={partID}\r\n            setPartID={onPartId}\r\n            setShowInputMode={setShowInputMode}\r\n          />\r\n        </div>\r\n        <div className=\"assembly3-station-user-info\">\r\n          <UserInfoLayout />\r\n        </div>\r\n      </div>\r\n      <div className=\"assembly3-station-top-right\">\r\n        <Radio.Group\r\n          // onChange={updateValue}\r\n          value={inputMode}\r\n          className=\"assembly3-station-option\"\r\n          onChange={(e) => {\r\n            setInputMode(e.target.value);\r\n          }}\r\n        >\r\n          <Row align={\"middle\"} style={{ marginTop: \"10px\" }}>\r\n            <Col span={24}>\r\n              <Radio value={\"0\"} style={{ color: \"white\" }}>\r\n                Barcode\r\n              </Radio>\r\n            </Col>\r\n            <Col span={24}>\r\n              <Radio value={\"1\"} style={{ color: \"white\" }}>\r\n                Manual\r\n              </Radio>\r\n            </Col>\r\n          </Row>\r\n        </Radio.Group>\r\n      </div>\r\n      <div className=\"assembly137-station-content\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <CurrentPartProcessingTimeWidget\r\n              time={processingTime}\r\n              setTime={setProcessingTime}\r\n              onStartClick={onStartClick}\r\n              onStopClick={onStopClick}\r\n            />\r\n          </Col>\r\n          <Col span={12} style={{ paddingLeft: \"5px\" }}>\r\n            <Row>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={0}\r\n                  value={goodParts}\r\n                  setValue={updateGoodParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={1}\r\n                  value={badParts}\r\n                  setValue={updateBadParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <div className=\"assembly137-station-info\">\r\n          <div className=\"assembly137-station-info-title\">\r\n            {\"Assembly Info\"}\r\n          </div>\r\n          <Row align={\"middle\"} className=\"assembly137-station-info-content\">\r\n            <Col\r\n              span={12}\r\n              onClick={() => {\r\n                setShowInputModal1(true);\r\n              }}\r\n            >\r\n              <div\r\n                className=\"assembly137-station-info-button\"\r\n                style={{ float: \"right\" }}\r\n              >\r\n                {\"Assembly Usage1\"}\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              span={12}\r\n              onClick={() => {\r\n                setShowInputModal2(true);\r\n              }}\r\n            >\r\n              <div className=\"assembly137-station-info-button\">\r\n                {\"Assembly Usage2\"}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssemblyStation137Layout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\AssemblyStation3Layout\\AssemblyStation3Layout.js",["744","745","746"],"import { Col, Radio, Row, message } from \"antd\";\r\nimport CurrentPartProcessingTimeWidget from \"components/CurrentPartProcessingTimeWidget/CurrentPartProcessingTimeWidget\";\r\nimport GoodBadModal from \"components/GoodBadModal/GoodBadModal\";\r\nimport GoodBadWidget from \"components/GoodBadWidget/GoodBadWidget\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport PartIDInputLayout from \"layouts/PartIDInputLayout/PartIDInputLayout\";\r\nimport PartIDModal from \"layouts/PartIDModal/PartIDModal\";\r\nimport UserInfoLayout from \"layouts/UserInfoLayout/UserInfoLayout\";\r\nimport { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport \"./AssemblyStation3Layout.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isSpinning, setAppDataStore } from \"redux/actions/appActions\";\r\nimport {\r\n  appData,\r\n  secondToTime,\r\n  timeToSecond,\r\n  userData,\r\n  factoryData,\r\n} from \"services/global\";\r\nimport {\r\n  apiCallForGetAssembly3Station,\r\n  apiCallForPostAssembly3Station,\r\n} from \"services/apiCall\";\r\nimport TextInputArrayModal from \"components/TextInputArrayModal/TextInputArrayModal\";\r\n\r\nconst AssemblyStation3Layout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n  const [showPartID, setShowPartID] = useState(false);\r\n  const [partID, setPartID] = useState(\"\");\r\n\r\n  const [goodParts, setGoodParts] = useState(\"0\");\r\n  const [badParts, setBadParts] = useState(\"0\");\r\n  const [showGoodBadModal, setShowGoodBadModal] = useState(false);\r\n\r\n  const [inputMode, setInputMode] = useState(\"0\");\r\n  const [processingTime, setProcessingTime] = useState(\"00:00:00\");\r\n  const [notes, setNotes] = useState(\"\");\r\n\r\n  const [showInputModal, setShowInputModal] = useState(false);\r\n\r\n  const titles = [\r\n    \"mil_d_16791_non_ionic_detergent_lot\",\r\n    \"923as829_drive_lok_pins_lot\",\r\n    \"ams_s_8802_polysulfide_lot\",\r\n    \"4512421_base_plate_lt\",\r\n    \"4512422_abs_insert_lot\",\r\n    \"4512423_steel_insert_lot\",\r\n  ];\r\n\r\n  const [values, setValues] = useState([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setGoodParts(appData.shiftGoodParts);\r\n    setBadParts(appData.shiftBadParts);\r\n  }, [appDataStore.shiftGoodParts, appDataStore.shiftBadParts]);\r\n\r\n  const updateGoodParts = (value) => {\r\n    appData.shiftGoodParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const updateBadParts = (value) => {\r\n    appData.shiftBadParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isStarted) {\r\n      setProcessingTime(\r\n        moment(processingTime, \"HH:mm:ss\").add(1, \"seconds\").format(\"HH:mm:ss\")\r\n      );\r\n    }\r\n  }, [tick]);\r\n\r\n  const onPartId = (value) => {\r\n    setPartID(value);\r\n    resetTimers();\r\n    getPartInfo(value);\r\n  };\r\n\r\n  const resetTimers = () => {\r\n    setNotes(\"\");\r\n    setProcessingTime(\"00:00:00\");\r\n    setIsStarted(false);\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    if (!isStarted) {\r\n      // Clear Old Timer if exists\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n      }\r\n\r\n      setIntervalID(setInterval(timer, 1000));\r\n      setIsStarted(true);\r\n    }\r\n  };\r\n\r\n  const onStopClick = () => {\r\n    clearInterval(intervalId);\r\n    setIsStarted(false);\r\n    reportTimes();\r\n  };\r\n\r\n  const getPartInfo = (value) => {\r\n    if (value === \"\") {\r\n      return;\r\n    }\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      part_id: value,\r\n    };\r\n    dispatch(isSpinning(true));\r\n    apiCallForGetAssembly3Station(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        let stationInfo = res[\"station\"];\r\n        setProcessingTime(secondToTime(stationInfo[\"processing_time\"]));\r\n        setValues([\r\n          stationInfo[\"mil_d_16791_non_ionic_detergent_lot\"],\r\n          stationInfo[\"923as829_drive_lok_pins_lot\"],\r\n          stationInfo[\"ams_s_8802_polysulfide_lot\"],\r\n          stationInfo[\"4512421_base_plate_lt\"],\r\n          stationInfo[\"4512422_abs_insert_lot\"],\r\n          stationInfo[\"4512423_steel_insert_lot\"],\r\n        ]);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        //message.error(\"Fail to get times!\");\r\n      });\r\n  };\r\n\r\n  const reportTimes = () => {\r\n    if (partID === \"\") {\r\n      message.warn(\"Please input Part ID to save times.\");\r\n      return;\r\n    }\r\n\r\n    if (factoryData.accountId === \"\") {\r\n      message.warn(\"Please login with customer id\");\r\n      return;\r\n    }\r\n\r\n    if (appData.machineName === \"\") {\r\n      message.warn(\"Please input machine name in settings page\");\r\n      return;\r\n    }\r\n\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      machine_id: appData.machineName,\r\n      created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\") + \".000000\",\r\n      timestamp: Date.now(),\r\n      operator: userData.username_full,\r\n      part_id: partID,\r\n      date: moment().format(\"MM/DD/YYYY\"),\r\n      time: moment().format(\"HH:mm:ss\"),\r\n      processing_time: timeToSecond(processingTime),\r\n      p_mil_d_16791_non_ionic_detergent_lot: values[0],\r\n      p_923as829_drive_lok_pins_lot: values[1],\r\n      p_ams_s_8802_polysulfide_lot: values[2],\r\n      p_4512421_base_plate_lt: values[3],\r\n      p_4512422_abs_insert_lot: values[4],\r\n      p_4512423_steel_insert_lot: values[5],\r\n    };\r\n\r\n    dispatch(isSpinning(true));\r\n    apiCallForPostAssembly3Station(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        message.success(\"Success to report times!\");\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to report times!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"assembly3-station-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Input Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowPartID}\r\n      />\r\n      <PartIDModal\r\n        showModal={showPartID}\r\n        setShowModal={setShowPartID}\r\n        partID={partID}\r\n        setPartID={onPartId}\r\n      />\r\n      <GoodBadModal\r\n        goodParts={goodParts}\r\n        badParts={badParts}\r\n        setGoodParts={updateGoodParts}\r\n        setBadParts={updateBadParts}\r\n        showModal={showGoodBadModal}\r\n        setShowModal={setShowGoodBadModal}\r\n      />\r\n      <TextInputArrayModal\r\n        showModal={showInputModal}\r\n        setShowModal={setShowInputModal}\r\n        values={values}\r\n        setValues={setValues}\r\n        titles={titles}\r\n        title={\"Assembly Usage\"}\r\n        subTitle={\"Please input Assembly Usage.\"}\r\n        span={8}\r\n      />\r\n      <div className=\"assembly3-station-title\">{\"SUB ASSEMBLY STATION\"}</div>\r\n      <div className=\"assembly3-station-top-left\">\r\n        <div className=\"assembly3-station-part-id\">\r\n          <PartIDInputLayout\r\n            partID={partID}\r\n            setPartID={onPartId}\r\n            setShowInputMode={setShowInputMode}\r\n          />\r\n        </div>\r\n        <div className=\"assembly3-station-user-info\">\r\n          <UserInfoLayout />\r\n        </div>\r\n      </div>\r\n      <div className=\"assembly3-station-top-right\">\r\n        <Radio.Group\r\n          // onChange={updateValue}\r\n          value={inputMode}\r\n          className=\"assembly3-station-option\"\r\n          onChange={(e) => {\r\n            setInputMode(e.target.value);\r\n          }}\r\n        >\r\n          <Row align={\"middle\"} style={{ marginTop: \"10px\" }}>\r\n            <Col span={24}>\r\n              <Radio value={\"0\"} style={{ color: \"white\" }}>\r\n                Barcode\r\n              </Radio>\r\n            </Col>\r\n            <Col span={24}>\r\n              <Radio value={\"1\"} style={{ color: \"white\" }}>\r\n                Manual\r\n              </Radio>\r\n            </Col>\r\n          </Row>\r\n        </Radio.Group>\r\n      </div>\r\n\r\n      <div className=\"assembly3-station-content\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <CurrentPartProcessingTimeWidget\r\n              time={processingTime}\r\n              setTime={setProcessingTime}\r\n              onStartClick={onStartClick}\r\n              onStopClick={onStopClick}\r\n            />\r\n          </Col>\r\n          <Col span={12} style={{ paddingLeft: \"5px\" }}>\r\n            <Row>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={0}\r\n                  value={goodParts}\r\n                  setValue={updateGoodParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={1}\r\n                  value={badParts}\r\n                  setValue={updateBadParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <div className=\"assembly3-station-info\">\r\n          <div className=\"assembly3-station-info-title\">{\"Assembly Info\"}</div>\r\n          <Row align={\"middle\"} className=\"assembly3-station-info-content\">\r\n            <Col\r\n              span={24}\r\n              style={{ cursor: \"default\" }}\r\n              onClick={() => {\r\n                setShowInputModal(true);\r\n              }}\r\n            >\r\n              <div className=\"assembly3-station-info-button\">\r\n                {\"Assembly Info Details\"}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssemblyStation3Layout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\AssemblyStation136Layout\\AssemblyStation136Layout.js",["747","748","749"],"import { Col, Radio, Row, message } from \"antd\";\r\nimport CurrentPartProcessingTimeWidget from \"components/CurrentPartProcessingTimeWidget/CurrentPartProcessingTimeWidget\";\r\nimport GoodBadModal from \"components/GoodBadModal/GoodBadModal\";\r\nimport GoodBadWidget from \"components/GoodBadWidget/GoodBadWidget\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport PartIDInputLayout from \"layouts/PartIDInputLayout/PartIDInputLayout\";\r\nimport PartIDModal from \"layouts/PartIDModal/PartIDModal\";\r\nimport UserInfoLayout from \"layouts/UserInfoLayout/UserInfoLayout\";\r\nimport { useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport \"./AssemblyStation136Layout.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  appData,\r\n  secondToTime,\r\n  timeToSecond,\r\n  userData,\r\n  factoryData,\r\n} from \"services/global\";\r\nimport { isSpinning, setAppDataStore } from \"redux/actions/appActions\";\r\nimport {\r\n  apiCallForGetBlu136Assembly,\r\n  apiCallForPostBlu136Assembly,\r\n} from \"services/apiCall\";\r\nimport { useEffect } from \"react\";\r\nimport TextInputArrayModal from \"components/TextInputArrayModal/TextInputArrayModal\";\r\n\r\nconst AssemblyStation136Layout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n  const [showPartID, setShowPartID] = useState(false);\r\n  const [partID, setPartID] = useState(\"\");\r\n\r\n  const [goodParts, setGoodParts] = useState(\"0\");\r\n  const [badParts, setBadParts] = useState(\"0\");\r\n  const [showGoodBadModal, setShowGoodBadModal] = useState(false);\r\n\r\n  const [inputMode, setInputMode] = useState(\"0\");\r\n\r\n  const [processingTime, setProcessingTime] = useState(\"00:00:00\");\r\n  const [notes, setNotes] = useState(\"\");\r\n\r\n  const [showInputModal1, setShowInputModal1] = useState(false);\r\n  const [showInputModal2, setShowInputModal2] = useState(false);\r\n  const [showInputModal3, setShowInputModal3] = useState(false);\r\n  const [showInputModal4, setShowInputModal4] = useState(false);\r\n\r\n  const titles1 = [\r\n    \"base_plat11\",\r\n    \"20199266_fwd_fuze_line\",\r\n    \"20199367_aft_fuz_line\",\r\n    \"1265394_fit_chrg_tube\",\r\n    \"1252629_washer_lock_iternal_tooth2\",\r\n    \"4902493_retainer_fuz_liner_aft\",\r\n    \"1123646_nut_fit_charg_tube2\",\r\n    \"20199361_fwd_chrg_tube\",\r\n    \"20199361_030_aft_charg_tube\",\r\n  ];\r\n\r\n  const [values1, setValues1] = useState([\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n  ]);\r\n\r\n  const titles2 = [\r\n    \"4512424_cap_shipping\",\r\n    \"nas1149f0832p_flat_washer8\",\r\n    \"nas568_41_hex_head_bolt8\",\r\n    \"x20173251_lug_shipping2\",\r\n    \"20199362_charge_tube_plug\",\r\n    \"nasm90725_31_screw_cap_hex_head2\",\r\n    \"ms35338_45_washer_lock_sprg4\",\r\n    \"mil_dtl_450_bituminous\",\r\n    \"as3582_236_o_ring_small2\",\r\n  ];\r\n\r\n  const [values2, setValues2] = useState([\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n  ]);\r\n\r\n  const titles3 = [\r\n    \"923as694_o_ring_rubber\",\r\n    \"ms51964_69_set_screw1\",\r\n    \"a_a_208_ink_marking_stencil\",\r\n    \"mil_prf_63460_gun_oil\",\r\n    \"mil_prf_16173_corrision_resistant_grease\",\r\n    \"sae_as8660_silicone_lubricant\",\r\n    \"mil_prf_680_degreasing_solvent\",\r\n    \"shipping_plugs2\",\r\n  ];\r\n\r\n  const [values3, setValues3] = useState([\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n  ]);\r\n\r\n  const titles4 = [\r\n    \"job_at\",\r\n    \"screw_lot6\",\r\n    \"threadlock_271_lot\",\r\n    \"set_screw_lot_6\",\r\n    \"ams_s_8802_lot\",\r\n    \"two_part_polysulfie_sealant\",\r\n  ];\r\n\r\n  const [values4, setValues4] = useState([\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n    \"0.0\",\r\n  ]);\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setGoodParts(appData.shiftGoodParts);\r\n    setBadParts(appData.shiftBadParts);\r\n  }, [appDataStore.shiftGoodParts, appDataStore.shiftBadParts]);\r\n\r\n  const updateGoodParts = (value) => {\r\n    appData.shiftGoodParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const updateBadParts = (value) => {\r\n    appData.shiftBadParts = parseInt(value);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isStarted) {\r\n      setProcessingTime(\r\n        moment(processingTime, \"HH:mm:ss\").add(1, \"seconds\").format(\"HH:mm:ss\")\r\n      );\r\n    }\r\n  }, [tick]);\r\n\r\n  const onPartId = (value) => {\r\n    setPartID(value);\r\n    resetTimers();\r\n    getPartInfo(value);\r\n  };\r\n\r\n  const resetTimers = () => {\r\n    setNotes(\"\");\r\n    setProcessingTime(\"00:00:00\");\r\n    setIsStarted(false);\r\n\r\n    const updatedValues1 = values1.map((number, i) => {\r\n      if (i === 0) {\r\n        return \"\";\r\n      }\r\n      return number;\r\n    });\r\n    setValues1(updatedValues1);\r\n\r\n    const updatedValue4 = values4.map((number, i) => {\r\n      if (i === 0) {\r\n        return \"\";\r\n      }\r\n      return number;\r\n    });\r\n    setValues4(updatedValue4);\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    if (!isStarted) {\r\n      // Clear Old Timer if exists\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n      }\r\n\r\n      setIntervalID(setInterval(timer, 1000));\r\n      setIsStarted(true);\r\n    }\r\n  };\r\n\r\n  const onStopClick = () => {\r\n    clearInterval(intervalId);\r\n    setIsStarted(false);\r\n    reportTimes();\r\n  };\r\n\r\n  const getPartInfo = (value) => {\r\n    if (value === \"\") {\r\n      return;\r\n    }\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      part_id: value,\r\n    };\r\n    dispatch(isSpinning(true));\r\n    apiCallForGetBlu136Assembly(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        let stationInfo = res[\"station\"];\r\n        setProcessingTime(secondToTime(stationInfo[\"processing_time\"]));\r\n        setValues1([\r\n          stationInfo[\"base_plat11\"],\r\n          stationInfo[\"20199266_fwd_fuze_line\"],\r\n          stationInfo[\"20199367_aft_fuz_line\"],\r\n          stationInfo[\"1265394_fit_chrg_tube\"],\r\n          stationInfo[\"1252629_washer_lock_iternal_tooth2\"],\r\n          stationInfo[\"4902493_retainer_fuz_liner_aft\"],\r\n          stationInfo[\"1123646_nut_fit_charg_tube2\"],\r\n          stationInfo[\"20199361_fwd_chrg_tube\"],\r\n          stationInfo[\"20199361_030_aft_charg_tube\"],\r\n        ]);\r\n\r\n        setValues2([\r\n          stationInfo[\"4512424_cap_shipping\"],\r\n          stationInfo[\"nas1149f0832p_flat_washer8\"],\r\n          stationInfo[\"nas568_41_hex_head_bolt8\"],\r\n          stationInfo[\"x20173251_lug_shipping2\"],\r\n          stationInfo[\"20199362_charge_tube_plug\"],\r\n          stationInfo[\"nasm90725_31_screw_cap_hex_head2\"],\r\n          stationInfo[\"ms35338_45_washer_lock_sprg4\"],\r\n          stationInfo[\"mil_dtl_450_bituminous\"],\r\n          stationInfo[\"as3582_236_o_ring_small2\"],\r\n        ]);\r\n\r\n        setValues3([\r\n          stationInfo[\"923as694_o_ring_rubber\"],\r\n          stationInfo[\"ms51964_69_set_screw1\"],\r\n          stationInfo[\"a_a_208_ink_marking_stencil\"],\r\n          stationInfo[\"mil_prf_63460_gun_oil\"],\r\n          stationInfo[\"mil_prf_16173_corrision_resistant_grease\"],\r\n          stationInfo[\"sae_as8660_silicone_lubricant\"],\r\n          stationInfo[\"mil_prf_680_degreasing_solvent\"],\r\n          stationInfo[\"shipping_plugs2\"],\r\n        ]);\r\n\r\n        setValues4([\r\n          stationInfo[\"job_at\"],\r\n          stationInfo[\"screw_lot6\"],\r\n          stationInfo[\"threadlock_271_lot\"],\r\n          stationInfo[\"set_screw_lot_6\"],\r\n          stationInfo[\"ams_s_8802_lot\"],\r\n          stationInfo[\"two_part_polysulfie_sealant\"],\r\n        ]);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        //message.error(\"Fail to get times!\");\r\n      });\r\n  };\r\n\r\n  const reportTimes = () => {\r\n    if (partID === \"\") {\r\n      message.warn(\"Please input Part ID to save times.\");\r\n      return;\r\n    }\r\n\r\n    if (factoryData.accountId === \"\") {\r\n      message.warn(\"Please login with customer id\");\r\n      return;\r\n    }\r\n\r\n    if (appData.machineName === \"\") {\r\n      message.warn(\"Please input machine name in settings page\");\r\n      return;\r\n    }\r\n\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      machine_id: appData.machineName,\r\n      created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\") + \".000000\",\r\n      timestamp: Date.now(),\r\n      operator: userData.username_full,\r\n      part_id: partID,\r\n      date: moment().format(\"MM/DD/YYYY\"),\r\n      time: moment().format(\"HH:mm:ss\"),\r\n      processing_time: timeToSecond(processingTime),\r\n      p_base_plat11: values1[0],\r\n      p_20199266_fwd_fuze_line: values1[1],\r\n      p_20199367_aft_fuz_line: values1[2],\r\n      p_1265394_fit_chrg_tube: values1[3],\r\n      p_1252629_washer_lock_iternal_tooth2: values1[4],\r\n      p_4902493_retainer_fuz_liner_aft: values1[5],\r\n      p_1123646_nut_fit_charg_tube2: values1[6],\r\n      p_20199361_fwd_chrg_tube: values1[7],\r\n      p_20199361_030_aft_charg_tube: values1[8],\r\n      p_4512424_cap_shipping: values2[0],\r\n      p_nas1149f0832p_flat_washer8: values2[1],\r\n      p_nas568_41_hex_head_bolt8: values2[2],\r\n      p_x20173251_lug_shipping2: values2[3],\r\n      p_20199362_charge_tube_plug: values2[4],\r\n      p_nasm90725_31_screw_cap_hex_head2: values2[5],\r\n      p_ms35338_45_washer_lock_sprg4: values2[6],\r\n      p_mil_dtl_450_bituminous: values2[7],\r\n      p_as3582_236_o_ring_small2: values2[8],\r\n      p_923as694_o_ring_rubber: values3[0],\r\n      p_ms51964_69_set_screw1: values3[1],\r\n      p_a_a_208_ink_marking_stencil: values3[2],\r\n      p_mil_prf_63460_gun_oil: values3[3],\r\n      p_mil_prf_16173_corrision_resistant_grease: values3[4],\r\n      p_sae_as8660_silicone_lubricant: values3[5],\r\n      p_mil_prf_680_degreasing_solvent: values3[6],\r\n      p_shipping_plugs2: values3[7],\r\n      p_job_at: values4[0],\r\n      p_screw_lot6: values4[1],\r\n      p_threadlock_271_lot: values4[2],\r\n      p_set_screw_lot_6: values4[3],\r\n      p_ams_s_8802_lot: values4[4],\r\n      p_two_part_polysulfie_sealant: values4[5],\r\n    };\r\n\r\n    dispatch(isSpinning(true));\r\n    apiCallForPostBlu136Assembly(param)\r\n      .then((res) => {\r\n        dispatch(isSpinning(false));\r\n        message.success(\"Success to report times!\");\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to report times!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"assembly136-station-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Input Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowPartID}\r\n      />\r\n      <PartIDModal\r\n        showModal={showPartID}\r\n        setShowModal={setShowPartID}\r\n        partID={partID}\r\n        setPartID={onPartId}\r\n      />\r\n      <GoodBadModal\r\n        goodParts={goodParts}\r\n        badParts={badParts}\r\n        setGoodParts={updateGoodParts}\r\n        setBadParts={updateBadParts}\r\n        showModal={showGoodBadModal}\r\n        setShowModal={setShowGoodBadModal}\r\n      />\r\n      <TextInputArrayModal\r\n        showModal={showInputModal1}\r\n        setShowModal={setShowInputModal1}\r\n        values={values1}\r\n        setValues={setValues1}\r\n        titles={titles1}\r\n        title={\"Assembly Usage 1\"}\r\n        subTitle={\"Please input Assembly Usage 1.\"}\r\n        span={8}\r\n      />\r\n      <TextInputArrayModal\r\n        showModal={showInputModal2}\r\n        setShowModal={setShowInputModal2}\r\n        values={values2}\r\n        setValues={setValues2}\r\n        titles={titles2}\r\n        title={\"Assembly Usage 2\"}\r\n        subTitle={\"Please input Assembly Usage 2.\"}\r\n        span={8}\r\n      />\r\n      <TextInputArrayModal\r\n        showModal={showInputModal3}\r\n        setShowModal={setShowInputModal3}\r\n        values={values3}\r\n        setValues={setValues3}\r\n        titles={titles3}\r\n        title={\"Assembly Usage 3\"}\r\n        subTitle={\"Please input Assembly Usage 3.\"}\r\n        span={8}\r\n      />\r\n      <TextInputArrayModal\r\n        showModal={showInputModal4}\r\n        setShowModal={setShowInputModal4}\r\n        values={values4}\r\n        setValues={setValues4}\r\n        titles={titles4}\r\n        title={\"Tail Fairing\"}\r\n        subTitle={\"Please input Tail Fairing.\"}\r\n        span={8}\r\n      />\r\n      <div className=\"assembly136-station-title\">\r\n        {\"ASSEMBLY STATION - BLU 136\"}\r\n      </div>\r\n      <div className=\"assembly136-station-top-left\">\r\n        <div className=\"assembly136-station-part-id\">\r\n          <PartIDInputLayout\r\n            partID={partID}\r\n            setPartID={onPartId}\r\n            setShowInputMode={setShowInputMode}\r\n          />\r\n        </div>\r\n        <div className=\"assembly136-station-user-info\">\r\n          <UserInfoLayout />\r\n        </div>\r\n      </div>\r\n      <div className=\"assembly136-station-top-right\">\r\n        <Radio.Group\r\n          // onChange={updateValue}\r\n          value={inputMode}\r\n          className=\"assembly136-station-option\"\r\n          onChange={(e) => {\r\n            setInputMode(e.target.value);\r\n          }}\r\n        >\r\n          <Row align={\"middle\"} style={{ marginTop: \"10px\" }}>\r\n            <Col span={24}>\r\n              <Radio value={\"0\"} style={{ color: \"white\" }}>\r\n                Barcode\r\n              </Radio>\r\n            </Col>\r\n            <Col span={24}>\r\n              <Radio value={\"1\"} style={{ color: \"white\" }}>\r\n                Manual\r\n              </Radio>\r\n            </Col>\r\n          </Row>\r\n        </Radio.Group>\r\n      </div>\r\n      <div className=\"assembly136-station-content\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <CurrentPartProcessingTimeWidget\r\n              time={processingTime}\r\n              setTime={setProcessingTime}\r\n              onStartClick={onStartClick}\r\n              onStopClick={onStopClick}\r\n            />\r\n          </Col>\r\n          <Col span={12} style={{ paddingLeft: \"5px\" }}>\r\n            <Row>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={0}\r\n                  value={goodParts}\r\n                  setValue={updateGoodParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <GoodBadWidget\r\n                  type={1}\r\n                  value={badParts}\r\n                  setValue={updateBadParts}\r\n                  setShowModal={setShowGoodBadModal}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <div className=\"assembly136-station-info\">\r\n          <div className=\"assembly136-station-info-title\">\r\n            {\"Assembly Info\"}\r\n          </div>\r\n          <Row align={\"middle\"} className=\"assembly136-station-info-content\">\r\n            <Col\r\n              style={{ textAlign: \"center\" }}\r\n              span={6}\r\n              onClick={() => {\r\n                setShowInputModal1(true);\r\n              }}\r\n            >\r\n              <div className=\"assembly136-station-info-button\">\r\n                {\"Assembly Usage1\"}\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              span={6}\r\n              onClick={() => {\r\n                setShowInputModal2(true);\r\n              }}\r\n            >\r\n              <div className=\"assembly136-station-info-button\">\r\n                {\"Assembly Usage2\"}\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              span={6}\r\n              onClick={() => {\r\n                setShowInputModal3(true);\r\n              }}\r\n            >\r\n              <div className=\"assembly136-station-info-button\">\r\n                {\"Assembly Usage3\"}\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              span={6}\r\n              onClick={() => {\r\n                setShowInputModal4(true);\r\n              }}\r\n            >\r\n              <div className=\"assembly136-station-info-button\">\r\n                {\"Tail Fairing\"}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssemblyStation136Layout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\InstallConfigTopLayout\\InstallConfigTopLayout.js",["750","751"],"import { Col, Row } from \"antd\";\r\nimport \"./InstallConfigTopLayout.css\";\r\n\r\nimport backIcon from \"../../assets/icons/ic_back_arrow_w.png\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\nimport { appData } from \"services/global\";\r\n\r\nconst InstallConfigTopLayout = (props) => {\r\n\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { pages } = appDataStore;\r\n  const dispatch = useDispatch();\r\n  const onClickBack = () => {\r\n    let newPages = pages;\r\n    newPages.splice(-1);\r\n    appData.pages = newPages;\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  return (\r\n    <div className=\"install-config-top-layout\">\r\n      <Row>\r\n        <Col span={6}>\r\n          <div className=\"install-config-top-layout-left\">\r\n            <a\r\n              className=\"install-config-top-layout-menu-button\"\r\n              onClick={() => onClickBack()}\r\n            >\r\n              <img\r\n                className=\"install-config-top-layout-menu-icon\"\r\n                src={backIcon}\r\n              />\r\n            </a>\r\n\r\n            <div className=\"install-config-top-layout-title-div\">\r\n              <span className=\"install-config-top-layout-title\">\r\n                {\"Install Configuration\"}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstallConfigTopLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\TextInput\\TextInput.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\components\\RadialInput\\RadialInput.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\components\\TextInputArrayModal\\TextInputArrayModal.js",["752"],"import { Button, Col, Row } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./TextInputArrayModal.css\";\r\n\r\nfunction TextInputArrayModal(props) {\r\n  const authData = useSelector((x) => x.authService);\r\n  const {\r\n    showModal,\r\n    setShowModal,\r\n    values,\r\n    setValues,\r\n    titles,\r\n    title,\r\n    subTitle,\r\n    span,\r\n  } = props;\r\n\r\n  const [mValues, setMValues] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setMValues(values);\r\n  }, [values]);\r\n\r\n  const setTemperature = (index, value) => {\r\n    let tmpValues = [...mValues];\r\n    tmpValues[index] = value; //parseFloat(value);\r\n    setMValues(tmpValues);\r\n  };\r\n\r\n  const inputUI = mValues.map((temp, index) => {\r\n    return (\r\n      <Col span={span} key={\"key-\" + index}>\r\n        <div className=\"text-input-array-text-input-container\">\r\n          <div className=\"text-input-array-text-input-title\">\r\n            {titles[index]}\r\n          </div>\r\n          <input\r\n            className=\"text-input-array-text-input-value\"\r\n            value={temp}\r\n            onChange={(e) => setTemperature(index, e.target.value)}\r\n            type=\"text\"\r\n            style={{ outlineStyle: \"none\" }}\r\n          />\r\n        </div>\r\n      </Col>\r\n    );\r\n  });\r\n\r\n  useEffect(() => {\r\n    setMValues(values);\r\n  }, [values]);\r\n\r\n  const onCancel = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const onOK = () => {\r\n    setValues(mValues);\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        centered\r\n        open={showModal}\r\n        className=\"text-input-array-dialog-style\"\r\n        title={null}\r\n        onCancel={() => onCancel()}\r\n        closable={false}\r\n        maskClosable={false}\r\n        destroyOnClose={true}\r\n        header={null}\r\n        footer={null}\r\n      >\r\n        <div>\r\n          <Row align=\"middle\" className=\"text-input-array-dialog-top\">\r\n            <Col>\r\n              <span className=\"text-input-array-dialog-title\">{title}</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"text-input-array-dialog-content\">\r\n            <Col span={24} style={{ textAlign: \"center\" }}>\r\n              <span className=\"text-input-array-dialog-input-desc\">\r\n                {subTitle}\r\n              </span>\r\n            </Col>\r\n            <Col span={24}>\r\n              <Row>{inputUI}</Row>\r\n            </Col>\r\n\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"text-input-array-dialog-button\"\r\n                style={{ marginRight: \"5px\" }}\r\n                onClick={onCancel}\r\n                type=\"primary\"\r\n              >\r\n                {\"Cancel\"}\r\n              </Button>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"text-input-array-dialog-button\"\r\n                style={{ marginLeft: \"5px\" }}\r\n                onClick={onOK}\r\n                type=\"primary\"\r\n              >\r\n                {\"Ok\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextInputArrayModal;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\PartIDModal\\PartIDModal.js",["753"],"import { Button, Col, Row } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./PartIDModal.css\";\r\n\r\nfunction PartIDModal(props) {\r\n  const authData = useSelector((x) => x.authService);\r\n  const { showModal, setShowModal, partID, setPartID } = props;\r\n  const [pID, setPID] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setPID(partID);\r\n  }, [partID]);\r\n\r\n  const onCancel = () => {\r\n    setPID(partID)\r\n    setShowModal(false);\r\n  };\r\n\r\n  const onOK = () => {\r\n    setPartID(pID);\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        centered\r\n        open={showModal}\r\n        className=\"part-id-dialog-style\"\r\n        title={null}\r\n        onCancel={() => onCancel()}\r\n        closable={false}\r\n        maskClosable={false}\r\n        destroyOnClose={true}\r\n        header={null}\r\n        footer={null}\r\n      >\r\n        <div>\r\n          <Row align=\"middle\" className=\"part-id-dialog-top\">\r\n            <Col>\r\n              <span className=\"part-id-dialog-title\">Part ID Input</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"part-id-dialog-content\">\r\n            <Col span={24} style={{ textAlign: \"center\" }}>\r\n              <span className=\"part-id-dialog-input-desc\">\r\n                Please Input Part ID\r\n              </span>\r\n            </Col>\r\n            <Col span={24}>\r\n              <input\r\n                className=\"part-id-dialog-input\"\r\n                value={pID}\r\n                onChange={(e) => setPID(e.target.value)}\r\n                style={{ outlineStyle: \"none\" }}\r\n              />\r\n            </Col>\r\n\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"part-id-dialog-button\"\r\n                style={{ marginRight: \"5px\" }}\r\n                onClick={onCancel}\r\n                type=\"primary\"\r\n              >\r\n                {\"Cancel\"}\r\n              </Button>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"part-id-dialog-button\"\r\n                style={{ marginLeft: \"5px\" }}\r\n                onClick={onOK}\r\n                type=\"primary\"\r\n              >\r\n                {\"Ok\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PartIDModal;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\PartIDInputLayout\\PartIDInputLayout.js",["754"],"import { Col, Row, message } from \"antd\";\r\nimport logoutIcon from \"../../assets/icons/ic_logout_app.png\";\r\nimport qrCodeIcon from \"../../assets/icons/ic_qrcode_scan.png\";\r\nimport \"./PartIDInputLayout.css\";\r\n\r\nconst PartIDInputLayout = (props) => {\r\n  const { setShowInputMode, partID, setPartID } = props;\r\n\r\n  const onLogout = () => {\r\n    setPartID(\"\");\r\n  };\r\n\r\n  return (\r\n    <Row align={\"middle\"} className=\"part-id-input-layout\">\r\n      <Col flex={\"85px\"}>{\"Part ID : \"}</Col>\r\n      <Col flex={\"auto\"} style={{ cursor: \"default\" }}>\r\n        {partID}\r\n      </Col>\r\n      <Col\r\n        flex={\"50px\"}\r\n        style={{ textAlign: \"right\" }}\r\n        onClick={() => {\r\n          setShowInputMode(true);\r\n        }}\r\n      >\r\n        <img\r\n          src={qrCodeIcon}\r\n          style={{ width: \"30px\", height: \"30px\" }}\r\n          alt=\"qrcode\"\r\n        />\r\n      </Col>\r\n      <Col\r\n        flex={\"50px\"}\r\n        style={{ textAlign: \"right\" }}\r\n        onClick={() => {\r\n          onLogout();\r\n        }}\r\n      >\r\n        <img\r\n          src={logoutIcon}\r\n          style={{ width: \"30px\", height: \"30px\" }}\r\n          alt=\"logout\"\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default PartIDInputLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\InputModeModal\\InputModeModal.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\UserInfoLayout\\UserInfoLayout.js",["755","756"],"import { Col, Row, message } from \"antd\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setUserDataStore } from \"redux/actions/userActions\";\r\nimport { LS_ITEMS } from \"services/CONSTANTS\";\r\nimport accountIcon from \"../../assets/icons/ic_account.png\";\r\nimport logoutIcon from \"../../assets/icons/ic_logout_app.png\";\r\nimport qrCodeIcon from \"../../assets/icons/ic_qrcode_scan.png\";\r\nimport LoginIDModal from \"../LoginIDModal/LoginIDModal\";\r\nimport AlertDlg from \"../AlertDlg/AlertDlg\";\r\nimport \"./UserInfoLayout.css\";\r\nimport {\r\n  appData,\r\n  factoryData,\r\n  setAppData,\r\n  setFactoryData,\r\n  setUserData,\r\n  userData,\r\n} from \"services/global\";\r\nimport { setFactoryDataStore } from \"redux/actions/factoryActions\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\n\r\nconst UserInfoLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { userDataStore } = useSelector((x) => x.userDataStore);\r\n  const [showLoginID, setShowLoginID] = useState(false);\r\n  const [showLogout, setShowLogout] = useState(false);\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n\r\n  const onQrCode = () => {\r\n    setShowInputMode(true);\r\n  };\r\n\r\n  const onLogout = () => {\r\n    setUserData(null);\r\n    dispatch(setUserDataStore(userData));\r\n    setFactoryData(null);\r\n    dispatch(setFactoryDataStore(factoryData));\r\n    setAppData(null);\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  return (\r\n    <Row align=\"middle\" className=\"user-info-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Login Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowLoginID}\r\n      />\r\n      <LoginIDModal showModal={showLoginID} setShowModal={setShowLoginID} />\r\n      <AlertDlg\r\n        title={\"Are you sure want to logout?\"}\r\n        showModal={showLogout}\r\n        setShowModal={setShowLogout}\r\n        onOK={onLogout}\r\n      />\r\n      <Col span={4}>\r\n        <img\r\n          className=\"user-info-qrcode\"\r\n          src={qrCodeIcon}\r\n          onClick={() => onQrCode()}\r\n          alt=\"qrcode\"\r\n        />\r\n      </Col>\r\n      <Col span={16} className=\"user-info\">\r\n        {userDataStore === undefined ||\r\n        userDataStore.user_picture === \"\" ||\r\n        userDataStore.user_picture === undefined ||\r\n        userDataStore.user_picture === null ? (\r\n          <img\r\n            className=\"user-info-no-photo\"\r\n            src={accountIcon}\r\n            alt=\"user_picture\"\r\n          />\r\n        ) : (\r\n          <img\r\n            className=\"user-info-photo\"\r\n            src={userDataStore.user_picture}\r\n            alt=\"user_picture\"\r\n          />\r\n        )}\r\n        {userDataStore === undefined ||\r\n        userDataStore.username_full === \"\" ||\r\n        userDataStore.username_full === undefined ||\r\n        userDataStore.username_full === null\r\n          ? \"Unattended\"\r\n          : userDataStore.username_full}\r\n      </Col>\r\n      <Col span={4} style={{ textAlign: \"right\" }}>\r\n        <img\r\n          className=\"user-info-logout\"\r\n          src={logoutIcon}\r\n          onClick={() => setShowLogout(true)}\r\n          alt=\"logout\"\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default UserInfoLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\GoodBadModal\\GoodBadModal.js",["757","758"],"import { Button, Col, message, Row } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./GoodBadModal.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport TextInput from \"components/TextInput/TextInput\";\r\n\r\nfunction GoodBadModal(props) {\r\n  const authData = useSelector((x) => x.authService);\r\n  const {\r\n    showModal,\r\n    setShowModal,\r\n    goodParts,\r\n    setGoodParts,\r\n    badParts,\r\n    setBadParts,\r\n  } = props;\r\n  const [gParts, setGParts] = useState(\"0\");\r\n  const [bParts, setBParts] = useState(\"0\");\r\n\r\n  useEffect(() => {\r\n    setGParts(goodParts);\r\n    setBParts(badParts);\r\n  }, [goodParts, badParts]);\r\n\r\n  const onCancel = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n   const onOK = () => {\r\n     setShowModal(false);\r\n     setGoodParts(gParts);\r\n     setBadParts(bParts);\r\n   };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        centered\r\n        open={showModal}\r\n        className=\"good-bad-dialog-style\"\r\n        title={null}\r\n        onCancel={() => onCancel()}\r\n        closable={false}\r\n        maskClosable={false}\r\n        destroyOnClose={true}\r\n        header={null}\r\n        footer={null}\r\n      >\r\n        <div>\r\n          <Row align=\"middle\" className=\"good-bad-dialog-top\">\r\n            <Col>\r\n              <span className=\"good-bad-dialog-title\">{\"Good/Bad Parts\"}</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"good-bad-dialog-content\">\r\n            <Col span={12}>\r\n              <TextInput\r\n                value={gParts}\r\n                setValue={setGParts}\r\n                title={\"Good Parts\"}\r\n              />\r\n            </Col>\r\n\r\n            <Col span={12}>\r\n              <TextInput\r\n                value={bParts}\r\n                setValue={setBParts}\r\n                title={\"Bad Parts\"}\r\n              />\r\n            </Col>\r\n\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"good-bad-dialog-button\"\r\n                style={{ marginRight: \"5px\" }}\r\n                onClick={onCancel}\r\n                type=\"primary\"\r\n              >\r\n                {\"Cancel\"}\r\n              </Button>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"good-bad-dialog-button\"\r\n                style={{ marginLeft: \"5px\" }}\r\n                onClick={onOK}\r\n                type=\"primary\"\r\n              >\r\n                {\"Ok\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoodBadModal;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\GoodBadWidget\\GoodBadWidget.js",["759","760"],"// @flow strict\r\n\r\nimport { Col, Row } from \"antd\";\r\nimport greenDownIcon from \"../../assets/icons/ic_down_green.png\";\r\nimport redDownIcon from \"../../assets/icons/ic_down_red.png\";\r\nimport greenUpIcon from \"../../assets/icons/ic_up_green.png\";\r\nimport redUpIcon from \"../../assets/icons/ic_up_red.png\";\r\nimport \"./GoodBadWidget.css\";\r\n\r\nfunction GoodBadWidget(props) {\r\n  const { type, value, setValue, setShowModal } = props;\r\n\r\n  const onClick = () => {\r\n    setShowModal(true);\r\n  };\r\n\r\n  const onUp = () => {\r\n    let v = value;\r\n    v++;\r\n    setValue(v);\r\n  };\r\n\r\n  const onDown = () => {\r\n    let v = value;\r\n    if (v > 0) v--;\r\n    setValue(v);\r\n  };\r\n\r\n  return (\r\n    <div className=\"good-bad-widget\">\r\n      <span\r\n        className=\"good-bad-widget-title\"\r\n        style={{\r\n          color: type === 0 ? \"rgb(48, 191, 120)\" : \"rgb(244, 102, 74)\",\r\n        }}\r\n      >\r\n        {type === 0 ? \"Good Parts\" : \"Bad Parts\"}\r\n      </span>\r\n\r\n      <Row align=\"middle\" className=\"good-bad-widget-up-down\">\r\n        <Col span={8} style={{ textAlign: \"left\" }}>\r\n          <img\r\n            className=\"good-bad-widget-down\"\r\n            style={{\r\n              borderColor:\r\n                type === 0 ? \"rgb(48, 191, 120)\" : \"rgb(244, 102, 74)\",\r\n            }}\r\n            src={type === 0 ? greenDownIcon : redDownIcon}\r\n            onClick={() => onDown()}\r\n          />\r\n        </Col>\r\n        <Col span={8} style={{ textAlign: \"center\" }} onClick={() => onClick()}>\r\n          <span\r\n            style={{\r\n              color: type === 0 ? \"rgb(48, 191, 120)\" : \"rgb(244, 102, 74)\",\r\n            }}\r\n            className=\"good-bad-widget-value\"\r\n          >\r\n            {value}\r\n          </span>\r\n        </Col>\r\n        <Col span={8} style={{ textAlign: \"right\" }}>\r\n          <img\r\n            className=\"good-bad-widget-up\"\r\n            style={{\r\n              borderColor:\r\n                type === 0 ? \"rgb(48, 191, 120)\" : \"rgb(244, 102, 74)\",\r\n            }}\r\n            src={type === 0 ? greenUpIcon : redUpIcon}\r\n            onClick={() => onUp()}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoodBadWidget;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\CurrentPartProcessingTimeWidget\\CurrentPartProcessingTimeWidget.js",["761","762"],"import { Col, Row } from \"antd\";\r\nimport \"./CurrentPartProcessingTimeWidget.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst CurrentPartProcessingTimeWidget = (props) => {\r\n  const {time, setTime, onStartClick, onStopClick} = props;\r\n\r\n  return (\r\n    <div className=\"current-part-processing-time-layout\">\r\n      <div className=\"current-part-processing-time-title\">\r\n        {\"Current Part Processing Time\"}\r\n      </div>\r\n      <Row align={\"middle\"} style={{ height: \"80px\" }}>\r\n        <Col\r\n          flex=\"120px\"\r\n          className=\"current-part-processing-time-start-button\"\r\n          onClick={() => {\r\n            onStartClick();\r\n          }}\r\n        >\r\n          {\"Start\"}\r\n        </Col>\r\n        <Col flex=\"auto\" className=\"current-part-processing-time-value\">\r\n          {time}\r\n        </Col>\r\n        <Col\r\n          flex=\"120px\"\r\n          className=\"current-part-processing-time-stop-button\"\r\n          onClick={() => {\r\n            onStopClick();\r\n          }}\r\n        >\r\n          {\"Stop\"}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentPartProcessingTimeWidget;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\LoginIDModal\\LoginIDModal.js",["763"],"import { Button, Col, message, Row } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { isSpinning } from \"redux/actions/appActions\";\r\nimport { setUserDataStore } from \"redux/actions/userActions\";\r\nimport { apiCallForLogin } from \"services/apiCall\";\r\nimport { LS_ITEMS} from \"services/CONSTANTS\";\r\nimport \"./LoginIDModal.css\";\r\nimport { setUserData, userData } from \"services/global\";\r\n\r\nfunction LoginIDModal(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { showModal, setShowModal } = props;\r\n  const [userID, setUserID] = useState(\"\");\r\n\r\n  const onCancel = () => {\r\n    setUserID(\"\");\r\n    setShowModal(false);\r\n  };\r\n\r\n  const onOK = () => {\r\n    if (userID === \"\" || userID === undefined) return;\r\n    dispatch(isSpinning(true));\r\n    apiCallForLogin(userID, \"\")\r\n      .then((res) => {\r\n        setUserID(\"\");\r\n        setShowModal(false);\r\n        dispatch(isSpinning(false));\r\n        setUserData(res);\r\n        dispatch(setUserDataStore(userData));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Login Fail. Please try again.\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        centered\r\n        open={showModal}\r\n        className=\"login-id-dialog-style\"\r\n        title={null}\r\n        onCancel={() => onCancel()}\r\n        closable={false}\r\n        maskClosable={false}\r\n        destroyOnClose={true}\r\n        header={null}\r\n        footer={null}\r\n      >\r\n        <div>\r\n          <Row align=\"middle\" className=\"login-id-dialog-top\">\r\n            <Col>\r\n              <span className=\"login-id-dialog-title\">Login ID Input</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"login-id-dialog-content\">\r\n            <Col span={24} style={{ textAlign: \"center\" }}>\r\n              <span className=\"login-id-dialog-input-desc\">\r\n                Please Input Login ID\r\n              </span>\r\n            </Col>\r\n            <Col span={24}>\r\n              <input\r\n                className=\"login-id-dialog-input\"\r\n                value={userID}\r\n                onChange={(e) => setUserID(e.target.value)}\r\n                style={{ outlineStyle: \"none\" }}\r\n              />\r\n            </Col>\r\n\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"login-id-dialog-button\"\r\n                style={{ marginRight: \"5px\" }}\r\n                onClick={onCancel}\r\n                type=\"primary\"\r\n              >\r\n                {\"Cancel\"}\r\n              </Button>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"login-id-dialog-button\"\r\n                style={{ marginLeft: \"5px\" }}\r\n                onClick={onOK}\r\n                type=\"primary\"\r\n              >\r\n                {\"Ok\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginIDModal;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\TankTimeWidget\\TankTimeWidget.js",["764","765"],"import { Col, Row } from \"antd\";\r\nimport editIcon from \"../../assets/icons/ic_jobid_edit.png\";\r\nimport \"./TankTimeWidget.css\";\r\n\r\nconst TankTimeWidget = (props) => {\r\n  const {\r\n    times,\r\n    setTimes,\r\n    index,\r\n    selectedTankIndex,\r\n    setSelectedTankIndex,\r\n    setShowTemperatureModal,\r\n    temps,\r\n    title,\r\n  } = props;\r\n\r\n  return (\r\n    <Row align={\"middle\"} className=\"time-logger-tank-time-layout\">\r\n      <Col flex=\"50px\">{title}</Col>\r\n      <Col\r\n        flex=\"auto\"\r\n        style={{\r\n          textAlign: \"center\",\r\n          color: index === selectedTankIndex ? \"red\" : \"white\",\r\n          cursor: \"default\",\r\n        }}\r\n        onClick={() => {\r\n          setSelectedTankIndex(index);\r\n        }}\r\n      >\r\n        {times[index]}\r\n      </Col>\r\n      <Col\r\n        flex=\"50px\"\r\n        style={{ color: \"red\", cursor:\"default\" }}\r\n        onClick={() => {\r\n          setShowTemperatureModal(true);\r\n        }}\r\n      >{`${temps[index]}°F`}</Col>\r\n      <Col flex=\"50px\">\r\n        <img\r\n          src={editIcon}\r\n          style={{ width: \"30px\", height: \"30px\" }}\r\n          onClick={() => {\r\n            setShowTemperatureModal(true);\r\n          }}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default TankTimeWidget;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\UsageWidget\\UsageWidget.js",["766","767"],"import { Col, Row } from \"antd\";\r\nimport \"./UsageWidget.css\";\r\nimport { useState } from \"react\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\n\r\nconst UsageWidget = (props) => {\r\n  const { title, before, setBefore, after, setAfter, used, setUsed, unit } = props;\r\n  \r\n  return (\r\n    <div className=\"usage-layout\">\r\n      <div className=\"usage-title\">{title}</div>\r\n      <Row align={\"middle\"} style={{ height: \"80px\" }}>\r\n        <Col span={8} className=\"usage-input\">\r\n          {\"Before\"}\r\n          <div>\r\n            <div className=\"usage-value\">\r\n              <input\r\n                className=\"text-input\"\r\n                value={before}\r\n                type=\"number\"\r\n                onChange={(e) => setBefore(e.target.value)}\r\n                style={{ outlineStyle: \"none\" }}\r\n              />\r\n            </div>\r\n            <div className=\"usage-unit\">{unit}</div>\r\n          </div>\r\n        </Col>\r\n        <Col span={8} className=\"usage-input\">\r\n          {\"After\"}\r\n          <div>\r\n            <div className=\"usage-value\">\r\n              <input\r\n                className=\"text-input\"\r\n                value={after}\r\n                type=\"number\"\r\n                onChange={(e) => setAfter(e.target.value)}\r\n                style={{ outlineStyle: \"none\" }}\r\n              />\r\n            </div>\r\n            <div className=\"usage-unit\">{unit}</div>\r\n          </div>\r\n        </Col>\r\n        <Col span={8} className=\"usage-input\">\r\n          {\"Used\"}\r\n          <div>\r\n            <div className=\"usage-value\">\r\n              <input\r\n                className=\"text-input\"\r\n                value={used}\r\n                type=\"number\"\r\n                onChange={(e) => setUsed(e.target.value)}\r\n                style={{ outlineStyle: \"none\" }}\r\n              />\r\n            </div>\r\n            <div className=\"usage-unit\">{unit}</div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsageWidget;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\AmbientPaintWidget\\AmbientPaintWidget.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\components\\RecordPhosphateTestInfoModal\\RecordPhosphateTestInfoModal.js",["768","769","770","771"],"import { Button, Col, Row, Radio, message } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { DatePicker, TimePicker} from 'antd';\r\nimport dayjs from 'dayjs';\r\nimport moment from 'moment';\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isSpinning, setAppDataStore } from \"redux/actions/appActions\";\r\nimport { apiCallForRecordPhosphateTestInfo } from \"services/apiCall\";\r\nimport { appData, userData, factoryData } from \"services/global\";\r\n\r\nimport \"./RecordPhosphateTestInfoModal.css\";\r\n\r\nfunction RecordPhosphateTestInfo(props) {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { showModal, setShowModal, partID } = props;\r\n\r\n  const dateFormat = 'MM/DD/YYYY';\r\n  const timeFormat = 'HH:mm:ss';\r\n  \r\n  // Use moment\r\n  const currentDate = moment();\r\n  const formattedDate = currentDate.format(dateFormat);\r\n  const formattedTime = currentDate.format(timeFormat);\r\n\r\n  const [rDate, setRDate] = useState(formattedDate);\r\n  const [rTime, setRTime] = useState(formattedTime);\r\n\r\n  useEffect(() => {\r\n    setRDate(formattedDate)\r\n    setRTime(formattedTime)\r\n  });\r\n\r\n  const handleDateChange = (date, dateString) => {\r\n    setRDate(dateString);\r\n  };\r\n\r\n  const handleTimeChange = (time, timeString) => {\r\n    setRTime(timeString);\r\n  };\r\n\r\n  const [weight, setWeight] = useState(\"0\");\r\n  const [optionWaterBreak, setOptionWaterBreak] = useState(\"-1\");\r\n\r\n  const onCancel = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const onOK = () => {\r\n    reportData()\r\n  };\r\n\r\n  const reportData = () => {\r\n\r\n    if (factoryData.accountId === \"\") {\r\n      message.warn(\"Please login with customer id\");\r\n      return;\r\n    }\r\n\r\n    if (appData.machineName === \"\") {\r\n      message.warn(\"Please input machine name in settings page\");\r\n      return;\r\n    }\r\n\r\n    if (partID === \"\") {\r\n      message.warn(\"Please input Part ID.\");\r\n      return;\r\n    }\r\n\r\n    let param = {\r\n      customer_id: factoryData.accountId,\r\n      machine_id: appData.machineName,\r\n      operator: userData.username_full,\r\n      part_id: partID,\r\n      created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\") + \".000000\",\r\n      timestamp: Date.now(),\r\n      date: rDate,\r\n      time: rTime,\r\n      weight: weight,\r\n      water_break: optionWaterBreak === \"0\" ? \"Pass\" : (optionWaterBreak === \"1\" ? \"Fail\" : \"\"),\r\n    };\r\n\r\n    dispatch(isSpinning(true));\r\n    apiCallForRecordPhosphateTestInfo(param)\r\n      .then((res) => {\r\n        setShowModal(false);\r\n        dispatch(isSpinning(false));\r\n        message.success(\"Success to save test info!\");\r\n      })\r\n      .catch((err) => {\r\n        setShowModal(false);\r\n        dispatch(isSpinning(false));\r\n        message.error(\"Fail to report data!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        centered\r\n        open={showModal}\r\n        className=\"record-phosphate-testinfo-dialog-style\"\r\n        title={null}\r\n        onCancel={() => onCancel()}\r\n        closable={false}\r\n        maskClosable={false}\r\n        destroyOnClose={true}\r\n        header={null}\r\n        footer={null}\r\n      >\r\n        <div>\r\n          <Row align=\"middle\" className=\"record-phosphate-testinfo-dialog-top\">\r\n            <Col>\r\n              <span className=\"record-phosphate-testinfo-dialog-title\">\r\n                {\"Record Phosphate Test Info\"}\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"record-phosphate-testinfo-dialog-content\">\r\n            <Col span={8}>\r\n              <div className=\"record-phosphate-testinfo-input-container left-aligned\">\r\n                <div className=\"record-phosphate-testinfo-input-title\">\r\n                  {\"Testing Date\"}\r\n                </div>\r\n                <DatePicker defaultValue={currentDate} format={dateFormat} onChange={handleDateChange}/>\r\n              </div>\r\n            </Col>\r\n\r\n            <Col span={8}>\r\n              <div className=\"record-phosphate-testinfo-input-container left-aligned\">\r\n                <div className=\"record-phosphate-testinfo-input-title\">\r\n                  {\"Time\"}\r\n                </div>\r\n                <TimePicker defaultValue={currentDate} format={timeFormat} onChange={handleTimeChange}/>\r\n              </div>\r\n            </Col>\r\n\r\n            <Col span={8}>\r\n              <div className=\"record-phosphate-testinfo-input-container\">\r\n                <div className=\"record-phosphate-testinfo-input-title\">\r\n                  {\"Weight\"}\r\n                </div>\r\n                <input\r\n                  className=\"record-phosphate-testinfo-input-value\"\r\n                  value={weight}\r\n                  onChange={(e) => setWeight(e.target.value)}\r\n                  type=\"number\"\r\n                  step=\"0.1\"\r\n                  min='0'\r\n                  max='100000'\r\n                  style={{ outlineStyle: \"none\" }}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"record-phosphate-testinfo-dialog-content\">\r\n            <Col span={24}>\r\n              <div className=\"record-phosphate-testinfo-input-container\">\r\n                <div className=\"record-phosphate-testinfo-input-title left-aligned\">\r\n                  {\"Water Break\"}\r\n                </div>\r\n                <Radio.Group\r\n                  // onChange={updateValue}\r\n                  value={optionWaterBreak}\r\n                  className=\"app-setting-in-cyle-option\"\r\n                  onChange={(e) => {\r\n                    setOptionWaterBreak(e.target.value);\r\n                  }}\r\n                >\r\n                  <Row>\r\n                    <Col span={12}>\r\n                      <Radio value={\"0\"} style={{ color: \"white\" }}>\r\n                        Pass\r\n                      </Radio>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                      <Radio value={\"1\"} style={{ color: \"white\" }}>\r\n                        Fail\r\n                      </Radio>\r\n                    </Col>\r\n                  </Row>\r\n                </Radio.Group>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"record-phosphate-testinfo-dialog-content\">\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"record-phosphate-testinfo-dialog-button\"\r\n                style={{ marginRight: \"5px\" }}\r\n                onClick={onCancel}\r\n                type=\"primary\"\r\n              >\r\n                {\"Cancel\"}\r\n              </Button>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"record-phosphate-testinfo-dialog-button\"\r\n                style={{ marginLeft: \"5px\" }}\r\n                onClick={onOK}\r\n                type=\"primary\"\r\n              >\r\n                {\"Ok\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Use Date() function\r\n/*const currentDate = new Date();\r\nconst formattedDate = currentDate.toLocaleDateString('en-US', {\r\n  year: 'numeric',\r\n  month: '2-digit',\r\n  day: '2-digit'\r\n});\r\nconst hours = String(currentDate.getHours()).padStart(2, \"0\");\r\nconst minutes = String(currentDate.getMinutes()).padStart(2, \"0\");\r\nconst seconds = String(currentDate.getSeconds()).padStart(2, \"0\");\r\nconst formattedTime = '${hours}:${minutes}:${seconds}';*/\r\n\r\nexport default RecordPhosphateTestInfo;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\CurrentPartNotesWidget\\CurrentPartNotesWidget.js",["772"],"import TextArea from \"antd/lib/input/TextArea\";\r\nimport { useState } from \"react\";\r\nimport \"./CurrentPartNotesWidget.css\";\r\n\r\nconst CurrentPartNotesWidget = (props) => {\r\n  const { notes, setNotes } = props;\r\n  return (\r\n    <div className=\"current-part-notes-layout\">\r\n      <div className=\"current-part-notes-title\">{\"Current Part Notes\"}</div>\r\n      <TextArea\r\n        className=\"current-part-notes-textarea\"\r\n        rows={3}\r\n        max\r\n        placeholder=\"Add Notes Here\"\r\n        value={notes}\r\n        onChange={(e) => {\r\n          setNotes(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentPartNotesWidget;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\RadialInputGroup\\RadialInputGroup.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\RejectReasonsModal\\RejectReasonsModal.js",["773","774"],"import { Button, Col, Row } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./RejectReasonsModal.css\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\n\r\nfunction RejectReasonsModal(props) {\r\n  const { showModal, setShowModal, titles, setTitles, index } = props;\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setTitle(titles[index]);\r\n  }, [titles, index]);\r\n\r\n  const onCancel = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const onOK = () => {\r\n    let newTitles = titles;\r\n    newTitles[index] = title;\r\n    setTitles(newTitles);\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        centered\r\n        open={showModal}\r\n        className=\"reject-reason-title-dialog-style\"\r\n        title={null}\r\n        onCancel={() => onCancel()}\r\n        closable={false}\r\n        maskClosable={false}\r\n        destroyOnClose={true}\r\n        header={null}\r\n        footer={null}\r\n      >\r\n        <div>\r\n          <Row align=\"middle\" className=\"reject-reason-title-dialog-top\">\r\n            <Col>\r\n              <span className=\"reject-reason-title-dialog-title\">\r\n                {\"Edit Title\"}\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"reject-reason-title-dialog-content\">\r\n            <Col span={24} style={{ textAlign: \"center\" }}>\r\n              <span className=\"reject-reason-title-dialog-input-desc\">\r\n                {\"Please Input Title\"}\r\n              </span>\r\n            </Col>\r\n            <Col span={24}>\r\n              <input\r\n                className=\"reject-reason-title-dialog-input\"\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                style={{ outlineStyle: \"none\" }}\r\n              />\r\n            </Col>\r\n\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"reject-reason-title-dialog-button\"\r\n                style={{ marginRight: \"5px\" }}\r\n                onClick={onCancel}\r\n                type=\"primary\"\r\n              >\r\n                {\"Cancel\"}\r\n              </Button>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"reject-reason-title-dialog-button\"\r\n                style={{ marginLeft: \"5px\" }}\r\n                onClick={onOK}\r\n                type=\"primary\"\r\n              >\r\n                {\"Ok\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RejectReasonsModal;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\TextWithIcon\\TextWithIcon.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SidebarMenu\\SidebarMenu.js",["775","776","777","778","779","780"],"import { Menu } from \"antd\";\r\nimport LanguageModal from \"pages/LanguageModal/LanguageModal\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\nimport { appData } from \"services/global\";\r\nimport ic_oee_dashboard from \"../../assets/icons/ic_menu_dashboard.png\";\r\nimport ic_menu_install from \"../../assets/icons/ic_menu_install.png\";\r\nimport ic_menu_maintenance from \"../../assets/icons/ic_menu_maintenance.png\";\r\nimport ic_menu_setting from \"../../assets/icons/ic_menu_setting.png\";\r\nimport ic_menu_timereport from \"../../assets/icons/ic_menu_timereport.png\";\r\nimport ic_nav_language from \"../../assets/icons/ic_nav_language.png\";\r\nimport logo from \"../../assets/icons/logo.png\";\r\nimport \"./SidebarMenu.css\";\r\n\r\nconst SidebarMenu = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { open } = props;\r\n  const { pages } = appDataStore;\r\n  const [isShowLanguageModal, setIsShowLanguageModal] = useState(false);\r\n\r\n  const onMenuClick = (info) => {\r\n    open(false);\r\n    if (info.page_index === 5) {\r\n      setIsShowLanguageModal(true);\r\n    } else {\r\n      if (info.page_index < 2) {\r\n        appData.pages = [info.page_index];\r\n        dispatch(setAppDataStore(appData));\r\n      } else {\r\n        let newPages = pages;\r\n        newPages.push(info.page_index);\r\n        appData.pages = newPages;\r\n        dispatch(setAppDataStore(appData));\r\n      }\r\n    }\r\n  };\r\n\r\n  const NAV_MENU_IMTES = [\r\n    {\r\n      page_index: 0,\r\n      title: \"OEE Dashboard\",\r\n      icon: (\r\n        <img\r\n          style={{ width: \"20px\", height: \"20px\", color: \"white\" }}\r\n          src={ic_oee_dashboard}\r\n        />\r\n      ),\r\n      active: true,\r\n    },\r\n    {\r\n      page_index: 1,\r\n      title: \"Process Monitor\",\r\n      icon: (\r\n        <img\r\n          style={{ width: \"20px\", height: \"20px\", color: \"white\" }}\r\n          src={ic_menu_timereport}\r\n        />\r\n      ),\r\n      active: false,\r\n    },\r\n    {\r\n      page_index: 2,\r\n      title: \"Settings\",\r\n      icon: (\r\n        <img\r\n          style={{ width: \"20px\", height: \"20px\", color: \"white\" }}\r\n          src={ic_menu_setting}\r\n        />\r\n      ),\r\n      active: false,\r\n    },\r\n    {\r\n      page_index: 3,\r\n      title: \"Install Configuration\",\r\n      icon: (\r\n        <img\r\n          style={{ width: \"20px\", height: \"20px\", color: \"white\" }}\r\n          src={ic_menu_install}\r\n        />\r\n      ),\r\n      active: false,\r\n    },\r\n    {\r\n      page_index: 4,\r\n      title: \"Maintenance\",\r\n      icon: (\r\n        <img\r\n          style={{ width: \"20px\", height: \"20px\", color: \"white\" }}\r\n          src={ic_menu_maintenance}\r\n        />\r\n      ),\r\n      active: false,\r\n    },\r\n    {\r\n      page_index: 5,\r\n      title: \"Language\",\r\n      icon: (\r\n        <img\r\n          style={{ width: \"20px\", height: \"20px\", color: \"white\" }}\r\n          src={ic_nav_language}\r\n        />\r\n      ),\r\n      active: false,\r\n    },\r\n  ];\r\n\r\n  const menuUI = NAV_MENU_IMTES.map((info, index) => {\r\n    return (\r\n      <Menu.Item\r\n        className=\"c-menu-item\"\r\n        key={info.page_index}\r\n        icon={info.icon}\r\n        onClick={() => {\r\n          onMenuClick(info);\r\n        }}\r\n      >\r\n        {info.title}\r\n      </Menu.Item>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <LanguageModal\r\n        isShowLanguageModal={isShowLanguageModal}\r\n        setIsShowLanguageModal={setIsShowLanguageModal}\r\n      />\r\n      <img\r\n        className=\"drawer-logo\"\r\n        alt=\"logo\"\r\n        src={logo}\r\n        style={{ height: 32 }}\r\n      />\r\n      <Menu theme=\"dark\" mode=\"inline\" className=\"c-menu\">\r\n        {menuUI}\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SidebarMenu;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\DashboardUtilizationLayout\\DashboardUtilizationLayout.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\DashboardOEELayout\\DashboardOEELayout.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\DashboardMachineInfoLayout\\DashboardMachineInfoLayout.js",["781"],"import { Col, Row, Spin, message } from \"antd\";\r\nimport { Parser } from \"html-to-react\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { apiCallForGetJobData } from \"services/apiCall\";\r\nimport { appData, factoryData, timeToSecond } from \"services/global\";\r\nimport jobAttachsIcon from \"../../assets/icons/ic_job_attachs.png\";\r\nimport jobGuideIcon from \"../../assets/icons/ic_job_guides.png\";\r\nimport jobidEditIcon from \"../../assets/icons/ic_jobid_edit.png\";\r\nimport \"./DashboardMachineInfoLayout.css\";\r\nimport JobIDModal from \"./JobIDModal/JobIDModal\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\n\r\nconst DashboardMachineInfoLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [isSpinning, setIsSpinning] = useState(false);\r\n\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n  const [showJobIDInput, setShowJobIDInput] = useState(false);\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { factoryDataStore } = useSelector((x) => x.factoryDataStore);\r\n\r\n  const [html, setHTML] = useState(\r\n    \"Customer : <b></b><br>\" +\r\n      \"Part Number : <b></b><br>\" +\r\n      \"Program Number : <b></b><br>\" +\r\n      \"Description : <b></b><br>\" +\r\n      \"Parts Per Cycle : <b></b><br>\" +\r\n      \"Target Cycle Time : <b></b><br>\" +\r\n      \"Qty Required : <b></b><br>\" +\r\n      \"Qty Good Completed : <b></b><br>\" +\r\n      \"Aux1 : <b></b><br>\" +\r\n      \"Aux2 : <b></b><br>\" +\r\n      \"Aux3 : <b></b><br>\"\r\n  );\r\n\r\n  const setHTMLString = (jobData) => {\r\n    if (jobData !== undefined && jobData.length > 0) {\r\n      let htmlString =\r\n        \"Customer : <b>\" +\r\n        (jobData[0][\"customer\"] === null ? \"\" : jobData[0][\"customer\"]) +\r\n        \"</b><br>\" +\r\n        \"Part Number : <b>\" +\r\n        (jobData[0][\"partNumber\"] === null ? \"\" : jobData[0][\"partNumber\"]) +\r\n        \"</b><br>\" +\r\n        \"Program Number : <b>\" +\r\n        (jobData[0][\"programNumber\"] === null\r\n          ? \"\"\r\n          : jobData[0][\"programNumber\"]) +\r\n        \"</b><br>\" +\r\n        \"Description : <b>\" +\r\n        (jobData[0][\"description\"] === null ? \"\" : jobData[0][\"description\"]) +\r\n        \"</b><br>\" +\r\n        \"Parts Per Cycle : <b>\" +\r\n        (jobData[0][\"partsPerCycle\"] === null\r\n          ? \"0\"\r\n          : jobData[0][\"partsPerCycle\"]) +\r\n        \"</b><br>\" +\r\n        \"Target Cycle Time : <b>\" +\r\n        (jobData[0][\"targetCycleTime\"] === null\r\n          ? \"00:00:00\"\r\n          : jobData[0][\"targetCycleTime\"]) +\r\n        \"</b><br>\" +\r\n        \"Qty Required : <b>\" +\r\n        (jobData[0][\"qtyRequired\"] === null ? \"\" : jobData[0][\"qtyRequired\"]) +\r\n        \"</b><br>\" +\r\n        \"Qty Good Completed : <b>\" +\r\n        (jobData[0][\"qtyGoodCompleted\"] === null\r\n          ? \"\"\r\n          : jobData[0][\"qtyGoodCompleted\"]) +\r\n        \"</b><br>\" +\r\n        \"Aux1 : <b>\" +\r\n        (jobData[0][\"aux1data\"] === null ? \"\" : jobData[0][\"aux1data\"]) +\r\n        \"</b><br>\" +\r\n        \"Aux2 : <b>\" +\r\n        (jobData[0][\"aux2data\"] === null ? \"\" : jobData[0][\"aux2data\"]) +\r\n        \"</b><br>\" +\r\n        \"Aux3 : <b>\" +\r\n        (jobData[0][\"aux3data\"] === null ? \"\" : jobData[0][\"aux3data\"]) +\r\n        \"</b><br>\";\r\n      setHTML(htmlString);\r\n      appData.partsPerCycle =\r\n        jobData[0][\"partsPerCycle\"] === null ? 0 : jobData[0][\"partsPerCycle\"];\r\n      appData.targetCycleTime =\r\n        jobData[0][\"targetCycleTime\"] === null\r\n          ? 0\r\n          : timeToSecond(jobData[0][\"targetCycleTime\"]);\r\n      setAppDataStore(appData);\r\n    } else {\r\n      let htmlString =\r\n        \"Customer : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Part Number : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Program Number : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Description : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Parts Per Cycle : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Target Cycle Time : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Qty Required : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Qty Good Completed : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Aux1 : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Aux2 : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Aux3 : <b>\" +\r\n        \"</b><br>\";\r\n      appData.partsPerCycle = 0;\r\n      appData.targetCycleTime = 0;\r\n      setAppDataStore(appData);\r\n      setHTML(htmlString);\r\n    }\r\n  };\r\n\r\n  const onLogoutJobID = () => {\r\n    appData.jobId = \"\";\r\n    setHTMLString(\"\");\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const onJobAttachs = () => {\r\n    message.info(\"onJobAttachs Clicked\");\r\n  };\r\n\r\n  const onJobGuides = () => {\r\n    message.info(\"onJobGhides Clicked\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (factoryData.accountId === \"\" || appData.jobId === \"\") {\r\n      onLogoutJobID();\r\n    } else {\r\n      setIsSpinning(true);\r\n      apiCallForGetJobData(factoryData.accountId, appData.jobId)\r\n        .then((res) => {\r\n          setHTMLString(res);\r\n          setIsSpinning(false);\r\n        })\r\n        .catch((err) => {\r\n          setIsSpinning(false);\r\n          message.error(err);\r\n        });\r\n    }\r\n  }, [factoryDataStore.accountId, appDataStore.jobId]);\r\n\r\n  if (isSpinning) {\r\n    return (\r\n      <Row className=\"dashboard-machine-info-layout\" align={\"middle\"}>\r\n        <Col span={24} style={{ textAlign: \"center\" }}>\r\n          <Spin size={\"large\"} spinning={isSpinning} />\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard-machine-info-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Job ID Input Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowJobIDInput}\r\n        onLogoutJobID={onLogoutJobID}\r\n      />\r\n      <JobIDModal showModal={showJobIDInput} setShowModal={setShowJobIDInput} />\r\n      <Row align=\"middle\" className=\"dashboard-machine-info-top\">\r\n        <Col span={20}>\r\n          <span className=\"dashboard-machine-info-jobid\">\r\n            {\"Job ID : \"}\r\n            {appDataStore.jobId}\r\n          </span>\r\n        </Col>\r\n        <Col span={4} style={{ textAlign: \"right\" }}>\r\n          <img\r\n            className=\"dashboard-machine-info-jobid-edit\"\r\n            src={jobidEditIcon}\r\n            onClick={() => setShowInputMode(true)}\r\n            alt=\"edit\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <div className=\"dashboard-machine-info-content\">\r\n        {Parser().parse(html)}\r\n      </div>\r\n      <img\r\n        className=\"dashboard-machine-info-job-guides\"\r\n        src={jobGuideIcon}\r\n        onClick={() => onJobGuides()}\r\n        alt=\"guides\"\r\n      />\r\n      <img\r\n        className=\"dashboard-machine-info-job-attaches\"\r\n        src={jobAttachsIcon}\r\n        onClick={() => onJobAttachs()}\r\n        alt=\"attaches\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardMachineInfoLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\DashboardChartLayout\\DashboardChartLayout.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\components\\IndicatorDots.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingsTopLayout\\SettingsTopLayout.js",["782","783"],"import { Col, Row } from \"antd\";\r\nimport \"./SettingsTopLayout.css\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\nimport { appData } from \"services/global\";\r\nimport backIcon from \"../../assets/icons/ic_back_arrow_w.png\";\r\n\r\nconst SettingsTopLayout = (props) => {\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { pages } = appDataStore;\r\n  const dispatch = useDispatch();\r\n  const onClickBack = () => {\r\n    let newPages = pages;\r\n    newPages.splice(-1);\r\n    appData.pages = newPages;\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-top-layout\">\r\n      <Row>\r\n        <Col span={6}>\r\n          <div className=\"settings-top-layout-left\">\r\n            <a\r\n              className=\"settings-top-layout-menu-button\"\r\n              onClick={() => onClickBack()}\r\n            >\r\n              <img className=\"settings-top-layout-menu-icon\" src={backIcon} />\r\n            </a>\r\n\r\n            <div className=\"settings-top-layout-title-div\">\r\n              <span className=\"settings-top-layout-title\">{\"Settings\"}</span>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsTopLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingsServerInfoLayout\\SettingsServerInfoLayout.js",["784"],"import { Col, Row, message } from \"antd\";\r\nimport RadialInput from \"components/RadialInput/RadialInput\";\r\nimport TextInput from \"components/TextInput/TextInput\";\r\nimport { useState } from \"react\";\r\nimport \"./SettingsServerInfoLayout.css\";\r\n\r\nconst SettingsServerInfoLayout = (props) => {\r\n  const [useCustomServer, setUseCustomServer] = useState(false);\r\n  const [customServerInfo, setCustomServerInfo] = useState(\"192.168.1.36\");\r\n\r\n  return (\r\n    <div className=\"settings-server-info-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-server-info-title\">Server Information</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"settings-server-info-content\" align={\"middle\"}>\r\n        <Col style={{ width: \"300px\" }}>\r\n          <RadialInput\r\n            value={useCustomServer}\r\n            title=\"User Custom Server\"\r\n            setValue={setUseCustomServer}\r\n          />\r\n        </Col>\r\n        {useCustomServer ? (\r\n          <Col style={{ width: \"300px\" }}>\r\n            <TextInput\r\n              value={customServerInfo}\r\n              title=\"Custom Server Info(domain or IP)\"\r\n              setValue={setCustomServerInfo}\r\n            />\r\n          </Col>\r\n        ) : (\r\n          <Col></Col>\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsServerInfoLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingsInCycleSignalFromLayout\\SettingsInCycleSignalFromLayout.js",["785","786"],"import { Col, Radio, Row, message } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport \"./SettingsInCycleSignalFromLayout.css\";\r\n\r\nconst SettingsInCycleSignalFromLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n\r\n  const setInCycleSignalFrom = (value) => {\r\n    var newSetting = { ...appSetting, inCycleSignalFrom: value };\r\n    setAppSetting(newSetting);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-in-cyle-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-in-cyle-title\">In Cycle Signal From</span>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Radio.Group\r\n        // onChange={updateValue}\r\n        value={appSetting.inCycleSignalFrom}\r\n        className=\"app-setting-in-cyle-option\"\r\n        onChange={(e) => {\r\n          setInCycleSignalFrom(e.target.value);\r\n        }}\r\n      >\r\n        <Row>\r\n          <Col span={12}>\r\n            <Radio value={0} style={{ color: \"white\" }}>\r\n              PLC\r\n            </Radio>\r\n          </Col>\r\n          <Col span={12}>\r\n            <Radio value={1} style={{ color: \"white\" }}>\r\n              Process Monitor\r\n            </Radio>\r\n          </Col>\r\n        </Row>\r\n      </Radio.Group>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsInCycleSignalFromLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingsAppInfoLayout\\SettingsAppInfoLayout.js",["787","788"],"import { Col, Row, message } from \"antd\";\r\nimport TextInput from \"components/TextInput/TextInput\";\r\nimport { useState } from \"react\";\r\nimport \"./SettingsAppInfoLayout.css\";\r\n\r\nconst SettingsAppInfoLayout = (props) => {\r\n  const [appVersion, setAppVersion] = useState(\"V8.75\");\r\n\r\n  const onEditJobID = () => {\r\n    message.info(\"onEditJobID Clicked\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-app-info-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-app-info-title\">App Information</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"settings-app-info-content\" align={\"middle\"}>\r\n        <Col flex=\"200px\">\r\n          <TextInput\r\n            value={appVersion}\r\n            title=\"Current Version\"\r\n            disabled={true}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <span className=\"settings-app-version-desc\">\r\n            Your version is up to date.\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsAppInfoLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingTempDataSourceLayout\\SettingTempDataSourceLayout.js",["789","790","791","792","793","794","795"],"import { useSelector } from \"react-redux\";\r\nimport \"./SettingTempDataSourceLayout.css\";\r\nimport { PlayCircleFilled } from \"@ant-design/icons\";\r\nimport { Col, Radio, Row, message } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport { Parser } from \"html-to-react\";\r\nimport TextInput from \"components/TextInput/TextInput\";\r\nimport RadialInput from \"components/RadialInput/RadialInput\";\r\n\r\nconst SettingTempDataSourceLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n\r\n  const TempDataSources = [\r\n    { value: 0, title: \"Manual Entry\" },\r\n    { value: 1, title: \"llot Link\" },\r\n    { value: 2, title: \"PLC\" },\r\n  ];\r\n\r\n  const tempDataSourceOptions = TempDataSources.map((tdSource) => {\r\n    return (\r\n      <Col\r\n        className=\"app-setting-temp_data_source-option-item\"\r\n        span={8}\r\n        key={TempDataSources.indexOf(tdSource)}\r\n      >\r\n        <Radio value={tdSource.value} style={{ color: \"white\" }}>\r\n          {tdSource.title}\r\n        </Radio>\r\n      </Col>\r\n    );\r\n  });\r\n\r\n  const setTemperatureDataSource = (value) => {\r\n    var newSetting = { ...appSetting, temperatureDataSource: value };\r\n    //newSetting[field] = value;\r\n    //setAppSetting({ ...newSetting });\r\n    setAppSetting(newSetting);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-temp_data_source-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-temp_data_source-title\">\r\n            Temperature Data Source\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Radio.Group\r\n        // onChange={updateValue}\r\n        value={appSetting.temperatureDataSource}\r\n        className=\"app-setting-temp_data_source-option\"\r\n        onChange={(e) => {\r\n          setTemperatureDataSource(e.target.value);\r\n        }}\r\n      >\r\n        <Row>{tempDataSourceOptions}</Row>\r\n      </Radio.Group>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingTempDataSourceLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingTimeLayout\\SettingTimeLayout.js",["796"],"import { Col, Row } from \"antd\";\r\nimport TextInputGroup from \"components/TextInputGroup/TextInputGroup\";\r\nimport { useState } from \"react\";\r\nimport \"./SettingTimeLayout.css\";\r\n\r\nconst SettingTimeLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n  // const [ appSetting, setAppSetting ] = useState({\r\n  //   time_stop: \"00:01:30\",\r\n  //   time_production: \"08:00:00\",\r\n  // });\r\n\r\n  if (!appSetting.hasOwnProperty(\"time_stop\")) {\r\n    setAppSetting({ ...appSetting, time_stop: \"00:01:30\" });\r\n  }\r\n\r\n  if (!appSetting.hasOwnProperty(\"time_production\")) {\r\n    setAppSetting({ ...appSetting, time_production: \"08:00:00\" });\r\n  }\r\n\r\n  const commafy = (num) => {\r\n    var str = num.toString().split(\".\");\r\n    if (str[0].length >= 5) {\r\n      str[0] = str[0].replace(/(\\d)(?=(\\d{3})+$)/g, \"$1,\");\r\n    }\r\n    if (str[1] && str[1].length >= 5) {\r\n      str[1] = str[1].replace(/(\\d{3})/g, \"$1 \");\r\n    }\r\n    return str.join(\".\");\r\n  };\r\n\r\n  const getSecondFromTime = (time) => {\r\n    var timeList = time.split(\":\");\r\n    var hr = isNaN(parseInt(timeList[0])) ? 0 : parseInt(timeList[0]);\r\n    var min = isNaN(parseInt(timeList[1])) ? 0 : parseInt(timeList[1]);\r\n    var sec = isNaN(parseInt(timeList[2])) ? 0 : parseInt(timeList[2]);\r\n    return hr * 3600 + min * 60 + sec;\r\n  };\r\n\r\n  const setTimeSettings = (field, value) => {\r\n    var newSetting = { ...appSetting };\r\n    newSetting[field] = value;\r\n    setAppSetting({ ...newSetting });\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-time-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-time-title\">Time Settings</span>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"settings-time-content\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <TextInputGroup\r\n              initValue={appSetting}\r\n              field=\"time_stop\"\r\n              updateValue={setTimeSettings}\r\n              title={`Stop Time Limit (${commafy(\r\n                getSecondFromTime(appSetting.time_stop)\r\n              )} s)`}\r\n              isCenter={true}\r\n              input_type=\"time-setting\"\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <TextInputGroup\r\n              initValue={appSetting}\r\n              field=\"time_production\"\r\n              updateValue={setTimeSettings}\r\n              title={\"Planned Production Time\"}\r\n              isCenter={true}\r\n              input_type=\"time-setting\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingTimeLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingShiftTimeLayout\\SettingShiftTimeLayout.js",["797","798","799","800","801"],"import { useSelector } from \"react-redux\";\r\nimport \"./SettingShiftTimeLayout.css\";\r\nimport { Col, Radio, Row, message } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport TextInputGroup from \"components/TextInputGroup/TextInputGroup\";\r\nimport { shiftSettingInfo } from \"services/global\";\r\n\r\nconst SettingShiftTimeLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n  // const [appSetting, setAppSetting] = useState({\r\n  //   shift1_ppt: \"00:00:30\",\r\n  //   shift2_ppt: \"05:00:00\",\r\n  //   shift3_ppt: \"05:00:00\",\r\n  // });\r\n\r\n  const setShiftPPTSettings = (field, value) => {\r\n    var newSetting = { ...appSetting };\r\n    newSetting[field] = value;\r\n    setAppSetting({ ...newSetting });\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-shift-time-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-shift-time-title\">\r\n            Shifts Planned Production Time Settings\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"settings-shift-time-content\">\r\n        <Row>\r\n          <Col span={8}>\r\n            <TextInputGroup\r\n              initValue={appSetting}\r\n              field=\"shift1_ppt\"\r\n              updateValue={setShiftPPTSettings}\r\n              title={\"Shift1\"}\r\n              isCenter={true}\r\n              input_type=\"time-setting\"\r\n            />\r\n          </Col>\r\n          <Col span={8}>\r\n            <TextInputGroup\r\n              initValue={appSetting}\r\n              field=\"shift2_ppt\"\r\n              updateValue={setShiftPPTSettings}\r\n              title={\"Shift2\"}\r\n              isCenter={true}\r\n              input_type=\"time-setting\"\r\n            />\r\n          </Col>\r\n          <Col span={8}>\r\n            <TextInputGroup\r\n              initValue={appSetting}\r\n              field=\"shift3_ppt\"\r\n              updateValue={setShiftPPTSettings}\r\n              title={\"Shift3\"}\r\n              isCenter={true}\r\n              input_type=\"time-setting\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingShiftTimeLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingProcessMonitorLayout\\SettingProcessMonitorLayout.js",["802"],"import { Col, Radio, Row, message } from \"antd\";\r\nimport \"./SettingProcessMonitorLayout.css\";\r\n\r\nconst SettingProcessMonitorLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n\r\n  const processMonitorTypes = [\r\n    { value: 0, title: \"None\" },\r\n    { value: 1, title: \"Time Logger\" },\r\n    { value: 2, title: \"Cleaning Station\" },\r\n    { value: 3, title: \"Blast Station\" },\r\n    { value: 4, title: \"Paint Station\" },\r\n    { value: 5, title: \"Assembly Station 137\" },\r\n    { value: 6, title: \"Assembly Station 136\" },\r\n    { value: 7, title: \"Assembly Station 3\" },\r\n    { value: 8, title: \"Quality\" },\r\n  ];\r\n\r\n  const setProcessType = (value) => {\r\n    var newSetting = { ...appSetting, process: value };\r\n    setAppSetting(newSetting);\r\n  };\r\n\r\n  const processMonitorTypeOptions = processMonitorTypes.map((pmType) => {\r\n    return (\r\n      <Col\r\n        className=\"app-setting-process-monitor-option-item\"\r\n        span={6}\r\n        key={processMonitorTypes.indexOf(pmType)}\r\n      >\r\n        <Radio value={pmType.value} style={{ color: \"white\" }}>\r\n          {pmType.title}\r\n        </Radio>\r\n      </Col>\r\n    );\r\n  });\r\n\r\n  const onEditJobID = () => {\r\n    message.info(\"onEditJobID Clicked\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-process-monitor-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-process-monitor-title\">\r\n            Choose Type For Process Monitor\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Radio.Group\r\n        // onChange={updateValue}\r\n        value={appSetting.process}\r\n        className=\"app-setting-process-monitor-option\"\r\n        onChange={(e) => {\r\n          setProcessType(e.target.value);\r\n        }}\r\n      >\r\n        <Row>{processMonitorTypeOptions}</Row>\r\n      </Radio.Group>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingProcessMonitorLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingMachineInfoLayout\\SettingMachineInfoLayout.js",["803"],"import { Col, Row } from \"antd\";\r\nimport TextInput from \"components/TextInput/TextInput\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport deviceBluetoothIcon from \"../../assets/icons/ic_device_bluetooth.png\";\r\nimport deviceSelectIcon from \"../../assets/icons/ic_device_select.png\";\r\nimport machinenNameIcon from \"../../assets/icons/ic_machine_name.png\";\r\nimport AccountIDModal from \"./AccountIDModal/AccountIDModal\";\r\nimport \"./SettingMachineInfoLayout.css\";\r\n\r\nconst SettingMachineInfoLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n  const { factoryDataStore } = useSelector((x) => x.factoryDataStore);\r\n  const [showAccountID, setShowAccountID] = useState(false);\r\n  const [deviceAddress, setDeviceAddress] = useState(\"79:56:CE:25:30:55\");\r\n\r\n  const { accountId } = factoryDataStore;\r\n\r\n  const onClickBlueTooth = () => {};\r\n\r\n  const onClickAccountId = () => {\r\n    setShowAccountID(true);\r\n  };\r\n\r\n  const setMachineName = (value) => {\r\n    var newSetting = { ...appSetting, machineName: value };\r\n    setAppSetting(newSetting);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-machine-info-layout\">\r\n      <AccountIDModal\r\n        showModal={showAccountID}\r\n        setShowModal={setShowAccountID}\r\n      />\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-machine-info-title\">\r\n            Machine Information\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row className=\"settings-machine-info-content\" align={\"middle\"}>\r\n        <Col span={12}>\r\n          <div>\r\n            <TextInput\r\n              title={\"Machine Name\"}\r\n              value={appSetting.machineName}\r\n              setValue={setMachineName}\r\n            />\r\n            <img\r\n              src={machinenNameIcon}\r\n              className=\"app-setting-machine-info-icon\"\r\n              alt=\"machine-name\"\r\n            />\r\n          </div>\r\n        </Col>\r\n\r\n        {/* This is not used */}\r\n        <Col span={8} style={{ paddingLeft: \"20px\", display:\"none\" }}>\r\n          <div onClick={onClickBlueTooth}>\r\n            <TextInput\r\n              title={\"Device Address\"}\r\n              value={deviceAddress}\r\n              setValue={setDeviceAddress}\r\n              disabled={true}\r\n            />\r\n            <img\r\n              src={deviceBluetoothIcon}\r\n              className=\"app-setting-machine-info-icon\"\r\n              alt=\"bluetooth\"\r\n            />\r\n          </div>\r\n        </Col>\r\n\r\n        <Col span={12} style={{ paddingLeft: \"20px\" }}>\r\n          <div onClick={onClickAccountId}>\r\n            <TextInput title={\"Account ID\"} value={accountId} disabled={true} />\r\n            <img\r\n              src={deviceSelectIcon}\r\n              className=\"app-setting-machine-info-icon\"\r\n              alt=\"machine-setting\"\r\n            />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingMachineInfoLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingGanttChartLayout\\SettingGanttChartLayout.js",["804"],"import { Col, Row } from \"antd\";\r\nimport OptionInput from \"components/OptionInput/OptionInput\";\r\nimport { useState } from \"react\";\r\nimport SettingGanttChartCalcLayout from \"./SettingGanttChartCalcLayout/SettingGanttChartCalcLayout\";\r\nimport \"./SettingGanttChartLayout.css\";\r\n\r\nconst SettingGanttChartLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n  \r\n  const setGanttChartSettings = (field, value) => {\r\n    var newSetting = { ...appSetting };\r\n    newSetting[field] = value;\r\n    setAppSetting({ ...newSetting });\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-gantt-chart-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-gantt-chart-title\">\r\n            {\"Gantt Chart Settings\"}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"settings-gantt-chart-content\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <OptionInput\r\n              span={24}\r\n              initValue={appSetting}\r\n              field=\"gantt_chart_display\"\r\n              updateValue={setGanttChartSettings}\r\n              title={[\r\n                \"Show gantt data from 00:00 to 23:00\",\r\n                \"Show gantt data from 00:00 to current time\",\r\n                \"Show Daily Goal Chart\",\r\n              ]}\r\n            />\r\n          </Col>\r\n          {appSetting[\"gantt_chart_display\"] === \"2\" && (\r\n            <Col span={12}>\r\n              <SettingGanttChartCalcLayout\r\n                appSetting={appSetting}\r\n                setAppSetting={setAppSetting}\r\n              />\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingGanttChartLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingDowntimeLayout\\SettingDowntimeLayout.js",["805"],"import { Col, Row } from \"antd\";\r\nimport TextInputGroup from \"components/TextInputGroup/TextInputGroup\";\r\nimport { useState } from \"react\";\r\nimport \"./SettingDowntimeLayout.css\";\r\n\r\nconst SettingDowntimeLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n\r\n  const downtimeSettingsTitles = [\r\n    { key: \"downtime_reason1\", title: \"Downtune Reason1\" },\r\n    { key: \"downtime_reason2\", title: \"Downtune Reason2\" },\r\n    { key: \"downtime_reason3\", title: \"Downtune Reason3\" },\r\n    { key: \"downtime_reason4\", title: \"Downtune Reason4\" },\r\n    { key: \"downtime_reason5\", title: \"Downtune Reason5\" },\r\n    { key: \"downtime_reason6\", title: \"Downtune Reason6\" },\r\n    { key: \"downtime_reason7\", title: \"Downtune Reason7\" },\r\n    { key: \"downtime_reason8\", title: \"Downtune Reason8\" },\r\n  ];\r\n\r\n  const setDowntimeTitle = (field, value) => {\r\n    var newSetting = { ...appSetting, [field]: value };\r\n    //newSetting[field] = value;\r\n    //setAppSetting({ ...newSetting });\r\n    setAppSetting(newSetting);\r\n  };\r\n\r\n  const downtimeSettingsTextInputs = downtimeSettingsTitles.map((dTitle) => {\r\n    return (\r\n      <Col className=\"app-setting-downtime-item\" span={6} key={dTitle.key}>\r\n        <TextInputGroup\r\n          initValue={appSetting}\r\n          title={dTitle.title}\r\n          field={dTitle.key}\r\n          updateValue={setDowntimeTitle}\r\n        />\r\n      </Col>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"settings-downtime-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-downtime-title\">Downtime Settings</span>\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ paddingLeft: \"20px\", paddingRight: \"20px\" }}>\r\n        {downtimeSettingsTextInputs}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingDowntimeLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingCycleStopAlertLayout\\SettingCycleStopAlertLayout.js",["806","807"],"import { Col, Row, message } from \"antd\";\r\nimport RadialInputGroup from \"components/RadialInputGroup/RadialInputGroup\";\r\nimport TextInputGroup from \"components/TextInputGroup/TextInputGroup\";\r\nimport TextWithIcon from \"components/TextWithIcon/TextWithIcon\";\r\nimport CycleAlertInfoModal from \"layouts/CycleAlertInfo/CycleAlertInfoModal\";\r\nimport { useState } from \"react\";\r\nimport cycleStopAlertIcon from \"../../assets/icons/ic_machine_name.png\";\r\nimport \"./SettingCycleStopAlertLayout.css\";\r\n\r\nconst SettingCycleStopAlertLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n  // const [appSetting, setAppSetting] = useState({\r\n  //   cycle_send_alert: \"0\",\r\n  //   cycle_email1: \"aa@aa.com\",\r\n  //   cycle_email2: \"\",\r\n  //   cycle_email3: \"\",\r\n  // });\r\n\r\n  const [cycleAlertInfoModal, setCycleAlertInfoModal] = useState(false);\r\n\r\n  const setCycleStopSettings = (field, value) => {\r\n    var newSetting = { ...appSetting };\r\n    newSetting[field] = value;\r\n    setAppSetting({ ...newSetting });\r\n  };\r\n\r\n  const emailValidation = (fieldName, value) => {\r\n    if (value === \"\") return true;\r\n    if (\r\n      /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\r\n        value\r\n      )\r\n    ) {\r\n      return true;\r\n    }\r\n    message.error(`Please enter a valid email for ${fieldName}`);\r\n    return false;\r\n  };\r\n\r\n  const timeValidation = (fieldName, value) => {\r\n    var timeList = value.split(\":\");\r\n    if (\r\n      timeList.length != 3 ||\r\n      isNaN(parseInt(timeList[0])) ||\r\n      isNaN(parseInt(timeList[1])) ||\r\n      isNaN(parseInt(timeList[2])) ||\r\n      parseInt(timeList[1]) >= 60 ||\r\n      parseInt(timeList[2]) >= 60\r\n    ) {\r\n      message.error(`Please enter a valid time for ${fieldName}`);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const validate_info = (values) => {\r\n    var res = true;\r\n\r\n    res = timeValidation(\"Stop Time Limit\", values.time_stop);\r\n    if (res === false) return false;\r\n    res = timeValidation(\"Planned Production Time\", values.time_production);\r\n    if (res === false) return false;\r\n\r\n    res = emailValidation(\"Alert Email1\", values.cycle_email1);\r\n    if (res === false) return false;\r\n    res = emailValidation(\"Alert Email2\", values.cycle_email2);\r\n    if (res === false) return false;\r\n    res = emailValidation(\"Alert Email3\", values.cycle_email3);\r\n    if (res === false) return false;\r\n\r\n    return res;\r\n  };\r\n\r\n  const onClickInfoIcon = () => {\r\n    setCycleAlertInfoModal(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-cycle-stop-alert-layout\">\r\n      <CycleAlertInfoModal\r\n        cycleAlertInfoModal={cycleAlertInfoModal}\r\n        setCycleAlertInfoModal={setCycleAlertInfoModal}\r\n      />\r\n      <Row align=\"middle\" className=\"settings-cycle-stop-alert-title\">\r\n        <Col span={24}>\r\n          <TextWithIcon\r\n            text={\"Cyle Stop Alert\"}\r\n            icon={cycleStopAlertIcon}\r\n            marginLeft={\"30px\"}\r\n            iconSize={\"35px\"}\r\n            fontSize={\"21px\"}\r\n            iconBottom={\"2px\"}\r\n            iconClick={onClickInfoIcon}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <div className=\"settings-cycle-stop-alert-content\">\r\n        <Row>\r\n          <Col span={6}>\r\n            <RadialInputGroup\r\n              initValue={appSetting}\r\n              field=\"cycle_send_alert\"\r\n              updateValue={setCycleStopSettings}\r\n              title={\"Send Alert\"}\r\n            />\r\n          </Col>\r\n          <Col span={6}>\r\n            <TextInputGroup\r\n              initValue={appSetting}\r\n              field=\"cycle_email1\"\r\n              updateValue={setCycleStopSettings}\r\n              title={\"Alert Email 1\"}\r\n              input_type=\"email\"\r\n            />\r\n          </Col>\r\n          <Col span={6}>\r\n            <TextInputGroup\r\n              initValue={appSetting}\r\n              field=\"cycle_email2\"\r\n              updateValue={setCycleStopSettings}\r\n              title={\"Alert Email 2\"}\r\n              input_type=\"email\"\r\n            />\r\n          </Col>\r\n          <Col span={6}>\r\n            <TextInputGroup\r\n              initValue={appSetting}\r\n              field=\"cycle_email3\"\r\n              updateValue={setCycleStopSettings}\r\n              title={\"Alert Email 3\"}\r\n              input_type=\"email\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingCycleStopAlertLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingCSLockLayout\\SettingCSLockLayout.js",["808"],"import { Col, Row } from \"antd\";\r\nimport RadialInputGroup from \"components/RadialInputGroup/RadialInputGroup\";\r\nimport { useState } from \"react\";\r\nimport \"./SettingCSLockLayout.css\";\r\n\r\nconst SettingCSLockLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n\r\n  const setCSLockSettings = (field, value) => {\r\n    var newSetting = { ...appSetting };\r\n    newSetting[field] = value;\r\n    setAppSetting({ ...newSetting });\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-cslock-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-cslock-title\">CSLock Settings</span>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"settings-cslock-content\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <RadialInputGroup\r\n              initValue={appSetting}\r\n              field=\"cslock_cycle\"\r\n              updateValue={setCSLockSettings}\r\n              title={\"Use Cycle Start Interlock\"}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <RadialInputGroup\r\n              initValue={appSetting}\r\n              field=\"cslock_reverse\"\r\n              updateValue={setCSLockSettings}\r\n              title={\"CSLock Normally Open\"}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <RadialInputGroup\r\n              initValue={appSetting}\r\n              field=\"cslock_guest\"\r\n              updateValue={setCSLockSettings}\r\n              title={\"Quest Lock\"}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <RadialInputGroup\r\n              initValue={appSetting}\r\n              field=\"cslock_alert\"\r\n              updateValue={setCSLockSettings}\r\n              title={\"Enable Alert Sound\"}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingCSLockLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingAuxDataLayout\\SettingAuxDataLayout.js",["809"],"import { Col, Row } from \"antd\";\r\nimport TextInputGroup from \"components/TextInputGroup/TextInputGroup\";\r\nimport { useState } from \"react\";\r\nimport \"./SettingAuxDataLayout.css\";\r\n\r\nconst SettingAuxDataLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n\r\n  const auxDataTitles = [\r\n    { key: \"auxData1\", title: \"Aux1Data\" },\r\n    { key: \"auxData2\", title: \"Aux2Data\" },\r\n    { key: \"auxData3\", title: \"Aux3Data\" },\r\n  ];\r\n\r\n  const setAuxSettings = (field, value) => {\r\n    var newSetting = { ...appSetting };\r\n    newSetting[field] = value;\r\n    setAppSetting(newSetting);\r\n  };\r\n\r\n  const auxDataTextInputs = auxDataTitles.map((dTitle) => {\r\n    return (\r\n      <Col span={8} key={dTitle.key}>\r\n        <TextInputGroup\r\n          initValue={appSetting}\r\n          title={dTitle.title}\r\n          field={dTitle.key}\r\n          updateValue={setAuxSettings}\r\n        />\r\n      </Col>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"settings-auxData-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-auxData-title\">AuxData Title Settings</span>\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ paddingLeft: \"20px\", paddingRight: \"20px\" }}>\r\n        {auxDataTextInputs}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingAuxDataLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingAutomaticCounterLayout\\SettingAutomaticCounterLayout.js",["810"],"import { Col, Row } from \"antd\";\r\nimport RadialInputGroup from \"components/RadialInputGroup/RadialInputGroup\";\r\nimport SliderInput from \"components/SliderInput/SliderInput\";\r\nimport TextInputGroup from \"components/TextInputGroup/TextInputGroup\";\r\nimport { useState } from \"react\";\r\nimport \"./SettingAutomaticCounterLayout.css\";\r\n\r\nconst SettingAutomaticCounterLayout = (props) => {\r\n  const { appSetting, setAppSetting } = props;\r\n  // const [appSetting, setAppSetting] = useState({\r\n  //   automatic_part: \"0\",\r\n  //   automatic_min_time: \"10\",\r\n  //   automatic_part_per_cycle: \"1\",\r\n  // });\r\n\r\n  const setAppSettings = (field, value) => {\r\n    var newSetting = { ...appSetting };\r\n    newSetting[field] = value;\r\n    setAppSetting({ ...newSetting });\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-automatic-parts-counter-layout\">\r\n      <Row align=\"middle\">\r\n        <Col span={24}>\r\n          <span className=\"settings-automatic-parts-counter-title\">\r\n            {\"Automatic Parts Counter\"}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"settings-automatic-parts-counter-content\">\r\n        <Row>\r\n          <Col span={6}>\r\n            <RadialInputGroup\r\n              initValue={appSetting}\r\n              field=\"automatic_part\"\r\n              updateValue={setAppSettings}\r\n              title={\"Automatic Count\"}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <SliderInput\r\n              initValue={appSetting}\r\n              field=\"automatic_min_time\"\r\n              updateValue={setAppSettings}\r\n              title={`Min Elapsed Cycle Time(${appSetting.automatic_min_time}s)`}\r\n            />\r\n          </Col>\r\n          <Col span={6}>\r\n            <TextInputGroup\r\n              initValue={appSetting}\r\n              field=\"automatic_part_per_cycle\"\r\n              updateValue={setAppSettings}\r\n              title={\"Parts per cycle\"}\r\n              input_type=\"number\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingAutomaticCounterLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\MachineStatusButton\\MachineStatusButton.js",["811","812","813","814","815","816","817"],"// @flow strict\r\n\r\nimport { Col, Input, Row, message } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./MachineStatusButton.css\";\r\nimport { secondToTime, factoryData, setFactoryData } from \"services/global\";\r\nimport { setFactoryDataStore } from \"redux/actions/factoryActions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction MachineStatusButton(props) {\r\n  const dispatch = useDispatch();\r\n  const { status, marginLeft, marginRight } = props;\r\n  const [idleStatusTime, setIdleStatusTime] = useState(\"00:00:00\");\r\n\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { factoryDataStore } = useSelector((x) => x.factoryDataStore);\r\n\r\n  useEffect(() => {\r\n    let statusIndex =\r\n      factoryDataStore.machine_status.findIndex((x) => x == status) > 0\r\n        ? factoryDataStore.machine_status.findIndex((x) => x == status)\r\n        : 0;\r\n    setIdleStatusTime(secondToTime(factoryDataStore.idle_times[statusIndex]));\r\n  }, [factoryDataStore.machine_status, factoryDataStore.idle_times]);\r\n\r\n  const onClick = () => {\r\n    let newFactoryData = {\r\n      ...factoryData,\r\n      ...{ idle_status: status },\r\n    };\r\n    setFactoryData(newFactoryData);\r\n    dispatch(setFactoryDataStore(newFactoryData));\r\n  };\r\n\r\n  return (\r\n    <Row\r\n      className=\"machine-status-button\"\r\n      style={{\r\n        backgroundColor:\r\n          status === factoryDataStore.idle_status\r\n            ? \"rgba(206, 15, 253, 0.7)\"\r\n            : \"rgba(255, 255, 255, 0.6)\",\r\n        marginLeft: marginLeft !== undefined ? marginLeft : \"0px\",\r\n      }}\r\n      align=\"middle\"\r\n      onClick={() => onClick()}\r\n    >\r\n      <Col span={24} style={{ textAlign: \"center\" }}>\r\n        <div style={{ display: \"block\" }}>\r\n          <div\r\n            className=\"machine-status-text\"\r\n            style={{\r\n              color:\r\n                status === factoryDataStore.idle_status ? \"white\" : \"black\",\r\n            }}\r\n            align=\"middle\"\r\n          >\r\n            {status}\r\n          </div>\r\n          <div\r\n            className=\"machine-status-text\"\r\n            style={{\r\n              color:\r\n                status === factoryDataStore.idle_status ? \"white\" : \"black\",\r\n            }}\r\n            align=\"middle\"\r\n          >\r\n            {idleStatusTime}\r\n          </div>\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default MachineStatusButton;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingMachineInfoLayout\\AccountIDModal\\AccountIDModal.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\SettingGanttChartLayout\\SettingGanttChartCalcLayout\\SettingGanttChartCalcLayout.js",["818","819","820"],"import { Select } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./SettingGanttChartCalcLayout.css\";\r\nimport TextInputGroup from \"components/TextInputGroup/TextInputGroup\";\r\nimport OptionInput from \"components/OptionInput/OptionInput\";\r\nimport { gdtFomulars } from \"services/CONSTANTS\"\r\n\r\nconst { Option } = Select;\r\n\r\nfunction SettingGanttChartCalcLayout(props) {\r\n  const { appSetting, setAppSetting } = props;\r\n  \r\n  const setGDTSettings = (field, value) => {\r\n    var newSetting = { ...appSetting };\r\n    newSetting[field] = value;\r\n    setAppSetting({ ...newSetting });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextInputGroup\r\n        initValue={appSetting}\r\n        field=\"calc_chart_title\"\r\n        updateValue={setGDTSettings}\r\n        title=\"Title\"\r\n        input_type=\"text\"\r\n      />\r\n      <div className=\"settings-gantt-chart-calc-option-container\">\r\n        <div>Formula</div>\r\n        <Select\r\n          style={{ width: \"100%\" }}\r\n          popupClassName=\"settings-gantt-chart-calc-dropdown\"\r\n          value={appSetting[\"calc_chart_formula\"]}\r\n          onChange={(e) => setGDTSettings(\"calc_chart_formula\", e)}\r\n        >\r\n          {gdtFomulars.map((x) => {\r\n            return (\r\n              <Option\r\n                className=\"settings-gantt-chart-calc-dropdown-item\"\r\n                key={`formula-${x[\"id\"]}`}\r\n                value={x[\"id\"]}\r\n              >\r\n                {x[\"name\"]}\r\n              </Option>\r\n            );\r\n          })}\r\n        </Select>\r\n      </div>\r\n\r\n      <div className=\"settings-gantt-chart-calc-option-container\">\r\n        <div>Parameter</div>\r\n        <Select\r\n          style={{ width: \"100%\" }}\r\n          className=\"page-changer-style\"\r\n          popupClassName=\"settings-gantt-chart-calc-dropdown\"\r\n          value={appSetting[\"calc_chart_option\"]}\r\n          onChange={(e) => setGDTSettings(\"calc_chart_option\", e)}\r\n        >\r\n          <Option\r\n            className=\"settings-gantt-chart-calc-dropdown-item\"\r\n            key={`option-0`}\r\n            value=\"0\"\r\n          >\r\n            None\r\n          </Option>\r\n\r\n          <Option\r\n            className=\"settings-gantt-chart-calc-dropdown-item\"\r\n            key={`option-1`}\r\n            value=\"1\"\r\n          >\r\n            Current Operator\r\n          </Option>\r\n\r\n          <Option\r\n            className=\"settings-gantt-chart-calc-dropdown-item\"\r\n            key={`option-2`}\r\n            value=\"2\"\r\n          >\r\n            Current Job ID\r\n          </Option>\r\n        </Select>\r\n      </div>\r\n\r\n      <TextInputGroup\r\n        initValue={appSetting}\r\n        field=\"calc_chart_unit\"\r\n        updateValue={setGDTSettings}\r\n        title=\"Display Units\"\r\n        input_type=\"text\"\r\n      />\r\n\r\n      <div className=\"settings-gantt-chart-calc-option-container\">\r\n        <OptionInput\r\n          span={12}\r\n          initValue={appSetting}\r\n          field=\"calc_chart_disp_mode\"\r\n          updateValue={setGDTSettings}\r\n          title={[\"Show Unit\", \"Show %\"]}\r\n        />\r\n      </div>\r\n\r\n      <TextInputGroup\r\n        initValue={appSetting}\r\n        field=\"calc_chart_max_value\"\r\n        updateValue={setGDTSettings}\r\n        title=\"Daily Target\"\r\n        input_type=\"number\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingGanttChartCalcLayout;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\DashboardMachineInfoLayout\\JobIDModal\\JobIDModal.js",["821"],"import { Button, Col, Row, message } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\nimport { LS_ITEMS } from \"services/CONSTANTS\";\r\nimport { appData, factoryData } from \"services/global\";\r\nimport \"./JobIDModal.css\";\r\n\r\nfunction JobIDModal(props) {\r\n  const dispatch = useDispatch();\r\n  const { showModal, setShowModal } = props;\r\n  const [jobID, setJobID] = useState(\"\");\r\n\r\n  const onCancel = () => {\r\n    setJobID(\"\");\r\n    setShowModal(false);\r\n  };\r\n\r\n  const onOK = () => {\r\n    if (factoryData.accountId === \"\") {\r\n      message.error(\"Please setup the factory\");\r\n      return;\r\n    }\r\n    if (jobID === \"\" || jobID === undefined) return;\r\n    appData.jobId = jobID;\r\n    dispatch(setAppDataStore(appData));\r\n    setJobID(\"\");\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        centered\r\n        open={showModal}\r\n        className=\"job-id-dialog-style\"\r\n        title={null}\r\n        onCancel={() => onCancel()}\r\n        closable={false}\r\n        maskClosable={false}\r\n        destroyOnClose={true}\r\n        header={null}\r\n        footer={null}\r\n      >\r\n        <div>\r\n          <Row align=\"middle\" className=\"job-id-dialog-top\">\r\n            <Col>\r\n              <span className=\"job-id-dialog-title\">Job ID Input</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"job-id-dialog-content\">\r\n            <Col span={24} style={{ textAlign: \"center\" }}>\r\n              <span className=\"job-id-dialog-input-desc\">\r\n                Please Input Job ID\r\n              </span>\r\n            </Col>\r\n            <Col span={24}>\r\n              <input\r\n                className=\"job-id-dialog-input\"\r\n                value={jobID}\r\n                onChange={(e) => setJobID(e.target.value)}\r\n                style={{ outlineStyle: \"none\" }}\r\n              />\r\n            </Col>\r\n\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"job-id-dialog-button\"\r\n                style={{ marginRight: \"5px\" }}\r\n                onClick={onCancel}\r\n                type=\"primary\"\r\n              >\r\n                {\"Cancel\"}\r\n              </Button>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Button\r\n                className=\"job-id-dialog-button\"\r\n                style={{ marginLeft: \"5px\" }}\r\n                onClick={onOK}\r\n                type=\"primary\"\r\n              >\r\n                {\"Ok\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JobIDModal;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\components\\TextInputGroup\\TextInputGroup.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\components\\OptionInput\\OptionInput.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\components\\OneGantt\\OneGantt.js",["822","823","824","825","826","827","828","829","830","831"],"import { Spin } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\n\r\nimport \"./OneGantt.css\";\r\nimport {\r\n  ConvertTimestampToDateBasedOnTimezone,\r\n  GetCustomerCurrentTime,\r\n  GetTimeWithStyle,\r\n  appData,\r\n  factoryData,\r\n  getBetweenTime,\r\n  onlyUnique,\r\n  pad,\r\n} from \"services/global\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { apiCallForGetMachineListData } from \"services/apiCall\";\r\n\r\nfunction OneGantt(props) {\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { factoryDataStore } = useSelector((x) => x.factoryDataStore);\r\n  let customerId = factoryDataStore.accountId;\r\n  let machine_id = appDataStore.machineName;\r\n  let timezone = factoryData.customer_details != undefined && factoryData.customer_details.timezone != undefined\r\n      ? factoryData.customer_details.timezone\r\n      : 0;\r\n\r\n  const [chartData, setChartData] = useState([]);\r\n  const [chartColors, setChartColors] = useState([]);\r\n\r\n  const [intervalId, setIntervalID] = useState(null);\r\n  const [tick, setTick] = useState(false);\r\n  const timer = () => setTick((t) => !t);\r\n\r\n  useEffect(() => {\r\n    loadGanttData();\r\n  }, [tick]);\r\n\r\n  useEffect(() => {\r\n    loadGanttData();\r\n    clearInterval(intervalId);\r\n    setIntervalID(setInterval(timer, 60000));\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  const loadGanttData = () => {\r\n    let customerTime = GetCustomerCurrentTime(timezone);\r\n    let startDate =\r\n      pad(customerTime.getMonth() + 1) +\r\n      \"/\" +\r\n      pad(customerTime.getDate()) +\r\n      \"/\" +\r\n      pad(customerTime.getFullYear());\r\n    let endDate = GetCustomerCurrentTime(timezone);\r\n    endDate.setDate(endDate.getDate() + 1);\r\n    endDate =\r\n      pad(endDate.getMonth() + 1) +\r\n      \"/\" +\r\n      pad(endDate.getDate()) +\r\n      \"/\" +\r\n      pad(endDate.getFullYear());\r\n    apiCallForGetMachineListData(\r\n      customerId,\r\n      machine_id,\r\n      timezone,\r\n      startDate,\r\n      endDate,\r\n      (res) => {\r\n        if (res !== null && res.data !== null && res.data.gantt.length > 0) {\r\n          let ganttList = [];\r\n          let tmpGantt = [];\r\n          var machineList = res.data.gantt\r\n            .map((item) => item.machine_id)\r\n            .filter(onlyUnique);\r\n          let ganttInfo = undefined;\r\n          for (var i = 0; i < machineList.length; i++) {\r\n            var tmp = res.data.gantt.filter(\r\n              (item) => item.machine_id === machineList[i]\r\n            );\r\n            ganttList = tmpGantt.concat(FilterOneMachineGanttData(tmp));\r\n            if (ganttList != undefined && ganttList.length > 0) {\r\n              ganttInfo = ganttList.filter(\r\n                (gantt) => gantt[\"machine_id\"] == machine_id\r\n              );\r\n            }\r\n          }\r\n          setGanttInfo(ganttInfo);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const FilterOneMachineGanttData = (_ganttInfo) => {\r\n    let tmpList = [];\r\n    // remove overrided times\r\n    for (let i = 0; i < _ganttInfo.length - 1; i++) {\r\n      if (_ganttInfo[i].end > _ganttInfo[i + 1].start) {\r\n        _ganttInfo[i].end = _ganttInfo[i + 1].start;\r\n      }\r\n    }\r\n\r\n    // connect continuous data\r\n    for (let i = 0; i < _ganttInfo.length; i++) {\r\n      var connected = false;\r\n\r\n      if (\r\n        i < _ganttInfo.length - 1 &&\r\n        _ganttInfo[i].status.toUpperCase() ===\r\n          _ganttInfo[i + 1].status.toUpperCase() &&\r\n        _ganttInfo[i].end === _ganttInfo[i + 1].start\r\n      ) {\r\n        _ganttInfo[i + 1].start = _ganttInfo[i].start;\r\n        connected = true;\r\n      }\r\n\r\n      if (connected === false) {\r\n        tmpList.push(_ganttInfo[i]);\r\n      }\r\n    }\r\n    return tmpList;\r\n  };\r\n\r\n  const columns = [\r\n    { type: \"string\", id: \"Position\" },\r\n    { type: \"string\", id: \"President\" },\r\n    { type: \"string\", role: \"tooltip\", id: \"tmp\", p: { html: true } },\r\n    { type: \"datetime\", id: \"Start\" },\r\n    { type: \"datetime\", id: \"End\" },\r\n  ];\r\n\r\n  const setGanttInfo = (ganttInfo) => {\r\n    let ganttData = [];\r\n    let identificationList = [];\r\n    let color_array = [];\r\n    let status_array = [];\r\n\r\n    if (ganttInfo !== undefined && ganttInfo.length > 0) {\r\n      let startDate = GetCustomerCurrentTime(timezone);\r\n      startDate.setHours(0, 0, 0);\r\n\r\n      let endDate = GetCustomerCurrentTime(timezone);\r\n      endDate.setHours(0, 0, 0);\r\n      endDate.setDate(endDate.getDate() + 1);\r\n\r\n      if (startDate.getTime() / 1000 < parseInt(ganttInfo[0].start)) {\r\n        status_array.push(\"start\");\r\n        color_array.push(\"white\");\r\n        ganttData.push([machine_id, \"start\", \"\", startDate, startDate]);\r\n        identificationList.push(\"\");\r\n      }\r\n      ganttData = ganttData.concat(\r\n        ganttInfo.map((item) => [\r\n          machine_id,\r\n          item[\"status\"],\r\n          createCustomHTMLContent(\r\n            item[\"status\"],\r\n            ConvertTimestampToDateBasedOnTimezone(item[\"start\"], timezone),\r\n            ConvertTimestampToDateBasedOnTimezone(item[\"end\"], timezone),\r\n            item[\"Operator\"],\r\n            getBetweenTime(item[\"start\"], item[\"end\"]),\r\n            item[\"job_id\"] === undefined ? \"\" : item[\"job_id\"],\r\n            item[\"comment\"] === null || item[\"comment\"] === undefined\r\n              ? \"\"\r\n              : item[\"comment\"]\r\n          ),\r\n          ConvertTimestampToDateBasedOnTimezone(item[\"start\"], timezone),\r\n          ConvertTimestampToDateBasedOnTimezone(item[\"end\"], timezone),\r\n        ])\r\n      );\r\n\r\n      identificationList = identificationList.concat(\r\n        ganttInfo.map((item) => item)\r\n      );\r\n\r\n      for (var i = 0; i < ganttInfo.length; i++) {\r\n        if (\r\n          status_array.filter(\r\n            (item) =>\r\n              item.toLowerCase() === ganttInfo[i][\"status\"].toLowerCase()\r\n          ).length === 0\r\n        ) {\r\n          status_array.push(ganttInfo[i][\"status\"]);\r\n          color_array.push(ganttInfo[i][\"color\"]);\r\n        }\r\n      }\r\n\r\n      if (ganttData.length > 0) {\r\n        if (endDate > ganttData[ganttData.length - 1][3]) {\r\n          status_array.push(\"end\");\r\n          color_array.push(\"white\");\r\n          ganttData.push([machine_id, \"end\", \"\", endDate, endDate]);\r\n          identificationList.push(\"\");\r\n        }\r\n      }\r\n      setChartData([columns, ...ganttData]);\r\n      setChartColors(color_array);\r\n    }\r\n  };\r\n\r\n  function createCustomHTMLContent(\r\n    status,\r\n    from,\r\n    to,\r\n    operator,\r\n    duration,\r\n    jobId,\r\n    comment\r\n  ) {\r\n    return \"\";\r\n    return (\r\n      '<div style=\"padding:5px 5px 5px 5px; background-color:#1e1e1e; color: #eeeeee; text-align: left;width: 220px; \">' +\r\n      \"<span>\" +\r\n      \"Status\" +\r\n      \": <b>\" +\r\n      status +\r\n      \"</b></span><br>\" +\r\n      \"<span>\" +\r\n      \"Time\" +\r\n      \": <b>\" +\r\n      GetTimeWithStyle(from) +\r\n      \" - \" +\r\n      GetTimeWithStyle(to) +\r\n      \"</b></span><br>\" +\r\n      \"<span>\" +\r\n      \"Duration\" +\r\n      \": <b>\" +\r\n      duration +\r\n      \"</b></span><br>\" +\r\n      \"<span>\" +\r\n      \"Operator\" +\r\n      \": <b>\" +\r\n      operator +\r\n      \"</b></span><br>\" +\r\n      \"<span>\" +\r\n      \"Job ID\" +\r\n      \": <b>\" +\r\n      jobId +\r\n      \"</b></span><br>\" +\r\n      \"<span>\" +\r\n      \"Comment\" +\r\n      ': </span><div style=\"margin-left:20px\"><b>' +\r\n      comment +\r\n      \"</b></div>\" +\r\n      \"</div>\"\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", paddingTop: 20, marginRight: 20 }}>\r\n      {chartData.length === 0 ? (\r\n        <Spin size=\"medium\"></Spin>\r\n      ) : (\r\n        <div>\r\n          <Chart\r\n            className=\"one-line-timeline\"\r\n            height={100}\r\n            width={\"100%\"}\r\n            chartType=\"Timeline\"\r\n            data={chartData}\r\n            // chartEvents={chartEvents}\r\n            options={{\r\n              showRowNumber: false,\r\n              showBarLabels: false,\r\n              showName: false,\r\n              timeline: { showRowLabels: false, showBarLabels: false },\r\n              backgroundColor: \"transparent\",\r\n              legend: \"none\",\r\n              colors: chartColors,\r\n              allowHtml: true,\r\n              tooltip: { isHtml: true },\r\n              hAxis: {\r\n                textStyle: {\r\n                  color: \"#FFFFFF\",\r\n                },\r\n                gridlines: {\r\n                  color: \"#FFFFFF\",\r\n                },\r\n                baselineColor: \"#FFFFFF\",\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OneGantt;\r\n","E:\\MMS\\ITS_Site\\Work\\src\\layouts\\CycleAlertInfo\\CycleAlertInfoModal.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\components\\SliderInput\\SliderInput.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\components\\IndicatorItem\\IndicatorItem.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\pages\\LanguageModal\\LanguageModal.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\redux\\reducers\\shiftReducer.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\redux\\actions\\shiftActions.js",[],"E:\\MMS\\ITS_Site\\Work\\src\\layouts\\AlertDlg\\AlertDlg.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\index.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\App.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\store.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\utils\\dropConsole.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\navigation\\RouterConfig.js",["832","833"],"E:\\MMS\\MMSUI_Site\\Work\\src\\navigation\\ProvideAuth.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\reducers\\index.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\navigation\\useProvideAuth.js",["834"],"E:\\MMS\\MMSUI_Site\\Work\\src\\navigation\\CONSTANTS.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\pages\\NotFound.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\actions\\appActions.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\services\\global.js",["835","836","837"],"E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\reducers\\appReducer.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\reducers\\userReducer.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\reducers\\factoryReducer.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\MainLayout\\MainLayout.js",["838","839","840","841","842","843","844","845","846","847"],"E:\\MMS\\MMSUI_Site\\Work\\src\\services\\apiCall.js",["848","849"],"E:\\MMS\\MMSUI_Site\\Work\\src\\services\\CONSTANTS.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\actions\\userActions.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\redux\\actions\\factoryActions.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\pages\\MachineStatus\\MachineStatus.js",["850"],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\InputWidgets\\InputPassword\\InputPassword.js",["851"],["852","853"],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\ButtonWidgets\\NormalButton\\NormalButton.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\InputWidgets\\InputNormal\\InputNormal.js",["854"],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\TopLayout\\TopLayout.js",["855"],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\ContentLayout\\ContentLayout.js",["856","857","858","859","860","861","862","863","864","865","866"],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\BottomLayout\\BottomLayout.js",["867","868","869","870","871","872","873","874","875","876","877","878","879","880"],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\IndicatorDots.js",[],["881","882"],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\UserInfoLayout\\UserInfoLayout.js",["883"],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardUtilizationLayout\\DashboardUtilizationLayout.js",["884","885"],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardOEELayout\\DashboardOEELayout.js",["886","887","888","889"],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardMachineInfoLayout\\DashboardMachineInfoLayout.js",["890"],"import { Col, Row, Spin, message } from \"antd\";\r\nimport { Parser } from \"html-to-react\";\r\nimport InputModeModal from \"layouts/InputModeModal/InputModeModal\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { apiCallForGetJobData } from \"services/apiCall\";\r\nimport { appData, factoryData, timeToSecond } from \"services/global\";\r\nimport jobAttachsIcon from \"../../assets/icons/ic_job_attachs.png\";\r\nimport jobGuideIcon from \"../../assets/icons/ic_job_guides.png\";\r\nimport editIcon from \"../../assets/icons/ic_edit.png\";\r\nimport \"./DashboardMachineInfoLayout.css\";\r\nimport JobIDModal from \"./JobIDModal/JobIDModal\";\r\nimport { setAppDataStore } from \"redux/actions/appActions\";\r\n\r\nconst DashboardMachineInfoLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [isSpinning, setIsSpinning] = useState(false);\r\n\r\n  const [showInputMode, setShowInputMode] = useState(false);\r\n  const [showJobIDInput, setShowJobIDInput] = useState(false);\r\n  const { appDataStore } = useSelector((x) => x.appDataStore);\r\n  const { factoryDataStore } = useSelector((x) => x.factoryDataStore);\r\n\r\n  const [html, setHTML] = useState(\r\n    \"Customer : <b></b><br>\" +\r\n      \"Part Number : <b></b><br>\" +\r\n      \"Program Number : <b></b><br>\" +\r\n      \"Description : <b></b><br>\" +\r\n      \"Parts Per Cycle : <b></b><br>\" +\r\n      \"Target Cycle Time : <b></b><br>\" +\r\n      \"Qty Required : <b></b><br>\" +\r\n      \"Qty Good Completed : <b></b><br>\" +\r\n      \"Aux1 : <b></b><br>\" +\r\n      \"Aux2 : <b></b><br>\" +\r\n      \"Aux3 : <b></b><br>\"\r\n  );\r\n\r\n  const setHTMLString = (jobData) => {\r\n    if (jobData !== undefined && jobData.length > 0) {\r\n      let htmlString =\r\n        \"Customer : <b>\" +\r\n        (jobData[0][\"customer\"] === null ? \"\" : jobData[0][\"customer\"]) +\r\n        \"</b><br>\" +\r\n        \"Part Number : <b>\" +\r\n        (jobData[0][\"partNumber\"] === null ? \"\" : jobData[0][\"partNumber\"]) +\r\n        \"</b><br>\" +\r\n        \"Program Number : <b>\" +\r\n        (jobData[0][\"programNumber\"] === null\r\n          ? \"\"\r\n          : jobData[0][\"programNumber\"]) +\r\n        \"</b><br>\" +\r\n        \"Description : <b>\" +\r\n        (jobData[0][\"description\"] === null ? \"\" : jobData[0][\"description\"]) +\r\n        \"</b><br>\" +\r\n        \"Parts Per Cycle : <b>\" +\r\n        (jobData[0][\"partsPerCycle\"] === null\r\n          ? \"0\"\r\n          : jobData[0][\"partsPerCycle\"]) +\r\n        \"</b><br>\" +\r\n        \"Target Cycle Time : <b>\" +\r\n        (jobData[0][\"targetCycleTime\"] === null\r\n          ? \"00:00:00\"\r\n          : jobData[0][\"targetCycleTime\"]) +\r\n        \"</b><br>\" +\r\n        \"Qty Required : <b>\" +\r\n        (jobData[0][\"qtyRequired\"] === null ? \"\" : jobData[0][\"qtyRequired\"]) +\r\n        \"</b><br>\" +\r\n        \"Qty Good Completed : <b>\" +\r\n        (jobData[0][\"qtyGoodCompleted\"] === null\r\n          ? \"\"\r\n          : jobData[0][\"qtyGoodCompleted\"]) +\r\n        \"</b><br>\" +\r\n        \"Aux1 : <b>\" +\r\n        (jobData[0][\"aux1data\"] === null ? \"\" : jobData[0][\"aux1data\"]) +\r\n        \"</b><br>\" +\r\n        \"Aux2 : <b>\" +\r\n        (jobData[0][\"aux2data\"] === null ? \"\" : jobData[0][\"aux2data\"]) +\r\n        \"</b><br>\" +\r\n        \"Aux3 : <b>\" +\r\n        (jobData[0][\"aux3data\"] === null ? \"\" : jobData[0][\"aux3data\"]) +\r\n        \"</b><br>\";\r\n      setHTML(htmlString);\r\n      appData.partsPerCycle =\r\n        jobData[0][\"partsPerCycle\"] === null ? 0 : jobData[0][\"partsPerCycle\"];\r\n      appData.targetCycleTime =\r\n        jobData[0][\"targetCycleTime\"] === null\r\n          ? 0\r\n          : timeToSecond(jobData[0][\"targetCycleTime\"]);\r\n      setAppDataStore(appData);\r\n    } else {\r\n      let htmlString =\r\n        \"Customer : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Part Number : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Program Number : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Description : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Parts Per Cycle : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Target Cycle Time : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Qty Required : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Qty Good Completed : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Aux1 : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Aux2 : <b>\" +\r\n        \"</b><br>\" +\r\n        \"Aux3 : <b>\" +\r\n        \"</b><br>\";\r\n      appData.partsPerCycle = 0;\r\n      appData.targetCycleTime = 0;\r\n      setAppDataStore(appData);\r\n      setHTML(htmlString);\r\n    }\r\n  };\r\n\r\n  const onLogoutJobID = () => {\r\n    appData.jobId = \"\";\r\n    setHTMLString(\"\");\r\n    dispatch(setAppDataStore(appData));\r\n  };\r\n\r\n  const onJobAttachs = () => {\r\n    message.info(\"onJobAttachs Clicked\");\r\n  };\r\n\r\n  const onJobGuides = () => {\r\n    message.info(\"onJobGhides Clicked\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (factoryData.accountId === \"\" || appData.jobId === \"\") {\r\n      onLogoutJobID();\r\n    } else {\r\n      setIsSpinning(true);\r\n      apiCallForGetJobData(factoryData.accountId, appData.jobId)\r\n        .then((res) => {\r\n          setHTMLString(res);\r\n          setIsSpinning(false);\r\n        })\r\n        .catch((err) => {\r\n          setIsSpinning(false);\r\n          message.error(err);\r\n        });\r\n    }\r\n  }, [factoryDataStore.accountId, appDataStore.jobId]);\r\n\r\n  if (isSpinning) {\r\n    return (\r\n      <Row className=\"dashboard-machine-info-layout\" align={\"middle\"}>\r\n        <Col span={24} style={{ textAlign: \"center\" }}>\r\n          <Spin size={\"large\"} spinning={isSpinning} />\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard-machine-info-layout\">\r\n      <InputModeModal\r\n        title={\"Please Select Job ID Input Mode\"}\r\n        showModal={showInputMode}\r\n        setShowModal={setShowInputMode}\r\n        setShowInput={setShowJobIDInput}\r\n        onLogoutJobID={onLogoutJobID}\r\n      />\r\n      <JobIDModal showModal={showJobIDInput} setShowModal={setShowJobIDInput} />\r\n      <Row align=\"middle\" className=\"dashboard-machine-info-top\">\r\n        <Col span={20}>\r\n          <span className=\"dashboard-machine-info-jobid\">\r\n            {\"Job ID : \"}\r\n            {appDataStore.jobId}\r\n          </span>\r\n        </Col>\r\n        <Col span={4} style={{ textAlign: \"right\" }}>\r\n          <img\r\n            className=\"dashboard-machine-info-jobid-edit\"\r\n            src={editIcon}\r\n            onClick={() => setShowInputMode(true)}\r\n            alt=\"edit\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <div className=\"dashboard-machine-info-content\">\r\n        {Parser().parse(html)}\r\n      </div>\r\n      <img\r\n        className=\"dashboard-machine-info-job-guides\"\r\n        src={jobGuideIcon}\r\n        onClick={() => onJobGuides()}\r\n        alt=\"guides\"\r\n      />\r\n      <img\r\n        className=\"dashboard-machine-info-job-attaches\"\r\n        src={jobAttachsIcon}\r\n        onClick={() => onJobAttachs()}\r\n        alt=\"attaches\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardMachineInfoLayout;\r\n","E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardChartLayout\\DashboardChartLayout.js",["891","892","893","894"],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\TextWithIcon\\TextWithIcon.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardMachineInfoLayout\\JobIDModal\\JobIDModal.js",["895"],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\InputModeModal\\InputModeModal.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\TextInput\\TextInput.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\OneGantt\\OneGantt.js",["896","897","898","899","900"],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\RadialInput\\RadialInput.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\AlertDlg\\AlertDlg.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\LoginIDModal\\LoginIDModal.js",["901"],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\IndicatorItem\\IndicatorItem.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\MachineStatusButton\\MachineStatusButton.js",["902","903","904"],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\TextInputGroup\\TextInputGroup.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\OptionInput\\OptionInput.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\RadialInputGroup\\RadialInputGroup.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\SliderInput\\SliderInput.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\components\\TextInputArrayModal\\TextInputArrayModal.js",["905"],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\MachineInfoLayout\\MachineInfoLayout.js",["906"],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\MachineIDModal\\MachineIDModal.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\DashboardOEELayout\\IndicatorItem.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\FactoryInfoLayout\\FactoryInfoLayout.js",[],"E:\\MMS\\MMSUI_Site\\Work\\src\\layouts\\AccountIDModal\\AccountIDModal.js",[],{"ruleId":"907","replacedBy":"908"},{"ruleId":"909","replacedBy":"910"},{"ruleId":"911","severity":1,"message":"912","line":29,"column":6,"nodeType":"913","endLine":29,"endColumn":18,"suggestions":"914"},{"ruleId":"915","severity":1,"message":"916","line":6,"column":9,"nodeType":"917","messageId":"918","endLine":6,"endColumn":17},{"ruleId":"911","severity":1,"message":"912","line":54,"column":6,"nodeType":"913","endLine":54,"endColumn":8,"suggestions":"919"},{"ruleId":"915","severity":1,"message":"920","line":404,"column":5,"nodeType":"917","messageId":"918","endLine":404,"endColumn":12},{"ruleId":"921","severity":1,"message":"922","line":463,"column":26,"nodeType":"923","messageId":"924","endLine":463,"endColumn":28},{"ruleId":"921","severity":1,"message":"922","line":50,"column":30,"nodeType":"923","messageId":"924","endLine":50,"endColumn":32},{"ruleId":"921","severity":1,"message":"922","line":51,"column":31,"nodeType":"923","messageId":"924","endLine":51,"endColumn":33},{"ruleId":"911","severity":1,"message":"912","line":64,"column":6,"nodeType":"913","endLine":64,"endColumn":12,"suggestions":"925"},{"ruleId":"911","severity":1,"message":"926","line":75,"column":6,"nodeType":"913","endLine":75,"endColumn":8,"suggestions":"927"},{"ruleId":"911","severity":1,"message":"928","line":79,"column":6,"nodeType":"913","endLine":79,"endColumn":60,"suggestions":"929"},{"ruleId":"921","severity":1,"message":"930","line":103,"column":29,"nodeType":"923","messageId":"924","endLine":103,"endColumn":31},{"ruleId":"921","severity":1,"message":"930","line":103,"column":60,"nodeType":"923","messageId":"924","endLine":103,"endColumn":62},{"ruleId":"921","severity":1,"message":"922","line":167,"column":42,"nodeType":"923","messageId":"924","endLine":167,"endColumn":44},{"ruleId":"921","severity":1,"message":"922","line":173,"column":58,"nodeType":"923","messageId":"924","endLine":173,"endColumn":60},{"ruleId":"921","severity":1,"message":"930","line":150,"column":13,"nodeType":"923","messageId":"924","endLine":150,"endColumn":15},{"ruleId":"921","severity":1,"message":"930","line":150,"column":35,"nodeType":"923","messageId":"924","endLine":150,"endColumn":37},{"ruleId":"911","severity":1,"message":"931","line":29,"column":6,"nodeType":"913","endLine":29,"endColumn":8,"suggestions":"932"},{"ruleId":"911","severity":1,"message":"933","line":37,"column":6,"nodeType":"913","endLine":37,"endColumn":12,"suggestions":"934"},{"ruleId":"915","severity":1,"message":"935","line":19,"column":8,"nodeType":"917","messageId":"918","endLine":19,"endColumn":29},{"ruleId":"915","severity":1,"message":"936","line":21,"column":8,"nodeType":"917","messageId":"918","endLine":21,"endColumn":32},{"ruleId":"915","severity":1,"message":"937","line":24,"column":10,"nodeType":"917","messageId":"918","endLine":24,"endColumn":18},{"ruleId":"915","severity":1,"message":"938","line":39,"column":11,"nodeType":"917","messageId":"918","endLine":39,"endColumn":27},{"ruleId":"911","severity":1,"message":"939","line":46,"column":6,"nodeType":"913","endLine":83,"endColumn":4,"suggestions":"940"},{"ruleId":"911","severity":1,"message":"941","line":47,"column":5,"nodeType":"942","endLine":47,"endColumn":54},{"ruleId":"915","severity":1,"message":"943","line":3,"column":20,"nodeType":"917","messageId":"918","endLine":3,"endColumn":27},{"ruleId":"915","severity":1,"message":"944","line":23,"column":27,"nodeType":"917","messageId":"918","endLine":23,"endColumn":45},{"ruleId":"921","severity":1,"message":"922","line":30,"column":58,"nodeType":"923","messageId":"924","endLine":30,"endColumn":60},{"ruleId":"921","severity":1,"message":"922","line":31,"column":62,"nodeType":"923","messageId":"924","endLine":31,"endColumn":64},{"ruleId":"911","severity":1,"message":"945","line":34,"column":6,"nodeType":"913","endLine":34,"endColumn":14,"suggestions":"946"},{"ruleId":"921","severity":1,"message":"922","line":43,"column":49,"nodeType":"923","messageId":"924","endLine":43,"endColumn":51},{"ruleId":"921","severity":1,"message":"922","line":50,"column":20,"nodeType":"923","messageId":"924","endLine":50,"endColumn":22},{"ruleId":"921","severity":1,"message":"922","line":53,"column":24,"nodeType":"923","messageId":"924","endLine":53,"endColumn":26},{"ruleId":"911","severity":1,"message":"947","line":66,"column":6,"nodeType":"913","endLine":66,"endColumn":68,"suggestions":"948"},{"ruleId":"949","severity":1,"message":"950","line":78,"column":9,"nodeType":"951","endLine":78,"endColumn":80},{"ruleId":"952","severity":1,"message":"953","line":79,"column":11,"nodeType":"951","endLine":79,"endColumn":66},{"ruleId":"952","severity":1,"message":"953","line":107,"column":11,"nodeType":"951","endLine":110,"endColumn":13},{"ruleId":"915","severity":1,"message":"954","line":25,"column":16,"nodeType":"917","messageId":"918","endLine":25,"endColumn":23},{"ruleId":"915","severity":1,"message":"955","line":4,"column":8,"nodeType":"917","messageId":"918","endLine":4,"endColumn":14},{"ruleId":"911","severity":1,"message":"931","line":44,"column":6,"nodeType":"913","endLine":44,"endColumn":8,"suggestions":"956"},{"ruleId":"921","severity":1,"message":"922","line":47,"column":31,"nodeType":"923","messageId":"924","endLine":47,"endColumn":33},{"ruleId":"921","severity":1,"message":"922","line":47,"column":60,"nodeType":"923","messageId":"924","endLine":47,"endColumn":62},{"ruleId":"921","severity":1,"message":"930","line":55,"column":45,"nodeType":"923","messageId":"924","endLine":55,"endColumn":47},{"ruleId":"921","severity":1,"message":"922","line":60,"column":31,"nodeType":"923","messageId":"924","endLine":60,"endColumn":33},{"ruleId":"921","severity":1,"message":"922","line":60,"column":60,"nodeType":"923","messageId":"924","endLine":60,"endColumn":62},{"ruleId":"921","severity":1,"message":"930","line":64,"column":33,"nodeType":"923","messageId":"924","endLine":64,"endColumn":35},{"ruleId":"921","severity":1,"message":"922","line":73,"column":48,"nodeType":"923","messageId":"924","endLine":73,"endColumn":50},{"ruleId":"921","severity":1,"message":"922","line":78,"column":72,"nodeType":"923","messageId":"924","endLine":78,"endColumn":74},{"ruleId":"921","severity":1,"message":"922","line":84,"column":70,"nodeType":"923","messageId":"924","endLine":84,"endColumn":72},{"ruleId":"911","severity":1,"message":"957","line":89,"column":6,"nodeType":"913","endLine":89,"endColumn":12,"suggestions":"958"},{"ruleId":"921","severity":1,"message":"922","line":113,"column":11,"nodeType":"923","messageId":"924","endLine":113,"endColumn":13},{"ruleId":"921","severity":1,"message":"922","line":115,"column":20,"nodeType":"923","messageId":"924","endLine":115,"endColumn":22},{"ruleId":"921","severity":1,"message":"922","line":167,"column":29,"nodeType":"923","messageId":"924","endLine":167,"endColumn":31},{"ruleId":"921","severity":1,"message":"922","line":168,"column":27,"nodeType":"923","messageId":"924","endLine":168,"endColumn":29},{"ruleId":"921","severity":1,"message":"922","line":179,"column":55,"nodeType":"923","messageId":"924","endLine":179,"endColumn":57},{"ruleId":"921","severity":1,"message":"922","line":180,"column":59,"nodeType":"923","messageId":"924","endLine":180,"endColumn":61},{"ruleId":"921","severity":1,"message":"930","line":215,"column":38,"nodeType":"923","messageId":"924","endLine":215,"endColumn":40},{"ruleId":"921","severity":1,"message":"922","line":221,"column":49,"nodeType":"923","messageId":"924","endLine":221,"endColumn":51},{"ruleId":"915","severity":1,"message":"959","line":8,"column":22,"nodeType":"917","messageId":"918","endLine":8,"endColumn":34},{"ruleId":"915","severity":1,"message":"959","line":8,"column":22,"nodeType":"917","messageId":"918","endLine":8,"endColumn":34},{"ruleId":"911","severity":1,"message":"931","line":119,"column":6,"nodeType":"913","endLine":119,"endColumn":8,"suggestions":"960"},{"ruleId":"911","severity":1,"message":"961","line":127,"column":6,"nodeType":"913","endLine":127,"endColumn":12,"suggestions":"962"},{"ruleId":"911","severity":1,"message":"931","line":58,"column":6,"nodeType":"913","endLine":58,"endColumn":8,"suggestions":"963"},{"ruleId":"911","severity":1,"message":"961","line":66,"column":6,"nodeType":"913","endLine":66,"endColumn":12,"suggestions":"964"},{"ruleId":"915","severity":1,"message":"965","line":7,"column":23,"nodeType":"917","messageId":"918","endLine":7,"endColumn":34},{"ruleId":"911","severity":1,"message":"931","line":93,"column":6,"nodeType":"913","endLine":93,"endColumn":8,"suggestions":"966"},{"ruleId":"911","severity":1,"message":"967","line":106,"column":6,"nodeType":"913","endLine":106,"endColumn":12,"suggestions":"968"},{"ruleId":"949","severity":1,"message":"950","line":28,"column":13,"nodeType":"951","endLine":31,"endColumn":14},{"ruleId":"952","severity":1,"message":"953","line":32,"column":15,"nodeType":"951","endLine":35,"endColumn":17},{"ruleId":"911","severity":1,"message":"969","line":89,"column":6,"nodeType":"913","endLine":89,"endColumn":8,"suggestions":"970"},{"ruleId":"911","severity":1,"message":"971","line":93,"column":33,"nodeType":"972","endLine":93,"endColumn":34},{"ruleId":"973","severity":1,"message":"974","line":163,"column":30,"nodeType":"975","messageId":"976","endLine":163,"endColumn":32},{"ruleId":"911","severity":1,"message":"931","line":62,"column":6,"nodeType":"913","endLine":62,"endColumn":8,"suggestions":"977"},{"ruleId":"911","severity":1,"message":"961","line":70,"column":6,"nodeType":"913","endLine":70,"endColumn":12,"suggestions":"978"},{"ruleId":"915","severity":1,"message":"979","line":35,"column":10,"nodeType":"917","messageId":"918","endLine":35,"endColumn":15},{"ruleId":"911","severity":1,"message":"931","line":102,"column":6,"nodeType":"913","endLine":102,"endColumn":8,"suggestions":"980"},{"ruleId":"911","severity":1,"message":"961","line":110,"column":6,"nodeType":"913","endLine":110,"endColumn":12,"suggestions":"981"},{"ruleId":"915","severity":1,"message":"979","line":40,"column":10,"nodeType":"917","messageId":"918","endLine":40,"endColumn":15},{"ruleId":"911","severity":1,"message":"931","line":79,"column":6,"nodeType":"913","endLine":79,"endColumn":8,"suggestions":"982"},{"ruleId":"911","severity":1,"message":"961","line":87,"column":6,"nodeType":"913","endLine":87,"endColumn":12,"suggestions":"983"},{"ruleId":"915","severity":1,"message":"979","line":42,"column":10,"nodeType":"917","messageId":"918","endLine":42,"endColumn":15},{"ruleId":"911","severity":1,"message":"931","line":161,"column":6,"nodeType":"913","endLine":161,"endColumn":8,"suggestions":"984"},{"ruleId":"911","severity":1,"message":"961","line":169,"column":6,"nodeType":"913","endLine":169,"endColumn":12,"suggestions":"985"},{"ruleId":"949","severity":1,"message":"950","line":27,"column":13,"nodeType":"951","endLine":30,"endColumn":14},{"ruleId":"952","severity":1,"message":"953","line":31,"column":15,"nodeType":"951","endLine":34,"endColumn":17},{"ruleId":"915","severity":1,"message":"986","line":8,"column":9,"nodeType":"917","messageId":"918","endLine":8,"endColumn":17},{"ruleId":"915","severity":1,"message":"986","line":8,"column":9,"nodeType":"917","messageId":"918","endLine":8,"endColumn":17},{"ruleId":"915","severity":1,"message":"943","line":1,"column":20,"nodeType":"917","messageId":"918","endLine":1,"endColumn":27},{"ruleId":"915","severity":1,"message":"943","line":1,"column":20,"nodeType":"917","messageId":"918","endLine":1,"endColumn":27},{"ruleId":"915","severity":1,"message":"937","line":6,"column":10,"nodeType":"917","messageId":"918","endLine":6,"endColumn":18},{"ruleId":"915","severity":1,"message":"943","line":1,"column":23,"nodeType":"917","messageId":"918","endLine":1,"endColumn":30},{"ruleId":"915","severity":1,"message":"986","line":9,"column":9,"nodeType":"917","messageId":"918","endLine":9,"endColumn":17},{"ruleId":"952","severity":1,"message":"953","line":42,"column":11,"nodeType":"951","endLine":50,"endColumn":13},{"ruleId":"952","severity":1,"message":"953","line":63,"column":11,"nodeType":"951","endLine":71,"endColumn":13},{"ruleId":"915","severity":1,"message":"987","line":3,"column":10,"nodeType":"917","messageId":"918","endLine":3,"endColumn":18},{"ruleId":"915","severity":1,"message":"988","line":6,"column":16,"nodeType":"917","messageId":"918","endLine":6,"endColumn":23},{"ruleId":"915","severity":1,"message":"937","line":8,"column":10,"nodeType":"917","messageId":"918","endLine":8,"endColumn":18},{"ruleId":"915","severity":1,"message":"989","line":8,"column":5,"nodeType":"917","messageId":"918","endLine":8,"endColumn":13},{"ruleId":"952","severity":1,"message":"953","line":41,"column":9,"nodeType":"951","endLine":47,"endColumn":11},{"ruleId":"915","severity":1,"message":"987","line":3,"column":10,"nodeType":"917","messageId":"918","endLine":3,"endColumn":18},{"ruleId":"915","severity":1,"message":"990","line":4,"column":8,"nodeType":"917","messageId":"918","endLine":4,"endColumn":16},{"ruleId":"915","severity":1,"message":"991","line":4,"column":8,"nodeType":"917","messageId":"918","endLine":4,"endColumn":13},{"ruleId":"915","severity":1,"message":"965","line":8,"column":23,"nodeType":"917","messageId":"918","endLine":8,"endColumn":34},{"ruleId":"915","severity":1,"message":"992","line":9,"column":22,"nodeType":"917","messageId":"918","endLine":9,"endColumn":37},{"ruleId":"911","severity":1,"message":"993","line":32,"column":3,"nodeType":"917","endLine":32,"endColumn":12,"suggestions":"994"},{"ruleId":"915","severity":1,"message":"987","line":2,"column":10,"nodeType":"917","messageId":"918","endLine":2,"endColumn":18},{"ruleId":"915","severity":1,"message":"965","line":4,"column":10,"nodeType":"917","messageId":"918","endLine":4,"endColumn":21},{"ruleId":"915","severity":1,"message":"990","line":6,"column":8,"nodeType":"917","messageId":"918","endLine":6,"endColumn":16},{"ruleId":"952","severity":1,"message":"953","line":45,"column":9,"nodeType":"951","endLine":48,"endColumn":11},{"ruleId":"952","severity":1,"message":"953","line":56,"column":9,"nodeType":"951","endLine":59,"endColumn":11},{"ruleId":"952","severity":1,"message":"953","line":67,"column":9,"nodeType":"951","endLine":70,"endColumn":11},{"ruleId":"952","severity":1,"message":"953","line":78,"column":9,"nodeType":"951","endLine":81,"endColumn":11},{"ruleId":"952","severity":1,"message":"953","line":89,"column":9,"nodeType":"951","endLine":92,"endColumn":11},{"ruleId":"952","severity":1,"message":"953","line":100,"column":9,"nodeType":"951","endLine":103,"endColumn":11},{"ruleId":"911","severity":1,"message":"995","line":150,"column":6,"nodeType":"913","endLine":150,"endColumn":54,"suggestions":"996"},{"ruleId":"949","severity":1,"message":"950","line":25,"column":13,"nodeType":"951","endLine":28,"endColumn":14},{"ruleId":"952","severity":1,"message":"953","line":29,"column":15,"nodeType":"951","endLine":29,"endColumn":79},{"ruleId":"915","severity":1,"message":"943","line":1,"column":20,"nodeType":"917","messageId":"918","endLine":1,"endColumn":27},{"ruleId":"915","severity":1,"message":"943","line":1,"column":27,"nodeType":"917","messageId":"918","endLine":1,"endColumn":34},{"ruleId":"915","severity":1,"message":"987","line":2,"column":10,"nodeType":"917","messageId":"918","endLine":2,"endColumn":18},{"ruleId":"915","severity":1,"message":"997","line":7,"column":22,"nodeType":"917","messageId":"918","endLine":7,"endColumn":35},{"ruleId":"915","severity":1,"message":"998","line":9,"column":9,"nodeType":"917","messageId":"918","endLine":9,"endColumn":20},{"ruleId":"915","severity":1,"message":"965","line":1,"column":10,"nodeType":"917","messageId":"918","endLine":1,"endColumn":21},{"ruleId":"915","severity":1,"message":"999","line":3,"column":10,"nodeType":"917","messageId":"918","endLine":3,"endColumn":26},{"ruleId":"915","severity":1,"message":"943","line":4,"column":27,"nodeType":"917","messageId":"918","endLine":4,"endColumn":34},{"ruleId":"915","severity":1,"message":"987","line":5,"column":10,"nodeType":"917","messageId":"918","endLine":5,"endColumn":18},{"ruleId":"915","severity":1,"message":"1000","line":6,"column":10,"nodeType":"917","messageId":"918","endLine":6,"endColumn":16},{"ruleId":"915","severity":1,"message":"1001","line":7,"column":8,"nodeType":"917","messageId":"918","endLine":7,"endColumn":17},{"ruleId":"915","severity":1,"message":"1002","line":8,"column":8,"nodeType":"917","messageId":"918","endLine":8,"endColumn":19},{"ruleId":"915","severity":1,"message":"987","line":3,"column":10,"nodeType":"917","messageId":"918","endLine":3,"endColumn":18},{"ruleId":"915","severity":1,"message":"965","line":1,"column":10,"nodeType":"917","messageId":"918","endLine":1,"endColumn":21},{"ruleId":"915","severity":1,"message":"1003","line":3,"column":15,"nodeType":"917","messageId":"918","endLine":3,"endColumn":20},{"ruleId":"915","severity":1,"message":"943","line":3,"column":27,"nodeType":"917","messageId":"918","endLine":3,"endColumn":34},{"ruleId":"915","severity":1,"message":"987","line":4,"column":10,"nodeType":"917","messageId":"918","endLine":4,"endColumn":18},{"ruleId":"915","severity":1,"message":"1004","line":6,"column":10,"nodeType":"917","messageId":"918","endLine":6,"endColumn":26},{"ruleId":"915","severity":1,"message":"998","line":38,"column":9,"nodeType":"917","messageId":"918","endLine":38,"endColumn":20},{"ruleId":"915","severity":1,"message":"1005","line":3,"column":10,"nodeType":"917","messageId":"918","endLine":3,"endColumn":19},{"ruleId":"915","severity":1,"message":"987","line":3,"column":10,"nodeType":"917","messageId":"918","endLine":3,"endColumn":18},{"ruleId":"915","severity":1,"message":"987","line":3,"column":10,"nodeType":"917","messageId":"918","endLine":3,"endColumn":18},{"ruleId":"921","severity":1,"message":"930","line":43,"column":23,"nodeType":"923","messageId":"924","endLine":43,"endColumn":25},{"ruleId":"915","severity":1,"message":"1006","line":56,"column":9,"nodeType":"917","messageId":"918","endLine":56,"endColumn":22},{"ruleId":"915","severity":1,"message":"987","line":3,"column":10,"nodeType":"917","messageId":"918","endLine":3,"endColumn":18},{"ruleId":"915","severity":1,"message":"987","line":3,"column":10,"nodeType":"917","messageId":"918","endLine":3,"endColumn":18},{"ruleId":"915","severity":1,"message":"987","line":5,"column":10,"nodeType":"917","messageId":"918","endLine":5,"endColumn":18},{"ruleId":"915","severity":1,"message":"1007","line":3,"column":15,"nodeType":"917","messageId":"918","endLine":3,"endColumn":20},{"ruleId":"915","severity":1,"message":"943","line":3,"column":27,"nodeType":"917","messageId":"918","endLine":3,"endColumn":34},{"ruleId":"915","severity":1,"message":"1008","line":12,"column":31,"nodeType":"917","messageId":"918","endLine":12,"endColumn":42},{"ruleId":"915","severity":1,"message":"1009","line":15,"column":11,"nodeType":"917","messageId":"918","endLine":15,"endColumn":23},{"ruleId":"921","severity":1,"message":"922","line":20,"column":58,"nodeType":"923","messageId":"924","endLine":20,"endColumn":60},{"ruleId":"921","severity":1,"message":"922","line":21,"column":62,"nodeType":"923","messageId":"924","endLine":21,"endColumn":64},{"ruleId":"911","severity":1,"message":"1010","line":24,"column":6,"nodeType":"913","endLine":24,"endColumn":68,"suggestions":"1011"},{"ruleId":"915","severity":1,"message":"1005","line":2,"column":10,"nodeType":"917","messageId":"918","endLine":2,"endColumn":19},{"ruleId":"915","severity":1,"message":"987","line":2,"column":21,"nodeType":"917","messageId":"918","endLine":2,"endColumn":29},{"ruleId":"915","severity":1,"message":"965","line":3,"column":10,"nodeType":"917","messageId":"918","endLine":3,"endColumn":21},{"ruleId":"915","severity":1,"message":"937","line":6,"column":10,"nodeType":"917","messageId":"918","endLine":6,"endColumn":18},{"ruleId":"915","severity":1,"message":"1012","line":10,"column":3,"nodeType":"917","messageId":"918","endLine":10,"endColumn":10},{"ruleId":"921","severity":1,"message":"930","line":24,"column":47,"nodeType":"923","messageId":"924","endLine":24,"endColumn":49},{"ruleId":"921","severity":1,"message":"930","line":24,"column":101,"nodeType":"923","messageId":"924","endLine":24,"endColumn":103},{"ruleId":"911","severity":1,"message":"1013","line":37,"column":6,"nodeType":"913","endLine":37,"endColumn":12,"suggestions":"1014"},{"ruleId":"911","severity":1,"message":"1015","line":46,"column":6,"nodeType":"913","endLine":46,"endColumn":8,"suggestions":"1016"},{"ruleId":"1017","severity":1,"message":"1018","line":80,"column":15,"nodeType":"975","messageId":"1019","endLine":80,"endColumn":59},{"ruleId":"921","severity":1,"message":"930","line":83,"column":27,"nodeType":"923","messageId":"924","endLine":83,"endColumn":29},{"ruleId":"921","severity":1,"message":"922","line":85,"column":48,"nodeType":"923","messageId":"924","endLine":85,"endColumn":50},{"ruleId":"1017","severity":1,"message":"1018","line":180,"column":13,"nodeType":"975","messageId":"1019","endLine":181,"endColumn":74},{"ruleId":"1020","severity":1,"message":"1021","line":212,"column":5,"nodeType":"1022","messageId":"1023","endLine":247,"endColumn":7},{"ruleId":"915","severity":1,"message":"1024","line":3,"column":3,"nodeType":"917","messageId":"918","endLine":3,"endColumn":14},{"ruleId":"911","severity":1,"message":"912","line":26,"column":6,"nodeType":"913","endLine":26,"endColumn":18,"suggestions":"1025"},{"ruleId":"915","severity":1,"message":"916","line":6,"column":9,"nodeType":"917","messageId":"918","endLine":6,"endColumn":17},{"ruleId":"921","severity":1,"message":"922","line":144,"column":16,"nodeType":"923","messageId":"924","endLine":144,"endColumn":18},{"ruleId":"921","severity":1,"message":"922","line":146,"column":23,"nodeType":"923","messageId":"924","endLine":146,"endColumn":25},{"ruleId":"1026","severity":1,"message":"1027","line":276,"column":67,"nodeType":"923","messageId":"1028","endLine":276,"endColumn":80},{"ruleId":"921","severity":1,"message":"922","line":44,"column":33,"nodeType":"923","messageId":"924","endLine":44,"endColumn":35},{"ruleId":"921","severity":1,"message":"922","line":44,"column":64,"nodeType":"923","messageId":"924","endLine":44,"endColumn":66},{"ruleId":"911","severity":1,"message":"1029","line":56,"column":6,"nodeType":"913","endLine":56,"endColumn":24,"suggestions":"1030"},{"ruleId":"911","severity":1,"message":"1031","line":67,"column":6,"nodeType":"913","endLine":67,"endColumn":8,"suggestions":"1032"},{"ruleId":"911","severity":1,"message":"912","line":98,"column":6,"nodeType":"913","endLine":98,"endColumn":31,"suggestions":"1033"},{"ruleId":"921","severity":1,"message":"930","line":113,"column":39,"nodeType":"923","messageId":"924","endLine":113,"endColumn":41},{"ruleId":"921","severity":1,"message":"922","line":122,"column":49,"nodeType":"923","messageId":"924","endLine":122,"endColumn":51},{"ruleId":"921","severity":1,"message":"922","line":123,"column":53,"nodeType":"923","messageId":"924","endLine":123,"endColumn":55},{"ruleId":"921","severity":1,"message":"922","line":137,"column":43,"nodeType":"923","messageId":"924","endLine":137,"endColumn":45},{"ruleId":"921","severity":1,"message":"922","line":138,"column":47,"nodeType":"923","messageId":"924","endLine":138,"endColumn":49},{"ruleId":"921","severity":1,"message":"930","line":150,"column":13,"nodeType":"923","messageId":"924","endLine":150,"endColumn":15},{"ruleId":"921","severity":1,"message":"930","line":150,"column":35,"nodeType":"923","messageId":"924","endLine":150,"endColumn":37},{"ruleId":"915","severity":1,"message":"916","line":9,"column":9,"nodeType":"917","messageId":"918","endLine":9,"endColumn":17},{"ruleId":"915","severity":1,"message":"959","line":8,"column":22,"nodeType":"917","messageId":"918","endLine":8,"endColumn":34},{"ruleId":"907","replacedBy":"1034"},{"ruleId":"909","replacedBy":"1035"},{"ruleId":"915","severity":1,"message":"959","line":8,"column":22,"nodeType":"917","messageId":"918","endLine":8,"endColumn":34},{"ruleId":"915","severity":1,"message":"938","line":10,"column":11,"nodeType":"917","messageId":"918","endLine":10,"endColumn":27},{"ruleId":"915","severity":1,"message":"1036","line":1,"column":20,"nodeType":"917","messageId":"918","endLine":1,"endColumn":24},{"ruleId":"915","severity":1,"message":"943","line":1,"column":26,"nodeType":"917","messageId":"918","endLine":1,"endColumn":33},{"ruleId":"915","severity":1,"message":"1037","line":32,"column":10,"nodeType":"917","messageId":"918","endLine":32,"endColumn":20},{"ruleId":"915","severity":1,"message":"1038","line":33,"column":10,"nodeType":"917","messageId":"918","endLine":33,"endColumn":18},{"ruleId":"911","severity":1,"message":"931","line":47,"column":6,"nodeType":"913","endLine":47,"endColumn":8,"suggestions":"1039"},{"ruleId":"911","severity":1,"message":"1040","line":51,"column":6,"nodeType":"913","endLine":51,"endColumn":12,"suggestions":"1041"},{"ruleId":"911","severity":1,"message":"1040","line":55,"column":6,"nodeType":"913","endLine":55,"endColumn":38,"suggestions":"1042"},{"ruleId":"921","severity":1,"message":"930","line":105,"column":38,"nodeType":"923","messageId":"924","endLine":105,"endColumn":40},{"ruleId":"1017","severity":1,"message":"1018","line":112,"column":21,"nodeType":"975","messageId":"1019","endLine":112,"endColumn":61},{"ruleId":"1017","severity":1,"message":"1018","line":125,"column":21,"nodeType":"975","messageId":"1019","endLine":125,"endColumn":61},{"ruleId":"1043","severity":1,"message":"1044","line":135,"column":22,"nodeType":"917","messageId":"1045","endLine":135,"endColumn":23},{"ruleId":"915","severity":1,"message":"916","line":15,"column":9,"nodeType":"917","messageId":"918","endLine":15,"endColumn":17},{"ruleId":"911","severity":1,"message":"931","line":43,"column":6,"nodeType":"913","endLine":43,"endColumn":8,"suggestions":"1046"},{"ruleId":"921","severity":1,"message":"930","line":48,"column":33,"nodeType":"923","messageId":"924","endLine":48,"endColumn":35},{"ruleId":"921","severity":1,"message":"922","line":51,"column":21,"nodeType":"923","messageId":"924","endLine":51,"endColumn":23},{"ruleId":"921","severity":1,"message":"922","line":51,"column":41,"nodeType":"923","messageId":"924","endLine":51,"endColumn":43},{"ruleId":"921","severity":1,"message":"922","line":64,"column":45,"nodeType":"923","messageId":"924","endLine":64,"endColumn":47},{"ruleId":"921","severity":1,"message":"922","line":65,"column":46,"nodeType":"923","messageId":"924","endLine":65,"endColumn":48},{"ruleId":"921","severity":1,"message":"922","line":72,"column":70,"nodeType":"923","messageId":"924","endLine":72,"endColumn":72},{"ruleId":"911","severity":1,"message":"1047","line":76,"column":6,"nodeType":"913","endLine":76,"endColumn":12,"suggestions":"1048"},{"ruleId":"921","severity":1,"message":"922","line":106,"column":45,"nodeType":"923","messageId":"924","endLine":106,"endColumn":47},{"ruleId":"921","severity":1,"message":"922","line":107,"column":46,"nodeType":"923","messageId":"924","endLine":107,"endColumn":48},{"ruleId":"921","severity":1,"message":"922","line":111,"column":19,"nodeType":"923","messageId":"924","endLine":111,"endColumn":21},{"ruleId":"921","severity":1,"message":"922","line":111,"column":39,"nodeType":"923","messageId":"924","endLine":111,"endColumn":41},{"ruleId":"921","severity":1,"message":"922","line":123,"column":39,"nodeType":"923","messageId":"924","endLine":123,"endColumn":41},{"ruleId":"907","replacedBy":"1049"},{"ruleId":"909","replacedBy":"1050"},{"ruleId":"952","severity":1,"message":"953","line":72,"column":13,"nodeType":"951","endLine":76,"endColumn":15},{"ruleId":"921","severity":1,"message":"922","line":77,"column":19,"nodeType":"923","messageId":"924","endLine":77,"endColumn":21},{"ruleId":"921","severity":1,"message":"922","line":77,"column":39,"nodeType":"923","messageId":"924","endLine":77,"endColumn":41},{"ruleId":"915","severity":1,"message":"1051","line":5,"column":9,"nodeType":"917","messageId":"918","endLine":5,"endColumn":15},{"ruleId":"915","severity":1,"message":"1052","line":11,"column":36,"nodeType":"917","messageId":"918","endLine":11,"endColumn":52},{"ruleId":"921","severity":1,"message":"922","line":12,"column":19,"nodeType":"923","messageId":"924","endLine":12,"endColumn":21},{"ruleId":"921","severity":1,"message":"922","line":12,"column":39,"nodeType":"923","messageId":"924","endLine":12,"endColumn":41},{"ruleId":"911","severity":1,"message":"995","line":150,"column":6,"nodeType":"913","endLine":150,"endColumn":54,"suggestions":"1053"},{"ruleId":"915","severity":1,"message":"1054","line":2,"column":8,"nodeType":"917","messageId":"918","endLine":2,"endColumn":23},{"ruleId":"915","severity":1,"message":"1055","line":8,"column":10,"nodeType":"917","messageId":"918","endLine":8,"endColumn":24},{"ruleId":"921","severity":1,"message":"922","line":21,"column":19,"nodeType":"923","messageId":"924","endLine":21,"endColumn":21},{"ruleId":"921","severity":1,"message":"922","line":21,"column":39,"nodeType":"923","messageId":"924","endLine":21,"endColumn":41},{"ruleId":"915","severity":1,"message":"937","line":6,"column":10,"nodeType":"917","messageId":"918","endLine":6,"endColumn":18},{"ruleId":"921","severity":1,"message":"930","line":18,"column":22,"nodeType":"923","messageId":"924","endLine":18,"endColumn":24},{"ruleId":"921","severity":1,"message":"930","line":18,"column":64,"nodeType":"923","messageId":"924","endLine":18,"endColumn":66},{"ruleId":"911","severity":1,"message":"1056","line":27,"column":6,"nodeType":"913","endLine":27,"endColumn":17,"suggestions":"1057"},{"ruleId":"1017","severity":1,"message":"1018","line":74,"column":13,"nodeType":"975","messageId":"1019","endLine":75,"endColumn":74},{"ruleId":"921","severity":1,"message":"922","line":98,"column":51,"nodeType":"923","messageId":"924","endLine":98,"endColumn":53},{"ruleId":"915","severity":1,"message":"937","line":8,"column":10,"nodeType":"917","messageId":"918","endLine":8,"endColumn":18},{"ruleId":"915","severity":1,"message":"916","line":10,"column":9,"nodeType":"917","messageId":"918","endLine":10,"endColumn":17},{"ruleId":"911","severity":1,"message":"931","line":26,"column":6,"nodeType":"913","endLine":26,"endColumn":8,"suggestions":"1058"},{"ruleId":"911","severity":1,"message":"1059","line":33,"column":6,"nodeType":"913","endLine":33,"endColumn":12,"suggestions":"1060"},{"ruleId":"915","severity":1,"message":"986","line":8,"column":9,"nodeType":"917","messageId":"918","endLine":8,"endColumn":17},{"ruleId":"915","severity":1,"message":"916","line":13,"column":9,"nodeType":"917","messageId":"918","endLine":13,"endColumn":17},"no-native-reassign",["1061"],"no-negated-in-lhs",["1062"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["1063"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar",["1064"],"'jobInfo' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["1065"],"React Hook useEffect has missing dependencies: 'intervalId', 'loadLSAppData', 'loadLSFactoryData', and 'loadLSUserData'. Either include them or remove the dependency array.",["1066"],"React Hook useEffect has a missing dependency: 'loadServerAppData'. Either include it or remove the dependency array.",["1067"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'intervalId'. Either include it or remove the dependency array.",["1068"],"React Hook useEffect has a missing dependency: 'factoryDataStore.idle_times'. Either include it or remove the dependency array.",["1069"],"'SettingsAppInfoLayout' is defined but never used.","'SettingsServerInfoLayout' is defined but never used.","'LS_ITEMS' is defined but never used.","'factoryDataStore' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'appDataStore'. Either include it or remove the dependency array.",["1070"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'message' is defined but never used.","'setServerConnected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'factoryDataStore.machine_status'. Either include it or remove the dependency array.",["1071"],"React Hook useEffect has missing dependencies: 'appDataStore.time_stop' and 'factoryDataStore.machine_status'. Either include them or remove the dependency array.",["1072"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'setPics' is assigned a value but never used.","'moment' is defined but never used.",["1073"],"React Hook useEffect has missing dependencies: 'appDataStore.time_stop', 'setIdleStatus', 'setInCycleStatus', 'setUnCategorizedStatus', and 'showDowntimeReasonView'. Either include them or remove the dependency array.",["1074"],"'setWrongList' is assigned a value but never used.",["1075"],"React Hook useEffect has missing dependencies: 'isStarted' and 'processingTime'. Either include them or remove the dependency array. You can also do a functional update 'setProcessingTime(p => ...)' if you only need 'processingTime' in the 'setProcessingTime' call.",["1076"],["1077"],["1078"],"'useSelector' is defined but never used.",["1079"],"React Hook useEffect has missing dependencies: 'isStarted', 'selectedTankIndex', and 'times'. Either include them or remove the dependency array.",["1080"],"React Hook useEffect has missing dependencies: 'getTemperatureData' and 'intervalId'. Either include them or remove the dependency array.",["1081"],"Assignments to the 'timeLastTemperatureData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["1082"],["1083"],"'notes' is assigned a value but never used.",["1084"],["1085"],["1086"],["1087"],["1088"],["1089"],"'authData' is assigned a value but never used.","'useState' is defined but never used.","'setTime' is assigned a value but never used.","'setTimes' is assigned a value but never used.","'TextArea' is defined but never used.","'dayjs' is defined but never used.","'setAppDataStore' is defined but never used.","React Hook useEffect contains a call to 'setRDate'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [formattedDate, formattedTime] as a second argument to the useEffect Hook.",["1090"],"React Hook useEffect has a missing dependency: 'onLogoutJobID'. Either include it or remove the dependency array.",["1091"],"'setAppVersion' is assigned a value but never used.","'onEditJobID' is assigned a value but never used.","'PlayCircleFilled' is defined but never used.","'Parser' is defined but never used.","'TextInput' is defined but never used.","'RadialInput' is defined but never used.","'Radio' is defined but never used.","'shiftSettingInfo' is defined but never used.","'useEffect' is defined but never used.","'validate_info' is assigned a value but never used.","'Input' is defined but never used.","'marginRight' is assigned a value but never used.","'appDataStore' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'status'. Either include it or remove the dependency array.",["1092"],"'appData' is defined but never used.","React Hook useEffect has a missing dependency: 'loadGanttData'. Either include it or remove the dependency array.",["1093"],"React Hook useEffect has missing dependencies: 'intervalId' and 'loadGanttData'. Either include them or remove the dependency array.",["1094"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","unsafeRefs","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'ROUTE_LOGIN' is defined but never used.",["1095"],"use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","React Hook useEffect has missing dependencies: 'customer_id' and 'dispatch'. Either include them or remove the dependency array.",["1096"],"React Hook useEffect has missing dependencies: 'intervalId', 'loadLSAppData', and 'loadLSUserData'. Either include them or remove the dependency array.",["1097"],["1098"],["1061"],["1062"],"'Spin' is defined but never used.","'shiftStart' is assigned a value but never used.","'shiftEnd' is assigned a value but never used.",["1099"],"React Hook useEffect has a missing dependency: 'apiCallForGetMachineData'. Either include it or remove the dependency array.",["1100"],["1101"],"no-redeclare","'i' is already defined.","redeclared",["1102"],"React Hook useEffect has missing dependencies: 'appDataStore.time_stop', 'current_ganttdata.start', 'current_ganttdata.status', 'customer_details.timezone', 'customer_id', 'elapsedTime', 'last_ganttdata.start', 'machine_id', 'machine_status', 'setShowDowntimeReasonView', and 'updateMachineStatus'. Either include them or remove the dependency array.",["1103"],["1061"],["1062"],"'Option' is assigned a value but never used.","'customer_details' is assigned a value but never used.",["1104"],"'cholesterolIcon' is defined but never used.","'getBetweenTime' is defined but never used.","React Hook useEffect has a missing dependency: 'setGanttInfo'. Either include it or remove the dependency array.",["1105"],["1106"],"React Hook useEffect has a missing dependency: 'last_ganttdata.start'. Either include it or remove the dependency array.",["1107"],"no-global-assign","no-unsafe-negation",{"desc":"1108","fix":"1109"},{"desc":"1110","fix":"1111"},{"desc":"1112","fix":"1113"},{"desc":"1114","fix":"1115"},{"desc":"1116","fix":"1117"},{"desc":"1118","fix":"1119"},{"desc":"1120","fix":"1121"},{"desc":"1122","fix":"1123"},{"desc":"1124","fix":"1125"},{"desc":"1126","fix":"1127"},{"desc":"1118","fix":"1128"},{"desc":"1129","fix":"1130"},{"desc":"1118","fix":"1131"},{"desc":"1132","fix":"1133"},{"desc":"1118","fix":"1134"},{"desc":"1132","fix":"1135"},{"desc":"1118","fix":"1136"},{"desc":"1137","fix":"1138"},{"desc":"1139","fix":"1140"},{"desc":"1118","fix":"1141"},{"desc":"1132","fix":"1142"},{"desc":"1118","fix":"1143"},{"desc":"1132","fix":"1144"},{"desc":"1118","fix":"1145"},{"desc":"1132","fix":"1146"},{"desc":"1118","fix":"1147"},{"desc":"1132","fix":"1148"},{"desc":"1149","fix":"1150"},{"desc":"1151","fix":"1152"},{"desc":"1153","fix":"1154"},{"desc":"1155","fix":"1156"},{"desc":"1157","fix":"1158"},{"desc":"1108","fix":"1159"},{"desc":"1160","fix":"1161"},{"desc":"1162","fix":"1163"},{"desc":"1164","fix":"1165"},{"desc":"1118","fix":"1166"},{"desc":"1167","fix":"1168"},{"desc":"1169","fix":"1170"},{"desc":"1118","fix":"1171"},{"desc":"1172","fix":"1173"},{"desc":"1151","fix":"1174"},{"desc":"1175","fix":"1176"},{"desc":"1118","fix":"1177"},{"desc":"1178","fix":"1179"},"Update the dependencies array to be: [dispatch, screenSize]",{"range":"1180","text":"1181"},"Update the dependencies array to be: [dispatch]",{"range":"1182","text":"1183"},"Update the dependencies array to be: [dispatch, tick]",{"range":"1184","text":"1185"},"Update the dependencies array to be: [intervalId, loadLSAppData, loadLSFactoryData, loadLSUserData]",{"range":"1186","text":"1187"},"Update the dependencies array to be: [appDataStore.machineName, factoryDataStore.accountId, loadServerAppData]",{"range":"1188","text":"1189"},"Update the dependencies array to be: [intervalId]",{"range":"1190","text":"1191"},"Update the dependencies array to be: [factoryDataStore.idle_times, tick]",{"range":"1192","text":"1193"},"Update the dependencies array to be: [appDataStore.inCycleSignalFrom, appDataStore.machineName, appDataStore.downtime_reason1, appDataStore.downtime_reason2, appDataStore.downtime_reason3, appDataStore.downtime_reason4, appDataStore.downtime_reason5, appDataStore.downtime_reason6, appDataStore.downtime_reason7, appDataStore.downtime_reason8, appDataStore.cslock_cycle, appDataStore.cslock_reverse, appDataStore.cslock_guest, appDataStore.cslock_alert, appDataStore.time_stop, appDataStore.time_production, appDataStore.cycle_send_alert, appDataStore.cycle_email1, appDataStore.cycle_email2, appDataStore.cycle_email3, appDataStore.automatic_part, appDataStore.automatic_min_time, appDataStore.automatic_part_per_cycle, appDataStore.gantt_chart_display, appDataStore.calc_chart_title, appDataStore.calc_chart_formula, appDataStore.calc_chart_option, appDataStore.calc_chart_unit, appDataStore.calc_chart_disp_mode, appDataStore.calc_chart_max_value, appDataStore]",{"range":"1194","text":"1195"},"Update the dependencies array to be: [factoryDataStore.machine_status, status]",{"range":"1196","text":"1197"},"Update the dependencies array to be: [appDataStore.machineName, appDataStore.time_stop, factoryDataStore.current_ganttdata, factoryDataStore.machine_status]",{"range":"1198","text":"1199"},{"range":"1200","text":"1191"},"Update the dependencies array to be: [appDataStore.time_stop, setIdleStatus, setInCycleStatus, setUnCategorizedStatus, showDowntimeReasonView, tick]",{"range":"1201","text":"1202"},{"range":"1203","text":"1191"},"Update the dependencies array to be: [isStarted, processingTime, tick]",{"range":"1204","text":"1205"},{"range":"1206","text":"1191"},{"range":"1207","text":"1205"},{"range":"1208","text":"1191"},"Update the dependencies array to be: [isStarted, selectedTankIndex, tick, times]",{"range":"1209","text":"1210"},"Update the dependencies array to be: [getTemperatureData, intervalId]",{"range":"1211","text":"1212"},{"range":"1213","text":"1191"},{"range":"1214","text":"1205"},{"range":"1215","text":"1191"},{"range":"1216","text":"1205"},{"range":"1217","text":"1191"},{"range":"1218","text":"1205"},{"range":"1219","text":"1191"},{"range":"1220","text":"1205"},"Add dependencies array: [formattedDate, formattedTime]",{"range":"1221","text":"1222"},"Update the dependencies array to be: [factoryDataStore.accountId, appDataStore.jobId, onLogoutJobID]",{"range":"1223","text":"1224"},"Update the dependencies array to be: [factoryDataStore.machine_status, factoryDataStore.idle_times, status]",{"range":"1225","text":"1226"},"Update the dependencies array to be: [loadGanttData, tick]",{"range":"1227","text":"1228"},"Update the dependencies array to be: [intervalId, loadGanttData]",{"range":"1229","text":"1230"},{"range":"1231","text":"1181"},"Update the dependencies array to be: [tick, machine_id, customer_id, dispatch]",{"range":"1232","text":"1233"},"Update the dependencies array to be: [intervalId, loadLSAppData, loadLSUserData]",{"range":"1234","text":"1235"},"Update the dependencies array to be: [customer_id, dispatch, machine_id]",{"range":"1236","text":"1237"},{"range":"1238","text":"1191"},"Update the dependencies array to be: [apiCallForGetMachineData, tick]",{"range":"1239","text":"1240"},"Update the dependencies array to be: [apiCallForGetMachineData, customer_id, machine_id, shift]",{"range":"1241","text":"1242"},{"range":"1243","text":"1191"},"Update the dependencies array to be: [appDataStore.time_stop, current_ganttdata.start, current_ganttdata.status, customer_details.timezone, customer_id, elapsedTime, last_ganttdata.start, machine_id, machine_status, setShowDowntimeReasonView, tick, updateMachineStatus]",{"range":"1244","text":"1245"},{"range":"1246","text":"1224"},"Update the dependencies array to be: [ganttInfo, setGanttInfo]",{"range":"1247","text":"1248"},{"range":"1249","text":"1191"},"Update the dependencies array to be: [last_ganttdata.start, tick]",{"range":"1250","text":"1251"},[1048,1060],"[dispatch, screenSize]",[1798,1800],"[dispatch]",[2391,2397],"[dispatch, tick]",[2648,2650],"[intervalId, loadLSAppData, loadLSFactoryData, loadLSUserData]",[2708,2762],"[appDataStore.machineName, factoryDataStore.accountId, loadServerAppData]",[925,927],"[intervalId]",[1133,1139],"[factoryDataStore.idle_times, tick]",[2455,3590],"[appDataStore.inCycleSignalFrom, appDataStore.machineName, appDataStore.downtime_reason1, appDataStore.downtime_reason2, appDataStore.downtime_reason3, appDataStore.downtime_reason4, appDataStore.downtime_reason5, appDataStore.downtime_reason6, appDataStore.downtime_reason7, appDataStore.downtime_reason8, appDataStore.cslock_cycle, appDataStore.cslock_reverse, appDataStore.cslock_guest, appDataStore.cslock_alert, appDataStore.time_stop, appDataStore.time_production, appDataStore.cycle_send_alert, appDataStore.cycle_email1, appDataStore.cycle_email2, appDataStore.cycle_email3, appDataStore.automatic_part, appDataStore.automatic_min_time, appDataStore.automatic_part_per_cycle, appDataStore.gantt_chart_display, appDataStore.calc_chart_title, appDataStore.calc_chart_formula, appDataStore.calc_chart_option, appDataStore.calc_chart_unit, appDataStore.calc_chart_disp_mode, appDataStore.calc_chart_max_value, appDataStore]",[1384,1392],"[factoryDataStore.machine_status, status]",[2429,2491],"[appDataStore.machineName, appDataStore.time_stop, factoryDataStore.current_ganttdata, factoryDataStore.machine_status]",[1581,1583],[3000,3006],"[appDataStore.time_stop, setIdleStatus, setInCycleStatus, setUnCategorizedStatus, showDowntimeReasonView, tick]",[4054,4056],[4234,4240],"[isStarted, processingTime, tick]",[2441,2443],[2621,2627],[2509,2511],[2803,2809],"[isStarted, selectedTankIndex, tick, times]",[3186,3188],"[getTemperatureData, intervalId]",[2550,2552],[2730,2736],[3536,3538],[3716,3722],[2892,2894],[3072,3078],[4541,4543],[4721,4727],[1142,1142],", [formattedDate, formattedTime]",[5110,5158],"[factoryDataStore.accountId, appDataStore.jobId, onLogoutJobID]",[991,1053],"[factoryDataStore.machine_status, factoryDataStore.idle_times, status]",[1192,1198],"[loadGanttData, tick]",[1393,1395],"[intervalId, loadGanttData]",[861,873],[1954,1972],"[tick, machine_id, customer_id, dispatch]",[2199,2201],"[intervalId, loadLSAppData, loadLSUserData]",[3196,3221],"[customer_id, dispatch, machine_id]",[1963,1965],[2035,2041],"[apiCallForGetMachineData, tick]",[2110,2142],"[apiCallForGetMachineData, customer_id, machine_id, shift]",[1221,1223],[2250,2256],"[appDataStore.time_stop, current_ganttdata.start, current_ganttdata.status, customer_details.timezone, customer_id, elapsedTime, last_ganttdata.start, machine_id, machine_status, setShowDowntimeReasonView, tick, updateMachineStatus]",[5099,5147],[793,804],"[ganttInfo, setGanttInfo]",[863,865],[1065,1071],"[last_ganttdata.start, tick]"]